<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXDC743AE3D6B54C4095F083ECBF73A580">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">Shamrockin&apos;Guitar</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=108147115</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBXF231AB99F5FC405F95E4E8CB871254EE">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>-6.10000038</X>
					<Y>15.0000048</Y>
					<Z>1.90734863e-006</Z>
					<R00>0</R00>
					<R01>0</R01>
					<R02>1</R02>
					<R10>-0.707106769</R10>
					<R11>0.70710665</R11>
					<R12>0</R12>
					<R20>-0.70710665</R20>
					<R21>-0.707106769</R21>
					<R22>0</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>3.60000014</Y>
					<Z>1</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX094173997B1446FF80B4D16A733DABD1">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=108144854</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>2</X>
						<Y>2</Y>
						<Z>2</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=108144956</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX6C119AEF3CE743899936C7FBB376669A">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">ChordSound</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=60059129</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
		</Item>
		<Item class="Animation" referent="RBX8708191DD9AC435199670E76A9E9125E">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/Asset?ID=99200153</url></Content>
				<string name="Name">Hold</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX9B40E968E1D74B4E84AC6E2419761811">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/Asset?ID=99198989</url></Content>
				<string name="Name">Pluck</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX161CA53DE2D2470CB6FFFEBD3179D886">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source">--Rescripted by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
Debris = game:GetService(&quot;Debris&quot;)

Module = require(185791213)

NoteData = {
&#9;Chords = {
&#9;&#9;{Key = &quot;z&quot;, Sound = {Normal = 99170172, Sharp = 99189531}},
&#9;&#9;{Key = &quot;x&quot;, Sound = {Normal = 99170311, Sharp = 99189711}},
&#9;&#9;{Key = &quot;c&quot;, Sound = {Normal = 99170354, Sharp = 99189785}},
&#9;&#9;{Key = &quot;v&quot;, Sound = {Normal = 99170403, Sharp = 99190216}},
&#9;&#9;{Key = &quot;b&quot;, Sound = {Normal = 99170481, Sharp = 99189905}},
&#9;&#9;{Key = &quot;n&quot;, Sound = {Normal = 99170537, Sharp = 99190021}},
&#9;&#9;{Key = &quot;m&quot;, Sound = {Normal = 99170583, Sharp = 99190550}}
&#9;},
&#9;Pitches = {
&#9;&#9;{Key = &quot;g&quot;, Pitch = 0.5},
&#9;&#9;{Key = &quot;h&quot;, Pitch = 0.75},
&#9;&#9;{Key = &quot;j&quot;, Pitch = 1},
&#9;&#9;{Key = &quot;k&quot;, Pitch = 1.25},
&#9;&#9;{Key = &quot;l&quot;, Pitch = 1.5},
&#9;}
}

Grips = {
&#9;Hold = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
&#9;Play = CFrame.new(0.01923877, 1.19116962, 0.313162446, 0.49999997, 0.707106769, 0.49999997, 0.0564237535, 0.549525201, -0.833569586, -0.864185274, 0.444996685, 0.23486498)
}

Animations = {
&#9;Hold = {Animation = Tool:WaitForChild(&quot;Hold&quot;), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil},
&#9;Pluck = {Animation = Tool:WaitForChild(&quot;Pluck&quot;), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil}
}

Sounds = {
&#9;ChordSound = Handle:WaitForChild(&quot;ChordSound&quot;),
&#9;--Applause = Handle:WaitForChild(&quot;Applause&quot;)
}

ChordDuration = 0.25

ShiftDown = false
IsPlayingMusic = false
CurrentNote = 1
CurrentPitch = NoteData.Pitches[3] --((NoteData.Pitches[1] and NoteData.Pitches[1]) or nil)

MashMeter = 0
MeltDistance = 30

ClientControl = (Tool:FindFirstChild(&quot;ClientControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ClientControl.Name = &quot;ClientControl&quot;
ClientControl.Parent = Tool

ServerControl = (Tool:FindFirstChild(&quot;ServerControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ServerControl.Name = &quot;ServerControl&quot;
ServerControl.Parent = Tool

ServerControl.OnServerInvoke = (function(player, Mode, Value)
&#9;if Mode == &quot;KeyPress&quot; and Value then
&#9;&#9;local Key = string.lower(Value.Key)
&#9;&#9;local ByteKey = string.byte(Key)
&#9;&#9;local Down = Value.Down
&#9;&#9;if Key == &quot;0&quot; or ByteKey == 48 then
&#9;&#9;&#9;ShiftDown = Down
&#9;&#9;else
&#9;&#9;&#9;if Value.Down then
&#9;&#9;&#9;&#9;if IsPlayingMusic then
&#9;&#9;&#9;&#9;&#9;for i, v in pairs(NoteData.Chords) do
&#9;&#9;&#9;&#9;&#9;&#9;if v.Key == Key then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Duration = 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Chord = v
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local SoundId = ((not ShiftDown and v.Sound.Normal) or v.Sound.Sharp)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Pitch = CurrentPitch.Pitch
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Module.PlaySound(Handle, {Sound = Sounds.ChordSound, SoundId = SoundId}, ((Chord.Pitch and Chord.Pitch) or (CurrentPitch and CurrentPitch.Pitch) or nil), ChordDuration)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;InvokeClient(&quot;PlayAnimation&quot;, Animations.Pluck)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;MashMeter = (MashMeter + 1)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;for i, v in pairs(NoteData.Pitches) do
&#9;&#9;&#9;&#9;&#9;if v.Key == Key then
&#9;&#9;&#9;&#9;&#9;&#9;CurrentPitch = v
&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)

Tool.Grip = Grips.Hold
Tool.Enabled = true

function InvokeClient(Mode, Value)
&#9;local ClientReturn = nil
&#9;pcall(function()
&#9;&#9;ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
&#9;end)
&#9;return ClientReturn
end

function Activated()
&#9;if not Tool.Enabled or not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;Tool.Enabled = false
&#9;IsPlayingMusic = not IsPlayingMusic
&#9;if IsPlayingMusic then
&#9;&#9;Tool.Grip = Grips.Play
&#9;&#9;InvokeClient(&quot;PlayAnimation&quot;, Animations.Hold)
&#9;else
&#9;&#9;Tool.Grip = Grips.Hold
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, v)
&#9;&#9;end
&#9;end
&#9;Tool.Enabled = true
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped(Mouse)
&#9;Equipped = true
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;ControlGui = Module.DisplayControls(Player, &quot;Keys H, J, K, and L change pitch Keys Z, X, C, V, B, N, M play notes Click to equip&quot;, Color3.new(49, 197, 23))
end

function Unequipped()
&#9;Equipped = false
&#9;ShiftDown = false
&#9;IsPlayingMusic = false
&#9;if ControlGui and ControlGui.Parent then
&#9;&#9;ControlGui:Destroy()
&#9;end
&#9;for i, v in pairs(Animations) do
&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, v)
&#9;end
&#9;Tool.Grip = Grips.Hold
end

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)

--[[function MeltFace(player)
&#9;if not player then
&#9;&#9;return
&#9;end
&#9;local character = player.Character
&#9;if not character then
&#9;&#9;return
&#9;end
&#9;local humanoid = character:FindFirstChild(&quot;Humanoid&quot;)
&#9;local head = character:FindFirstChild(&quot;Head&quot;)
&#9;if not humanoid or humanoid.Health == 0 or not head then
&#9;&#9;return
&#9;end
&#9;humanoid.WalkSpeed = 0
&#9;head.Anchored = true
&#9;local FakeHead = head:Clone()
&#9;FakeHead.Name = &quot;FakeHead&quot;
&#9;FakeHead.Transparency = 1
&#9;FakeHead.Anchored = false
&#9;FakeHead.CanCollide = false
&#9;
&#9;for i, v in pairs(FakeHead:GetChildren()) do
&#9;&#9;if not (v:IsA(&quot;Decal&quot;) or v:IsA(&quot;DataModelMesh&quot;)) then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs(head:GetChildren()) do
&#9;&#9;if v:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;local BV = Instance.new(&apos;BodyVelocity&apos;)
&#9;FakeHead.CFrame = head.CFrame + head.CFrame.lookVector * 0.25
&#9;BV.velocity = Vector3.new(0, -1, 0)
&#9;BV.maxForce = Vector3.new(50000, 50000, 50000)
&#9;BV.Parent = FakeHead
&#9;Debris:AddItem(FakeHead, 5)
&#9;FakeHead.Parent = game:GetService(&quot;Workspace&quot;)
&#9;
&#9;local ApplauseSound = Sounds.Applause:Clone()
&#9;ApplauseSound.Parent = head
&#9;ApplauseSound:Play()
&#9;Debris:AddItem(ApplauseSound, 5)

&#9;wait(3)

&#9;if humanoid and humanoid.Parent and head and head.Parent then&#9;
&#9;&#9;humanoid.WalkSpeed = 16
&#9;&#9;head.Anchored = false
&#9;end
&#9;
end

function MeltNearFaces()
&#9;for i, v in pairs(Players:GetChildren()) do
&#9;&#9;if v:IsA(&quot;Player&quot;) and v ~= Player then
&#9;&#9;&#9;local character = v.Character
&#9;&#9;&#9;if not character then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;local humanoid = character:FindFirstChild(&quot;Humanoid&quot;)
&#9;&#9;&#9;local head = character:FindFirstChild(&quot;Head&quot;)
&#9;&#9;&#9;if not humanoid or humanoid.Health == 0 or not head or (Handle.Position - head.Position).magnitude &gt; MeltDistance then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;MeltFace(v)
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end
end

while true do
&#9;if MashMeter &gt; 0 then
&#9;&#9;MashMeter = (MashMeter - 0.1)
&#9;end
&#9;if MashMeter &gt; 9 then
&#9;&#9;MeltNearFaces()
&#9;&#9;wait(5)
&#9;&#9;MashMeter = 0
&#9;end
&#9;wait(1 / 30)
end]]</ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX3B3084035C504D7CA254B5A0DEF3B287">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
ContentProvider = game:GetService(&quot;ContentProvider&quot;)

Camera = game:GetService(&quot;Workspace&quot;).CurrentCamera

Animations = {}

ServerControl = Tool:WaitForChild(&quot;ServerControl&quot;)
ClientControl = Tool:WaitForChild(&quot;ClientControl&quot;)

ClientControl.OnClientInvoke = (function(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; and Humanoid then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local AnimationTrack = Humanoid:LoadAnimation(Value.Animation)
&#9;&#9;table.insert(Animations, {Animation = Value.Animation, AnimationTrack = AnimationTrack})
&#9;&#9;AnimationTrack:Play(Value.FadeTime, Value.Weight, Value.Speed)
&#9;elseif Mode == &quot;StopAnimation&quot; and Value then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif Mode == &quot;Preload&quot; and Value then
&#9;&#9;ContentProvider:Preload(Value)
&#9;elseif Mode == &quot;PlaySound&quot; and Value then
&#9;&#9;Value:Play()
&#9;elseif Mode == &quot;StopSound&quot; and Value then
&#9;&#9;Value:Stop()
&#9;elseif Mode == &quot;MousePosition&quot; then
&#9;&#9;return PlayerMouse.Hit.p
&#9;elseif Mode == &quot;DisableJump&quot; then
&#9;&#9;DisableJump(Value)
&#9;elseif Mode == &quot;SetCamera&quot; and Value then
&#9;&#9;if Value.Subject and Value.Type then
&#9;&#9;&#9;Camera.CameraSubject = Value.Subject
&#9;&#9;&#9;Camera.CameraType = Value.Type
&#9;&#9;end
&#9;end
end)

function InvokeServer(Mode, Value)
&#9;local ServerReturn = nil
&#9;pcall(function()
&#9;&#9;ServerReturn = ServerControl:InvokeServer(Mode, Value)
&#9;end)
&#9;return ServerReturn
end

function DisableJump(Boolean)
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;if Boolean then
&#9;&#9;PreventJump = Humanoid.Changed:connect(function(Property)
&#9;&#9;&#9;if Property ==  &quot;Jump&quot; then
&#9;&#9;&#9;&#9;Humanoid.Jump = false
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped(Mouse)
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;PlayerMouse = Player:GetMouse()
&#9;Mouse.Button1Down:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = true})
&#9;end)
&#9;Mouse.Button1Up:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = false})
&#9;end)
&#9;Mouse.KeyDown:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = true})
&#9;end)
&#9;Mouse.KeyUp:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = false})
&#9;end)
end

function Unequipped()
&#9;for i, v in pairs(Animations) do
&#9;&#9;if v and v.AnimationTrack then
&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;end
&#9;end
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;Animations = {}
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBXA5B2ACC86F924951957FB7AD68791ABE">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-8.41885281</X>
					<Y>14.8726406</Y>
					<Z>-0.0713238865</Z>
					<R00>-0.090607807</R00>
					<R01>-0.0295781083</R01>
					<R02>-0.995447338</R02>
					<R10>-0</R10>
					<R11>0.999558806</R11>
					<R12>-0.0297002774</R12>
					<R20>0.995886624</R20>
					<R21>-0.00269107707</R21>
					<R22>-0.0905678421</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-6.42795801</X>
					<Y>14.9320412</Y>
					<Z>0.109811813</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>