<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>1</X>
				<Y>-1.20000005</Y>
				<Z>-1.5</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">XRayBlaster</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=113341435</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="LocalScript" referent="RBX1">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">XRay_Main</string>
				<ProtectedString name="Source">--local mDebugId = game.Workspace.DebugId.Value
--game.Workspace.DebugId.Value = game.Workspace.DebugId.Value+1
--print(&quot;Running swordscript &lt;&quot;..mDebugId..&quot;&gt;&quot;)

-------------------------------------
-- Makes an RBX::Lua Instance using
-- a table of key-value pairs to
-- initialize it. Values with numeric 
-- keys will be parented to the object
-- and other values will be set
-- as members of the object.

-- Scripting hashing annoyance

local Corrutpion = {} 

-- GG NO RE 
function Create(ty)
&#9;return function(data)
&#9;&#9;local obj = Instance.new(ty)
&#9;&#9;for k, v in pairs(data) do
&#9;&#9;&#9;if type(k) == &apos;number&apos; then
&#9;&#9;&#9;&#9;v.Parent = obj
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;obj[k] = v
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return obj
&#9;end
end

---------------------------------------
-- Same as Make, but modifies an existing
-- object rather than creating ones.
function Modify(obj, data)
&#9;for k, v in pairs(data) do
&#9;&#9;if type(data) == &apos;number&apos; then
&#9;&#9;&#9;data.Parent = obj
&#9;&#9;else
&#9;&#9;&#9;data[k] = v
&#9;&#9;end
&#9;end
&#9;return obj
end

-----------------------------------------
-- Creates a class which can be instantiated
-- using `CreateCLASSNAME( ... )`.
---usage:
--class&apos;MyClass&apos;(function(this, arg1)
--&#9;this.ClassMember = value
--&#9;function this.ClassMethod(...) ... end
--end, function(def)
--&#9;def.StaticMember = value
--&#9; function def.StaticMethod(...) ... end
--end)
--local obj = CreateMyClass(arg1)
------------------------------------------
local function class(name)
&#9;local def = {}
&#9;getfenv(0)[name] = def
&#9;return function(ctor, static)
&#9;&#9;local nctor = function(...)
&#9;&#9;&#9;local this = {}
&#9;&#9;&#9;if ctor then
&#9;&#9;&#9;&#9;ctor(this, ...)
&#9;&#9;&#9;end
&#9;&#9;&#9;return this
&#9;&#9;end
&#9;&#9;getfenv(0)[&apos;Create&apos;..name] = nctor
&#9;&#9;if static then static(def) end
&#9;end
end


---------------------------------------------
-- Signal class for custom-made events
--API:
-- Signal:connect(callback)
-- Signal:fire(...)
-- Signal:wait()
---------------------------------------------
class&apos;Signal&apos;(function(this)
&#9;local mListeners = {}
&#9;local mWaitObject = Create&apos;BoolValue&apos;{}

&#9;function this:connect(func)
&#9;&#9;local connection = {}
&#9;&#9;function connection:disconnect()
&#9;&#9;&#9;mListeners[func] = nil
&#9;&#9;end
&#9;&#9;mListeners[func] = connection
&#9;&#9;return connection
&#9;end

&#9;function this:fire(...)
&#9;&#9;--print(&quot;Fire evt&lt;&quot;..tostring(this)..&quot;&gt; from script&lt;&quot;..mDebugId..&quot;&gt;&quot;)
&#9;&#9;for func, conn in pairs(mListeners) do
&#9;&#9;&#9;--print(&quot;-&gt; &quot;..tostring(func)..&quot;( ... )&quot;)
&#9;&#9;&#9;func(...)
&#9;&#9;end
&#9;&#9;mWaitObject.Value = not mWaitObject.Value
&#9;end

&#9;function this:wait()
&#9;&#9;mWaitObject.Changed:wait()
&#9;end
end)


--------------------------------------------------
-- Bin class for cleaning up assets
--API: 
-- Bin:add(func: Function, ident: String)
-- Bin:clean(ident: String)
-- Bin:cleanAll()
--------------------------------------------------
class&apos;Bin&apos;(function(this)
&#9;local mGarbage = {}

&#9;function this:add(func, ident)
&#9;&#9;ident = ident or &apos;__unnamed&apos;
&#9;&#9;if not mGarbage[ident] then
&#9;&#9;&#9;mGarbage[ident] = {}
&#9;&#9;end
&#9;&#9;mGarbage[ident][#mGarbage[ident]+1] = func
&#9;end

&#9;function this:clean(ident)
&#9;&#9;local listToCall = mGarbage[ident]
&#9;&#9;if listToCall then
&#9;&#9;&#9;for _, func in pairs(listToCall) do
&#9;&#9;&#9;&#9;func()
&#9;&#9;&#9;end
&#9;&#9;&#9;mGarbage[ident] = nil
&#9;&#9;end
&#9;end

&#9;function this:cleanAll()
&#9;&#9;for ident, list in pairs(mGarbage) do
&#9;&#9;&#9;for _, func in pairs(list) do
&#9;&#9;&#9;&#9;func()
&#9;&#9;&#9;end
&#9;&#9;&#9;mGarbage[ident] = nil
&#9;&#9;end
&#9;end
end)


-----------------------------------------------------
-- AnimationProvider class for easy loading of
-- animation assets into animationtracks once 
-- a humanoid is available.
--API:
-- AnimationProvider:registerAnimation(ident, assetid)
-- AnimationProvider:setHumanoid(humanoid)
-- AnimationProvider:setTool(tool)
-- AnimationProvider:getAnimation(ident)
-----------------------------------------------------
class&apos;AnimationProvider&apos;(function(this)
&#9;local mAnimations = {--[[ident =&gt; {AnimationId, CurrentTrack, CurrentAnim} ]]}
&#9;local mCurrentHumanoid = nil

&#9;function this:registerAnimation(ident, assetid)
&#9;&#9;--check for an existing copy of the anim
&#9;&#9;local existingAnim = Tool.Tool:FindFirstChild(&apos;ANIM_&apos;..ident)
&#9;&#9;&#9;
&#9;&#9;--make the data for this anim
&#9;&#9;local animdat = {
&#9;&#9;&#9;AnimationId = assetid, 
&#9;&#9;&#9;CurrentAnim = existingAnim or Create&apos;Animation&apos;{
&#9;&#9;&#9;&#9;Name = &quot;ANIM_&quot;..ident,
&#9;&#9;&#9;&#9;AnimationId = assetid,&#9;
&#9;&#9;&#9;},
&#9;&#9;}
&#9;&#9;mAnimations[ident] = animdat

&#9;&#9;--if there&apos;s a current tool, put it in there
&#9;&#9;if Tool.Tool then
&#9;&#9;&#9;Tool.HUGE_EQUIP_HACK = true
&#9;&#9;&#9;animdat.CurrentAnim.Parent = Tool.Tool
&#9;&#9;&#9;Tool.HUGE_EQUIP_HACK = false
&#9;&#9;end
&#9;&#9;
&#9;&#9;--if there&apos;s a humanoid load the animation track
&#9;&#9;if mCurrentHumanoid then
&#9;&#9;&#9;animdat.CurrentTrack = mCurrentHumanoid:LoadAnimation(animdat.CurrentAnim)
&#9;&#9;end
&#9;end

&#9;function this:setHumanoid(humanoid)
&#9;&#9;mCurrentHumanoid = humanoid
&#9;&#9;for _, anim in pairs(mAnimations) do
&#9;&#9;&#9;anim.CurrentTrack = humanoid:LoadAnimation(anim.CurrentAnim)
&#9;&#9;end
&#9;end

&#9;function this:getAnimation(ident)
&#9;&#9;local dat = mAnimations[ident]
&#9;&#9;if not dat then error(&quot;Gear Fatal Error: Animation `&quot;..ident..&quot;` not found&quot;) end
&#9;&#9;if not dat.CurrentTrack then 
&#9;&#9;&#9;error(&quot;Gear Fatal Error: No Humanoid for animation `&quot;..ident..&quot;` to run in&quot;) 
&#9;&#9;end
&#9;&#9;return dat.CurrentTrack
&#9;end
end)


----------------------------------------------
-- SoundProvider class
-- functions similarily to the animationprovider
----------------------------------------------
class&apos;SoundProvider&apos;(function(this)
&#9;local mSounds = {}

&#9;function this:registerSound(ident, assetid, inpart)
&#9;&#9;inpart = inpart or Tool.Tool:FindFirstChild(&apos;Handle&apos;)
&#9;&#9;if not inpart then
&#9;&#9;&#9;repeat
&#9;&#9;&#9;&#9;inpart = Tool.Tool.ChildAdded:wait()
&#9;&#9;&#9;until inpart.Name == &apos;Handle&apos;
&#9;&#9;end
&#9;&#9;local existingSound = inpart:FindFirstChild(&apos;SOUND_&apos;..ident)
&#9;&#9;local sounddat = {
&#9;&#9;&#9;SoundId = assetid,
&#9;&#9;&#9;CurrentSound = existingSound or Create&apos;Sound&apos;{
&#9;&#9;&#9;&#9;Name = &apos;SOUND_&apos;..ident,
&#9;&#9;&#9;&#9;SoundId = assetid,
&#9;&#9;&#9;&#9;Parent = inpart,
&#9;&#9;&#9;},
&#9;&#9;}
&#9;&#9;mSounds[ident] = sounddat
&#9;end

&#9;function this:getSound(ident)
&#9;&#9;local dat = mSounds[ident]
&#9;&#9;if dat then
&#9;&#9;&#9;return dat.CurrentSound
&#9;&#9;end
&#9;end
end)


----------------------------------------------
-- DebounceProvider class -- Prevent events
-- from happening in too rapid succession
----------------------------------------------
class&apos;DebounceProvider&apos;(function(this)
&#9;local mFlagNameToLastTime = {}

&#9;function this:test(ident, delta)
&#9;&#9;local t = tick()
&#9;&#9;local lastTime = mFlagNameToLastTime[ident] or 0
&#9;&#9;if delta then
&#9;&#9;&#9;return (t-lastTime) &gt; delta
&#9;&#9;else
&#9;&#9;&#9;return mFlagNameToLastTime[ident]
&#9;&#9;end
&#9;end
&#9;function this:set(ident, state)
&#9;&#9;if state then
&#9;&#9;&#9;mFlagNameToLastTime[ident] = state
&#9;&#9;elseif state == false then
&#9;&#9;&#9;mFlagNameToLastTime[ident] = false
&#9;&#9;else
&#9;&#9;&#9;mFlagNameToLastTime[ident] = tick()
&#9;&#9;end
&#9;end
end)


function TagHumanoid(humanoid)
&#9;if Tool.Player then
&#9;&#9;local tag = Create&apos;ObjectValue&apos;{
&#9;&#9;&#9;Name = &quot;creator&quot;, 
&#9;&#9;&#9;Value = Tool.Player,
&#9;&#9;&#9;Parent = humanoid,
&#9;&#9;}
&#9;&#9;game.Debris:AddItem(tag, 1)
&#9;end
end


------- wait for any event in a set of events  to fire ------
function WaitForAny(tb)
&#9;local evt = tb
&#9;local conn = {}
&#9;local eventargs = nil
&#9;local waitProxy = Create&apos;BoolValue&apos;{}
&#9;for _, e in pairs(evt) do
&#9;&#9;local c = e:connect(function(...)
&#9;&#9;&#9;for _, c in pairs(conn) do
&#9;&#9;&#9;&#9;c:disconnect()
&#9;&#9;&#9;end
&#9;&#9;&#9;eventargs = {...}
&#9;&#9;&#9;waitProxy.Value = not waitProxy.Value
&#9;&#9;end)
&#9;&#9;conn[#conn+1] = c
&#9;end
&#9;--
&#9;waitProxy.Changed:wait()
&#9;--
&#9;return unpack(eventargs)
end


----------------------------------------------
-- Tool singleton class
--API:
-- ...
class&apos;Tool&apos;(nil, function(this)
&#9;--need this here for the animationprovider to use
&#9;this.HUGE_EQUIP_HACK = false

&#9;this.Bin = CreateBin()
&#9;this.AnimationProvider = CreateAnimationProvider()
&#9;this.DebounceProvider = CreateDebounceProvider()
&#9;this.SoundProvider = CreateSoundProvider()

&#9;--general values
&#9;this.Tool = script.Parent
&#9;this.Player = nil
&#9;this.Humanoid = nil
&#9;this.Character = nil

&#9;--============ several flags for the gear
&#9;--nothing

&#9;--some events
&#9;this.Equipped = CreateSignal()
&#9;this.Unequipped = CreateSignal()
&#9;this.OwnerChange = CreateSignal()

&#9;--mouse utility events
&#9;this.MouseClick = CreateSignal()
&#9;this.MouseRelease = CreateSignal()
&#9;this.MouseDoubleClick = CreateSignal()
&#9;this.DoubleClickThreshold = 0.2
&#9;this.MouseDown = false
&#9;this.KeyDown = CreateSignal()

&#9;local mLastClickTime = 0

&#9;script.Parent.Equipped:connect(function(mouse)
&#9;&#9;--print(&quot;Internal Equipped: Time b: &quot;..time())
&#9;&#9;--set up general values in the tool
&#9;&#9;this.Mouse = mouse
&#9;&#9;local curOwner = game.Players:GetPlayerFromCharacter(script.Parent.Parent)
&#9;&#9;if curOwner ~= this.Player then
&#9;&#9;&#9;this.Player = curOwner
&#9;&#9;&#9;this.OwnerChange:fire(this.Player)
&#9;&#9;end
&#9;&#9;this.Character = this.Player.Character
&#9;&#9;this.Humanoid = this.Character.Humanoid
&#9;&#9;this.AnimationProvider:setHumanoid(this.Humanoid)

&#9;&#9;--set up the mouse events
&#9;&#9;mouse.Button1Down:connect(function()
&#9;&#9;&#9;this.MouseDown = true
&#9;&#9;&#9;local t = tick()
&#9;&#9;&#9;if (t-mLastClickTime) &lt; this.DoubleClickThreshold then
&#9;&#9;&#9;&#9;--prvent multiple double-clicks in a row
&#9;&#9;&#9;&#9;mLastClickTime = 0
&#9;&#9;&#9;&#9;this.MouseDoubleClick:fire(mouse)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;mLastClickTime = t
&#9;&#9;&#9;&#9;this.MouseClick:fire(mouse)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;mouse.Button1Up:connect(function()
&#9;&#9;&#9;this.MouseDown = false
&#9;&#9;&#9;this.MouseRelease:fire()
&#9;&#9;end)
&#9;&#9;mouse.KeyDown:connect(function(key)
&#9;&#9;&#9;this.KeyDown:fire(key)
&#9;&#9;end)

&#9;&#9;--done setup, call the equipped function
&#9;&#9;if this.HUGE_EQUIP_HACK then
&#9;&#9;&#9;--the HUGE_EQUIP_HACK flags tells the tool that the equip is a synchronous
&#9;&#9;&#9;--call as a result of parenting an animation to the character, which happens 
&#9;&#9;&#9;--when the tool is picked up from the workspace, but not during normal equips 
&#9;&#9;&#9;--(Why does this happen???), if this is the case, the call should be rederrred 
&#9;&#9;&#9;--one tick to ensure that all of the gear&apos;s loading can complete before it&apos;s 
&#9;&#9;&#9;--equipped event is called.
&#9;&#9;&#9;--TODO: Blame John for this.
&#9;&#9;&#9;Delay(0, function()
&#9;&#9;&#9;&#9;this.Equipped:fire(mouse)
&#9;&#9;&#9;end)
&#9;&#9;else
&#9;&#9;&#9;--otherwise, proceed as normal
&#9;&#9;&#9;this.Equipped:fire(mouse)
&#9;&#9;end
&#9;end)

&#9;script.Parent.Unequipped:connect(function()
&#9;&#9;--before my teardown, fire the event
&#9;&#9;this.Unequipped:fire()

&#9;&#9;--delete all my garbage
&#9;&#9;this.Bin:cleanAll()
&#9;end)
end)
























local BeamColor = BrickColor.new(&apos;Alder&apos;)
local PartModel = Create&apos;Model&apos;{
&#9;Name = &apos;SpotWeld_Parts&apos;,
}
local Failsafe = nil

Tool.AnimationProvider:registerAnimation(&apos;equip&apos;, &apos;http://www.roblox.com/asset/?id=69427262&apos;)
Tool.AnimationProvider:registerAnimation(&apos;fire&apos;, &apos;http://www.roblox.com/asset/?id=69427271&apos;)
Tool.AnimationProvider:registerAnimation(&apos;hold&apos;, &apos;http://www.roblox.com/asset/?id=69427277&apos;)

class&apos;RaycastIgnore&apos;(nil, function(def)
&#9;local mIgnoreMap = setmetatable({}, {__mode=&apos;k&apos;})
&#9;function def:addIgnore(obj)
&#9;&#9;mIgnoreMap[obj] = true
&#9;end
&#9;function def:genIgnoreList()
&#9;&#9;local ignoreList = {}
&#9;&#9;for p, _ in pairs(mIgnoreMap) do
&#9;&#9;&#9;ignoreList[#ignoreList+1] = p
&#9;&#9;end
&#9;&#9;for _, ch in pairs(Tool.Character:GetChildren()) do
&#9;&#9;&#9;if ch:IsA(&apos;BasePart&apos;) then
&#9;&#9;&#9;&#9;ignoreList[#ignoreList+1] = ch
&#9;&#9;&#9;end
&#9;&#9;&#9;for _, handle in pairs(ch:GetChildren()) do
&#9;&#9;&#9;&#9;if handle:IsA(&apos;BasePart&apos;) then
&#9;&#9;&#9;&#9;&#9;ignoreList[#ignoreList+1] = ch
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return ignoreList
&#9;end
end)

class&apos;SpotWeld_Charge&apos;(function(this)
&#9;this.Completed = CreateSignal()
&#9;--
&#9;local mReady = false
&#9;local mSpokeList = {} --[i] = {Direction, Part, Len, Dist}
&#9;local mChargeSphere = nil
&#9;local mFracComplete = 0
&#9;--
&#9;local mLocation;
&#9;--
&#9;local mCurrentRun = 0
&#9;--
&#9;local function genSpokes()
&#9;&#9;if mReady then return end
&#9;&#9;mReady = true

&#9;&#9;--make charge sphere
&#9;&#9;mChargeSphere = Create&apos;Part&apos;{
&#9;&#9;&#9;Name = &apos;SpotWeld_ChrageSphere&apos;,
&#9;&#9;&#9;FormFactor = &apos;Custom&apos;,
&#9;&#9;&#9;Anchored = true,
&#9;&#9;&#9;CanCollide = false,
&#9;&#9;&#9;Transparency = 0.3,
&#9;&#9;&#9;BrickColor = BeamColor,
&#9;&#9;&#9;Create&apos;SpecialMesh&apos;{MeshType=&apos;Sphere&apos;,},
&#9;&#9;}
&#9;&#9;RaycastIgnore:addIgnore(mChargeSphere)

&#9;&#9;--make new spokes
&#9;&#9;for i = 1, 20 do
&#9;&#9;&#9;local spoke = {}
&#9;&#9;&#9;spoke.Part = Create&apos;Part&apos;{
&#9;&#9;&#9;&#9;Name = &apos;SpotWeld_Spoke&apos;,
&#9;&#9;&#9;&#9;FormFactor = &apos;Custom&apos;,
&#9;&#9;&#9;&#9;Anchored = true,
&#9;&#9;&#9;&#9;CanCollide = false,
&#9;&#9;&#9;&#9;Transparency = 0.3,
&#9;&#9;&#9;&#9;BrickColor = BeamColor,
&#9;&#9;&#9;}
&#9;&#9;&#9;RaycastIgnore:addIgnore(spoke.Part)
&#9;&#9;&#9;mSpokeList[i] = spoke
&#9;&#9;end
&#9;end
&#9;local function randomizeSpokes()
&#9;&#9;for _, spoke in pairs(mSpokeList) do
&#9;&#9;&#9;spoke.Direction = CFrame.new(mLocation)*CFrame.Angles(math.random(-3.14, 3.14), 
&#9;&#9;&#9;                                                      math.random(-3.14, 3.14),
&#9;&#9;&#9;                                                      math.random(-3.14, 3.14))
&#9;&#9;&#9;spoke.Len = math.random()*2+1
&#9;&#9;&#9;spoke.Dist = math.random()*3+1
&#9;&#9;&#9;spoke.Part.Size = Vector3.new(0.1, 0.1, spoke.Len)
&#9;&#9;end
&#9;end
&#9;local function showSpokes(state)
&#9;&#9;if mReady then
&#9;&#9;&#9;local par = ((state) and PartModel or nil)
&#9;&#9;&#9;mChargeSphere.Parent = par
&#9;&#9;&#9;for _, spoke in pairs(mSpokeList) do
&#9;&#9;&#9;&#9;spoke.Part.Parent = par
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;local function setSpokes()
&#9;&#9;local sphereSz = mFracComplete
&#9;&#9;mChargeSphere.Size = Vector3.new(sphereSz, sphereSz, sphereSz)
&#9;&#9;mChargeSphere.CFrame = CFrame.new(mLocation)
&#9;&#9;--
&#9;&#9;for _, spoke in pairs(mSpokeList) do
&#9;&#9;&#9;local endDistOut = (1-mFracComplete)*spoke.Dist
&#9;&#9;&#9;local innerDistOut = endDistOut-spoke.Len-sphereSz
&#9;&#9;&#9;local gotLen;
&#9;&#9;&#9;if innerDistOut &lt; 0 then
&#9;&#9;&#9;&#9;gotLen = spoke.Len+innerDistOut
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;gotLen = spoke.Len
&#9;&#9;&#9;end
&#9;&#9;&#9;spoke.Part.Size = Vector3.new(0.1, 0.1, spoke.Len+innerDistOut)
&#9;&#9;&#9;spoke.Part.CFrame = spoke.Direction*CFrame.new(0, 0, -(endDistOut-gotLen/2))
&#9;&#9;end
&#9;end
&#9;--
&#9;function this:run(location)
&#9;&#9;mLocation = location
&#9;&#9;mCurrentRun = mCurrentRun+1
&#9;&#9;local thisRun = mCurrentRun
&#9;&#9;mFracComplete = 0
&#9;&#9;--
&#9;&#9;genSpokes()
&#9;&#9;randomizeSpokes()
&#9;&#9;showSpokes(true)
&#9;&#9;--
&#9;&#9;Spawn(function()
&#9;&#9;&#9;local lastTime = tick()
&#9;&#9;&#9;while mCurrentRun == thisRun and mFracComplete &lt; 1 do
&#9;&#9;&#9;&#9;local now = tick()
&#9;&#9;&#9;&#9;local dt = now-lastTime
&#9;&#9;&#9;&#9;lastTime = now
&#9;&#9;&#9;&#9;--
&#9;&#9;&#9;&#9;mFracComplete = math.min(1, mFracComplete+dt*2)
&#9;&#9;&#9;&#9;setSpokes()
&#9;&#9;&#9;&#9;--
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;end
&#9;&#9;&#9;if mCurrentRun == thisRun then
&#9;&#9;&#9;&#9;showSpokes(false)
&#9;&#9;&#9;&#9;this.Completed:fire()
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
&#9;function this:stop()
&#9;&#9;showSpokes(false)
&#9;&#9;mCurrentRun = mCurrentRun+1
&#9;end
&#9;--
&#9;function this:destroy()
&#9;&#9;mReady = false
&#9;&#9;mChargeSphere:Destroy()
&#9;&#9;for i, spoke in pairs(mSpokeList) do
&#9;&#9;&#9;mSpokeList[i] = nil
&#9;&#9;&#9;spoke.Part:Destroy()
&#9;&#9;end
&#9;end
end)


--[[
locations:
    E
    |
    |
    D
   /|\
  / | \
  A B C 
  locationGetFunc =&gt; A, B, C, D, E
]]
local function frand(a, b)
&#9;return a+math.random()*(b-a)
end
class&apos;WavyBeam&apos;(function(this, numSegs)
&#9;local mSegList = {}
&#9;for i = 1, numSegs do
&#9;&#9;mSegList[i] = Create&apos;Part&apos;{
&#9;&#9;&#9;Name = &apos;SpotWeld_BeamBit&apos;,
&#9;&#9;&#9;Anchored = true,
&#9;&#9;&#9;CanCollide = false,
&#9;&#9;&#9;FormFactor = &apos;Custom&apos;,&#9;
&#9;&#9;&#9;BrickColor = BeamColor,
&#9;&#9;&#9;Transparency = 0.3,
&#9;&#9;}
&#9;&#9;RaycastIgnore:addIgnore(mSegList[i])
&#9;end
&#9;function this:show(from, to)
&#9;&#9;local totalLen = (from-to).magnitude
&#9;&#9;local wave = math.min(totalLen/5, 1)/2
&#9;&#9;local dirCF = CFrame.new(from, to)
&#9;&#9;local lastPos = dirCF.p --(dirCF*CFrame.new(frand(-wave, wave), frand(-wave, wave), 0)).p
&#9;&#9;for i = 1, numSegs do
&#9;&#9;&#9;local p = mSegList[i]
&#9;&#9;&#9;p.Parent = PartModel
&#9;&#9;&#9;local distToThisEnd = i*(totalLen/numSegs)
&#9;&#9;&#9;local newPos;
&#9;&#9;&#9;if i == numSegs then
&#9;&#9;&#9;&#9;newPos = (dirCF*CFrame.new(0,0,-distToThisEnd)).p
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;newPos = (dirCF*CFrame.new(frand(-wave, wave), 
&#9;&#9;&#9;&#9;                           frand(-wave, wave), 
&#9;&#9;&#9;&#9;                           -distToThisEnd)).p
&#9;&#9;&#9;end
&#9;&#9;&#9;p.Size = Vector3.new(0.1, 0.1, totalLen/numSegs)
&#9;&#9;&#9;p.CFrame = CFrame.new(lastPos, newPos)*CFrame.new(0, 0, -(lastPos-newPos).magnitude/2)
&#9;&#9;&#9;lastPos = newPos
&#9;&#9;end
&#9;end
&#9;function this:hide()
&#9;&#9;for i = 1, numSegs do
&#9;&#9;&#9;mSegList[i].Parent = nil
&#9;&#9;end
&#9;end
end)
class&apos;SpotWeld_Beam&apos;(function(this)
&#9;local mJunctionPart = Create&apos;Part&apos;{
&#9;&#9;Name = &apos;SpotWeld_Junction&apos;,
&#9;&#9;Anchored = true,
&#9;&#9;CanCollide = false,
&#9;&#9;FormFactor = &apos;Custom&apos;,
&#9;&#9;Create&apos;SpecialMesh&apos;{MeshType=&apos;Sphere&apos;,},
&#9;&#9;Transparency = 0.3,
&#9;&#9;BrickColor = BeamColor,
&#9;}
&#9;RaycastIgnore:addIgnore(mJunctionPart)
&#9;local mJunctionSpinnerPart = Create&apos;Part&apos;{
&#9;&#9;Name = &apos;SpotWeld_JunctionSpinner&apos;,
&#9;&#9;Anchored = true,
&#9;&#9;CanCollide = false,
&#9;&#9;FormFactor = &apos;Custom&apos;,
&#9;&#9;Create&apos;SpecialMesh&apos;{MeshType=&apos;Sphere&apos;,},
&#9;&#9;Transparency = 0.3,
&#9;&#9;BrickColor = BeamColor,
&#9;}
&#9;RaycastIgnore:addIgnore(mJunctionSpinnerPart)
&#9;local mMainBeam = Create&apos;Part&apos;{
&#9;&#9;Name = &apos;SpotWeld_MainBeam&apos;,
&#9;&#9;Anchored = true,
&#9;&#9;CanCollide = false,
&#9;&#9;FormFactor = &apos;Custom&apos;,
&#9;&#9;Transparency = 0.3,
&#9;&#9;BrickColor = BeamColor,
&#9;}
&#9;RaycastIgnore:addIgnore(mMainBeam)
&#9;local mParticleEmitter = Create&apos;Part&apos;{
&#9;&#9;Name = &apos;SpotWeld_ParticleEmitter&apos;,
&#9;&#9;Anchored = true,
&#9;&#9;CanCollide = false,
&#9;&#9;Transparency = 1,
&#9;&#9;Create&apos;Fire&apos;{
&#9;&#9;&#9;Color = Color3.new(255, 204, 153),
&#9;&#9;&#9;SecondaryColor = Color3.new(51, 204, 255),
&#9;&#9;&#9;Heat = 25,
&#9;&#9;&#9;Size = 2,
&#9;&#9;},
&#9;&#9;Create&apos;Sound&apos;{
&#9;&#9;&#9;Name = &apos;HoldSound1&apos;,
&#9;&#9;&#9;Looped = true,
&#9;&#9;&#9;SoundId = &apos;http://www.roblox.com/asset/?id=69446845&apos;,
&#9;&#9;},
&#9;&#9;Create&apos;Sound&apos;{
&#9;&#9;&#9;Name = &apos;HoldSound2&apos;,
&#9;&#9;&#9;Looped = true,
&#9;&#9;&#9;SoundId = &apos;http://www.roblox.com/asset/?id=69446845&apos;,
&#9;&#9;},
&#9;}
&#9;RaycastIgnore:addIgnore(mParticleEmitter)
&#9;local mBeam_AD = CreateWavyBeam(3)
&#9;local mBeam_BD = CreateWavyBeam(3)
&#9;local mBeam_CD = CreateWavyBeam(3)
&#9;--
&#9;local mIsShown = false
&#9;function this:show(a, b, c, d, e, showBeam)
&#9;&#9;if not a then
&#9;&#9;&#9;this:hide()
&#9;&#9;&#9;return
&#9;&#9;end
&#9;&#9;--
&#9;&#9;local t = tick()
&#9;&#9;d = d + Vector3.new(0.5*math.sin(1.1*t)+0.5*math.cos(1.9*t+1), 
&#9;&#9;                    math.cos(t), 
&#9;&#9;                    0.5*math.sin(1.5*t)+0.5*math.cos(1.6*t+2))
&#9;&#9;--
&#9;&#9;mBeam_AD:show(a, d)
&#9;&#9;mBeam_CD:show(c, d)
&#9;&#9;mBeam_BD:show(b, d)
&#9;&#9;--
&#9;&#9;mJunctionPart.Parent = PartModel
&#9;&#9;mJunctionSpinnerPart.Parent = PartModel
&#9;&#9;--
&#9;&#9;local cos, sin = math.cos(t*5), math.sin(t*5)
&#9;&#9;mJunctionPart.Size = Vector3.new(math.abs(cos), math.abs(math.sin(cos+1)), math.abs(sin))
&#9;&#9;mJunctionPart.CFrame = CFrame.new(d)
&#9;&#9;mJunctionSpinnerPart.Size = Vector3.new(math.abs(cos*2), math.abs(cos*2), 0.1)
&#9;&#9;mJunctionSpinnerPart.CFrame = CFrame.new(d)*CFrame.Angles(t, math.sin(t)*6, math.cos(t)*6)
&#9;&#9;--
&#9;&#9;if showBeam then
&#9;&#9;&#9;mMainBeam.Parent = PartModel
&#9;&#9;&#9;mMainBeam.Size = Vector3.new(0.2, 0.2, (d-e).magnitude)
&#9;&#9;&#9;mMainBeam.CFrame = CFrame.new(d, e)*CFrame.new(0, 0, -(d-e).magnitude/2)
&#9;&#9;&#9;mMainBeam.Transparency = frand(0, 1)
&#9;&#9;&#9;--
&#9;&#9;&#9;mParticleEmitter.Parent = PartModel
&#9;&#9;&#9;mParticleEmitter.CFrame = CFrame.new(e)
&#9;&#9;&#9;--
&#9;&#9;&#9;if not mIsShown then
&#9;&#9;&#9;&#9;mParticleEmitter.HoldSound1:Play()
&#9;&#9;&#9;&#9;Delay(0.5, function() mParticleEmitter.HoldSound2:Play() end)
&#9;&#9;&#9;end
&#9;&#9;&#9;mIsShown = true
&#9;&#9;else
&#9;&#9;&#9;mMainBeam.Parent = nil
&#9;&#9;&#9;mParticleEmitter.Parent = nil
&#9;&#9;&#9;mIsShown = false
&#9;&#9;end
&#9;&#9;--
&#9;end
&#9;function this:hide()
&#9;&#9;mIsShown = false
&#9;&#9;--
&#9;&#9;mBeam_AD:hide()
&#9;&#9;mBeam_BD:hide()
&#9;&#9;mBeam_CD:hide()
&#9;&#9;--
&#9;&#9;mJunctionPart.Parent = nil
&#9;&#9;mJunctionSpinnerPart.Parent = nil
&#9;&#9;mMainBeam.Parent = nil
&#9;&#9;--
&#9;&#9;mParticleEmitter.Parent = nil
&#9;end
end)

--effects
local ChargeEffect = CreateSpotWeld_Charge()
local BeamEffect = CreateSpotWeld_Beam()

--helper to show the beam
function showBeamEffect(target, showBeam)
&#9;local ch = Tool.Character
&#9;local ra = ch:FindFirstChild(&quot;Right Arm&quot;)
&#9;local la = ch:FindFirstChild(&quot;Left Arm&quot;)
&#9;local head = ch:FindFirstChild(&quot;Head&quot;)
&#9;if not (la and ra and head) then
&#9;&#9;BeamEffect:hide()
&#9;end
&#9;--
&#9;local ray = CFrame.new(head.Position, target)*CFrame.new(0, 2, -1)
&#9;local a = (ra.CFrame*CFrame.new(0, -1, 0)).p
&#9;local c = (la.CFrame*CFrame.new(0, -1, 0)).p
&#9;local e = target
&#9;--
&#9;local castDistance = (ray.p-e).magnitude
&#9;local d_dist = math.min(2, math.max(10, castDistance/5))
&#9;local d = (ray*CFrame.new(0, 0, -d_dist)).p
&#9;--
&#9;local b = (head.CFrame*CFrame.new(0.3, 0.15, -0.6)).p
&#9;BeamEffect:show(a, b, c, d, e, showBeam)
end


function findFaceFromCoord(size, loc)
&#9;local pa, pb = -size/2, size/2
&#9;local dx = math.min(math.abs(loc.x-pa.x), math.abs(loc.x-pb.x))
&#9;local dy = math.min(math.abs(loc.y-pa.y), math.abs(loc.y-pb.y))
&#9;local dz = math.min(math.abs(loc.z-pa.z), math.abs(loc.z-pb.z))
&#9;--
&#9;if dx &lt; dy and dx &lt; dz then
&#9;&#9;if math.abs(loc.x-pa.x) &lt; math.abs(loc.x-pb.x) then
&#9;&#9;&#9;return Enum.NormalId.Left --&apos;Left&apos;
&#9;&#9;else
&#9;&#9;&#9;return Enum.NormalId.Right --&apos;Right&apos;
&#9;&#9;end
&#9;elseif dy &lt; dx and dy &lt; dz then
&#9;&#9;if math.abs(loc.y-pa.y) &lt; math.abs(loc.y-pb.y) then
&#9;&#9;&#9;return Enum.NormalId.Bottom --&apos;Bottom&apos;
&#9;&#9;else
&#9;&#9;&#9;return Enum.NormalId.Top --&apos;Top&apos;
&#9;&#9;end
&#9;elseif dz &lt; dx and dz &lt; dy then
&#9;&#9;if math.abs(loc.z-pa.z) &lt; math.abs(loc.z-pb.z) then
&#9;&#9;&#9;return Enum.NormalId.Front --&apos;Front&apos;
&#9;&#9;else
&#9;&#9;&#9;return Enum.NormalId.Back --&apos;Back&apos;
&#9;&#9;end&#9;
&#9;end 
end
function createScorch(part, hit)
&#9;local scorch = Create&apos;Part&apos;{
&#9;&#9;Name = &apos;SpotWeld_Scorch&apos;,
&#9;&#9;FormFactor = &apos;Custom&apos;,
&#9;&#9;CanCollide = false,
&#9;&#9;Size = Vector3.new(2, 0.1, 2),
&#9;&#9;Transparency = 1,
&#9;&#9;Create&apos;Decal&apos;{
&#9;&#9;&#9;Face = &apos;Top&apos;,
&#9;&#9;&#9;Texture = &apos;http://www.roblox.com/asset/?id=22915150&apos;,
&#9;&#9;&#9;Shiny = 0,
&#9;&#9;},
&#9;&#9;Parent = part.Parent,
&#9;}
&#9;--
&#9;RaycastIgnore:addIgnore(scorch)
&#9;local hitFace = findFaceFromCoord(part.Size, part.CFrame:toObjectSpace(CFrame.new(hit)))
&#9;local dir = (part.CFrame-part.Position)*Vector3.FromNormalId(hitFace)
&#9;if part:IsA(&apos;Terrain&apos;) then
&#9;&#9;scorch.CFrame = CFrame.new(hit)
&#9;else
&#9;&#9;scorch.CFrame = CFrame.new(hit, hit+dir)*CFrame.Angles(-math.pi/2, 0, 0)
&#9;end
&#9;--
&#9;local weld = Create&apos;Weld&apos;{
&#9;&#9;Parent = scorch,
&#9;&#9;Part0 = scorch,
&#9;}
&#9;weld.C0 = CFrame.new()
&#9;weld.C1 = scorch.CFrame:inverse()*part.CFrame
&#9;weld.Part1 = part
&#9;--
&#9;game.Debris:AddItem(scorch, 5)
end


local mClickNum = 0
local mSelected = false
Tool.MouseClick:connect(function()
&#9;mClickNum = mClickNum+1
&#9;local thisClick = mClickNum
&#9;if not Tool.Mouse.Target or not Tool.Character:FindFirstChild(&quot;Head&quot;) then
&#9;&#9;return
&#9;end
&#9;--
&#9;Tool.AnimationProvider:getAnimation(&apos;fire&apos;):Play(0, 1, 4)
&#9;Spawn(function()
&#9;&#9;repeat until Tool.AnimationProvider:getAnimation(&apos;fire&apos;).KeyframeReached:wait() == &apos;complete&apos;
&#9;&#9;Tool.AnimationProvider:getAnimation(&apos;hold&apos;):Play(0, 1, 1)
&#9;end)
&#9;--
&#9;Tool.Humanoid.WalkSpeed = 0
&#9;--
&#9;local headPos = Tool.Character.Head.Position
&#9;local hit = Tool.Mouse.Hit.p
&#9;ChargeEffect:run((CFrame.new(headPos, hit)*CFrame.new(0, 2, -3)).p)
&#9;ChargeEffect.Completed:wait()
&#9;ChargeEffect:stop()
&#9;--
&#9;local isDamageTick = false
&#9;local timeOfLastScorch = tick()
&#9;local partsToIgnore = RaycastIgnore:genIgnoreList()
&#9;local headPart = Tool.Character:FindFirstChild(&quot;Head&quot;)
&#9;while mSelected and Tool.MouseDown and mClickNum == thisClick and headPart do
&#9;&#9;--first, find the true mouse hit, ignoring my ray parts
&#9;&#9;local mouseRay = Tool.Mouse.UnitRay
&#9;&#9;local newRay = Ray.new(mouseRay.Origin, mouseRay.Direction.unit*999.9)
&#9;&#9;local _, hit = game.Workspace:FindPartOnRayWithIgnoreList(newRay, partsToIgnore)

&#9;&#9;--found true hit, now go on to raycast to there from firefrom point
&#9;&#9;local headPos = Tool.Character.Head.Position
&#9;&#9;local fireFrom = (CFrame.new(headPos, hit)*CFrame.new(0, 2, -1)).p
&#9;&#9;local castRay = Ray.new(fireFrom, (hit-fireFrom).unit*999.9)
&#9;&#9;local part, target = game.Workspace:FindPartOnRayWithIgnoreList(castRay, partsToIgnore)

&#9;&#9;local charHeading = Tool.Character.Torso.CFrame.lookVector
&#9;&#9;local outOfFOV = (math.acos((target-fireFrom).unit:Dot(charHeading)) &gt; 1.5)
&#9;&#9;if not target or outOfFOV then
&#9;&#9;&#9;--just shoot arbitrarily ahead
&#9;&#9;&#9;showBeamEffect((Tool.Character.Head.CFrame*CFrame.new(0, 0, -10)).p, false)

&#9;&#9;elseif (target-fireFrom).magnitude &gt; 50 then
&#9;&#9;&#9;--too far away
&#9;&#9;&#9;target = fireFrom+(target-fireFrom).unit*50
&#9;&#9;&#9;showBeamEffect(target, false)

&#9;&#9;else
&#9;&#9;&#9;--mechanism to do more damage every other tick
&#9;&#9;&#9;isDamageTick = not isDamageTick
&#9;&#9;&#9;if isDamageTick then
&#9;&#9;&#9;&#9;--see if the target exists and is a humanoid
&#9;&#9;&#9;&#9;local hum = (part.Parent or game):FindFirstChild(&quot;Humanoid&quot;)
&#9;&#9;&#9;&#9;hum = hum or ((part.Parent or game).Parent or game):FindFirstChild(&quot;Humanoid&quot;)
&#9;&#9;&#9;&#9;if hum then
&#9;&#9;&#9;&#9;&#9;--found a humanoid, do damage
&#9;&#9;&#9;&#9;&#9;TagHumanoid(hum)
&#9;&#9;&#9;&#9;&#9;hum:TakeDamage(4)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;--make scorch effects
&#9;&#9;&#9;if (tick()-timeOfLastScorch) &gt; 0.1 then
&#9;&#9;&#9;&#9;timeOfLastScorch = tick()
&#9;&#9;&#9;&#9;createScorch(part, target)
&#9;&#9;&#9;end

&#9;&#9;&#9;--show the beam
&#9;&#9;&#9;showBeamEffect(target, true)
&#9;&#9;end
&#9;&#9;wait()
&#9;end
&#9;if mClickNum == thisClick then
&#9;&#9;BeamEffect:hide()
&#9;&#9;Tool.Humanoid.WalkSpeed = 16
&#9;&#9;Tool.AnimationProvider:getAnimation(&apos;hold&apos;):Stop()
&#9;end
end)

local mHatPart = nil
Tool.Equipped:connect(function()
&#9;mSelected = true
&#9;PartModel.Parent = game.Workspace
&#9;Failsafe = Tool.Tool.Failsafe:Clone()
&#9;Failsafe.Disabled = false
&#9;Failsafe.Model.Value = PartModel
&#9;Failsafe.Humanoid.Value = Tool.Humanoid
&#9;Failsafe.Parent = PartModel
&#9;--
&#9;Tool.AnimationProvider:getAnimation(&apos;equip&apos;):Play(0.1, 1, 4)
&#9;Tool.Tool.Grip = CFrame.new()
&#9;Tool.Tool.Handle.Transparency = 1
&#9;--
&#9;Spawn(function()
&#9;&#9;--this code causes re-firing of the equipped event fpor some reason?
&#9;&#9;--putting it in a new thread fixes this behavior
&#9;&#9;mHatPart = Tool.Tool.Handle:Clone()
&#9;&#9;mHatPart.Transparency = 0
&#9;&#9;mHatPart.Parent = Tool.Character

&#9;&#9;local w = Create&apos;Weld&apos;{
&#9;&#9;&#9;Parent = mHatPart,
&#9;&#9;&#9;Part0 = mHatPart,
&#9;&#9;&#9;Part1 = Tool.Character:FindFirstChild(&apos;Head&apos;),
&#9;&#9;&#9;C0 = CFrame.new(),
&#9;&#9;&#9;C1 = CFrame.new(0.5, 0.200000003, -0.100000001, 1, 0, 0, 0, 1, 0, 0, 0, 1),
&#9;&#9;}
&#9;end)
end)

Tool.Unequipped:connect(function()
&#9;mSelected = false
&#9;PartModel.Parent = nil
&#9;Failsafe:Destroy()
&#9;Failsafe = nil
&#9;--
&#9;Tool.AnimationProvider:getAnimation(&apos;equip&apos;):Stop()
&#9;Tool.AnimationProvider:getAnimation(&apos;fire&apos;):Stop()
&#9;Tool.AnimationProvider:getAnimation(&apos;hold&apos;):Stop()
&#9;--kill any running effects
&#9;ChargeEffect:stop()
&#9;BeamEffect:hide()
&#9;--
&#9;Tool.Humanoid.WalkSpeed = 16
&#9;Tool.Tool.Handle.Transparency = 0
&#9;--
&#9;if mHatPart then
&#9;&#9;mHatPart:Destroy()
&#9;&#9;mHatPart = nil
&#9;end
end)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX2">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0.5</X>
					<Y>17.3299999</Y>
					<Z>22.5100002</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">0</token>
				<token name="shape">0</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>1</Y>
					<Z>1</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX3">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=113341349</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.5</X>
						<Y>1.5</Y>
						<Z>1.5</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=113341394</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="Script" referent="RBX4">
			<Properties>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Failsafe</string>
				<ProtectedString name="Source">while not script:FindFirstChild(&quot;Humanoid&quot;) do
&#9;script.ChildAdded:wait()
end
script.Humanoid.Value.Died:connect(function()
&#9;script.Model.Value:Destroy()
end)</ProtectedString>
			</Properties>
			<Item class="ObjectValue" referent="RBX5">
				<Properties>
					<string name="Name">Model</string>
					<Ref name="Value">null</Ref>
				</Properties>
			</Item>
			<Item class="ObjectValue" referent="RBX6">
				<Properties>
					<string name="Name">Humanoid</string>
					<Ref name="Value">null</Ref>
				</Properties>
			</Item>
		</Item>
		<Item class="Camera" referent="RBX7">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0.408990175</X>
					<Y>17.6086369</Y>
					<Z>21.1410275</Z>
					<R00>-0.997797489</R00>
					<R01>0.0132021802</R01>
					<R02>-0.0650068894</R02>
					<R10>-0</R10>
					<R11>0.979994237</R11>
					<R12>0.199025989</R12>
					<R20>0.0663339496</R20>
					<R21>0.198587626</R21>
					<R22>-0.977835774</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>0.5</X>
					<Y>17.3299999</Y>
					<Z>22.5100002</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>