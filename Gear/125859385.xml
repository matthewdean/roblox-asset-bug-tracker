<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>-1</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">AppleGun</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=125762514</url></Content>
			<string name="ToolTip">I BELIEVE YA, BUT MY APPLE GUN DONT</string>
		</Properties>
		<Item class="Part" referent="RBX1">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>-1.82500029</X>
					<Y>43.8200035</Y>
					<Z>-42.8600006</Z>
					<R00>0</R00>
					<R01>-0.613078952</R01>
					<R02>-0.790021777</R02>
					<R10>0</R10>
					<R11>0.790021777</R11>
					<R12>-0.613078952</R12>
					<R20>1</R20>
					<R21>0</R21>
					<R22>0</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>0.540003419</X>
					<Y>1.26000023</Y>
					<Z>5.67998886</Z>
				</Vector3>
			</Properties>
			<Item class="LocalScript" referent="RBX2">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LocalScript</string>
					<ProtectedString name="Source">------------------------
--[[UTIL Functions]]--
------------------------
--Global functions used by all classes are wrapped in UTIL
--deal with it.
local UTIL = {}
 
function UTIL.Class(tableIn,template)
        tableIn = tableIn or {}
        local mt = {
        __metatable = UTIL.DeepCopy(template);
        __index     = UTIL.DeepCopy(template);
        }
        return setmetatable(tableIn, mt)
end
function UTIL.MakeClass(...)
        local arg = {...}
        assert(#arg&gt;0, &apos;ERROR: class needs 1 argument or more&apos;)
        local members = arg[1]
        for i=2,#arg,1 do
                if type(arg[i])==&apos;table&apos; then
                        for key,val in pairs(arg[i]) do
                                if not members[key] then
                                        members[key] = val
                                end
                        end
                end
        end
        local function New(init)
                return UTIL.Class(init or {},members)
        end
        local function Copy(obj, ...)
                local newobj = obj:New(unpack(arg))
                for n,v in pairs(obj) do newobj[n] = v end
                return newobj
        end
        members.New  = New
        members.Copy = Copy
        return mt
end
 
function UTIL.DeepCopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == &apos;table&apos; then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[UTIL.DeepCopy(orig_key)] = UTIL.DeepCopy(orig_value)
        end
        setmetatable(copy, UTIL.DeepCopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

function UTIL.Instantiate(guiType)
&#9;return function(data)
&#9;&#9;local obj = Instance.new(guiType)
&#9;&#9;for k, v in pairs(data) do
&#9;&#9;&#9;if type(k) == &apos;number&apos; then
&#9;&#9;&#9;&#9;v.Parent = obj
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;obj[k] = v
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return obj
&#9;end
end 

function UTIL.RetroRegister(func,...)
&#9;func()
&#9;for _,i in ipairs({...}) do
&#9;&#9;i:connect(func)
&#9;end
end

-- Waits for a new character to be added if the current one is invalid
-- (Ensures that you don&apos;t have the old dead character after a respawn)
function UTIL.WaitForValidCharacter(player)
&#9;local character = player.Character
&#9;if not character or not character.Parent or not character:FindFirstChild(&apos;Humanoid&apos;) or character.Humanoid.Health &lt;= 0 then
&#9;&#9;player.CharacterAdded:wait()
&#9;&#9;wait(0) --NOTE: Necessary for server scripts executing on the same event
&#9;&#9;character = player.Character
&#9;end
&#9;return character
end


-- Returns a character ancestor and its Humanoid, or nil
function UTIL.FindCharacterAncestor(subject)
&#9;if subject and subject ~= Workspace then
&#9;&#9;local humanoid = subject:FindFirstChild(&apos;Humanoid&apos;)
&#9;&#9;if humanoid then
&#9;&#9;&#9;return subject, humanoid
&#9;&#9;else
&#9;&#9;&#9;return UTIL.FindCharacterAncestor(subject.Parent)
&#9;&#9;end
&#9;end
&#9;return nil
end

UTIL.AssetURL = &apos;http://www.roblox.com/asset/?id=&apos;


UTIL.TouchEnabled = game:GetService(&quot;UserInputService&quot;).TouchEnabled 
do
&#9;local suceeded,_ =pcall(function() game.Workspace.CurrentCamera:GetPanSpeed() end)
&#9;UTIL.CanCheckPanSpeed = suceeded
end


local DebrisService = Game:GetService(&apos;Debris&apos;)
local DebugPrintOffset = 0
function UTIL.Dprint(...)
&#9;local line = &apos;&apos;
&#9;for _, segment in pairs({...}) do
&#9;&#9;line = line .. (line and &apos; &apos; or &apos;&apos;) .. tostring(segment)
&#9;end
&#9;local gui = Instance.new(&apos;ScreenGui&apos;)
&#9;local label = Instance.new(&apos;TextLabel&apos;)
&#9;label.Text = line
&#9;label.Size = UDim2.new(0.25, 0, 0.05, 0)
&#9;label.BackgroundTransparency = 0.5
&#9;label.Position = UDim2.new(0, 0, 0, DebugPrintOffset)
&#9;label.TextWrapped = true
&#9;label.Parent = gui
&#9;DebrisService:AddItem(gui, 30)
&#9;gui.Parent = script.Parent
&#9;DebugPrintOffset = (DebugPrintOffset &lt;= 600) and DebugPrintOffset + 30 or 0
end
--
--All Welding Related Utility functions should be put here
--
WeldUtil = {}


do


&#9;function WeldUtil.WeldBetween(a, b)
&#9;&#9;local weld = Instance.new(&quot;Weld&quot;)
&#9;&#9;weld.Part0 = a
&#9;&#9;weld.Part1 = b
&#9;&#9;weld.C0 = CFrame.new()
&#9;&#9;weld.C1 = b.CFrame:inverse() * a.CFrame

&#9;&#9;weld.Parent = a
&#9;&#9;return weld
&#9;end
&#9;
&#9;function WeldUtil:PermaWeld(weld)
&#9;&#9;local OriginalParent = weld.Parent
&#9;&#9;weld.Changed:connect(function()
&#9;&#9;&#9;Delay(0,function() weld.Parent = OriginalParent end)
&#9;&#9;end)
&#9;end

end

local InternalEvent =
{
&#9;Listeners = nil,
}
do
&#9;UTIL.MakeClass(InternalEvent)
&#9;function InternalEvent:Connect(func)
&#9;&#9;if not self.Listeners then self.Listeners = {} end
&#9;&#9;table.insert(self.Listeners,func)
&#9;end
&#9;function InternalEvent:Fire(...)
&#9;&#9;if not self.Listeners then return end
&#9;&#9;local args = {...}
&#9;&#9;for _,i in ipairs(self.Listeners) do
&#9;&#9;&#9;Spawn(function() i(unpack(args)) end)
&#9;&#9;end
&#9;end
end
local PartProjectile =
{
&#9;Damage = 5, -- Base output damage per shot.
&#9;Range = 250, -- Max distance that the weapon can fire.
&#9;Speed = 1,--how many studs per second to move
&#9;DirectionRay=nil,
&#9;Part = nil,
&#9;StartPos = nil,
&#9;LinearPosition = 0,
&#9;IsAlive = true,
&#9;IgnoreList = {},
&#9;Arching = Vector3.new(0,1,0),--WARNING, if arching is 0, divide by 0 errors, used to arc bullets
&#9;QuadraticA = 0,&#9;--used for arching in equation y = A(x^2)+Bx
&#9;QuadraticB = 0,
&#9;EffectFunction = nil,
}
do
&#9;UTIL.MakeClass(PartProjectile)
&#9;function PartProjectile.New(base,ray)
&#9;&#9;local init = nil
&#9;&#9;--if base is a copy of this class, then copy over fields
&#9;&#9;if type(base) == &apos;table&apos; and base.Update then
&#9;&#9;&#9;init = UTIL.DeepCopy(base)
&#9;&#9;&#9;init.Part= base.Part:Clone()
&#9;&#9;else
&#9;&#9;&#9;init = UTIL.DeepCopy(PartProjectile)
&#9;&#9;&#9;init.Part = base:Clone()
&#9;&#9;end
&#9;&#9;init.StartPos = CFrame.new(ray.Origin,ray.Origin+(ray.Direction.unit*math.min(ray.Direction.magnitude,init.Range)))
&#9;&#9;init.Part.CFrame = init.StartPos
&#9;&#9;init.Part.Parent = game.Workspace
&#9;&#9;init.DirectionRay = Ray.new(ray.Origin,(ray.Direction.unit*math.min(ray.Direction.magnitude,init.Range)))
&#9;&#9;init.QuadraticA = -((4*init.Arching)/math.pow(init.DirectionRay.Direction.magnitude,2))
&#9;&#9;init.QuadraticB = ((4*init.Arching)/init.DirectionRay.Direction.magnitude)
&#9;&#9;init.LinearPosition = 0
&#9;&#9;table.insert(init.IgnoreList,init.Part)
&#9;&#9;return init
&#9;end
&#9;
&#9;function PartProjectile:Hit(part)
&#9;&#9;local char,hum = UTIL.FindCharacterAncestor(part)
&#9;&#9;
&#9;&#9;if hum then
&#9;&#9;&#9;hum:TakeDamage(self.Damage)
&#9;&#9;&#9;if self.EffectFunction then
&#9;&#9;&#9;&#9;self.EffectFunction(hum,part)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;self.IsAlive = false
&#9;end
&#9;
&#9;function PartProjectile:Update(dt)
&#9;&#9;if not self.IsAlive then return end
&#9;&#9;
&#9;&#9;self.LinearPosition = self.LinearPosition + ((self.Speed*dt)/(self.Arching.magnitude/(self.DirectionRay.Direction.magnitude*.5)))
&#9;&#9;
&#9;&#9;local oldPos = self.Part.CFrame
&#9;&#9;
&#9;&#9;self.Part.CFrame = (self.StartPos+(self.DirectionRay.Direction.unit*self.LinearPosition))+(self.QuadraticA*math.pow(self.LinearPosition,2))+(self.QuadraticB*self.LinearPosition)
&#9;&#9;
&#9;&#9;if (self.Part.CFrame.p-self.DirectionRay.Origin).magnitude&gt;self.Range then
&#9;&#9;&#9;self.IsAlive = false
&#9;&#9;end
&#9;&#9;local obj = game.Workspace:FindPartOnRayWithIgnoreList( Ray.new(oldPos.p,self.Part.CFrame.p-oldPos.p), self.IgnoreList,false )
&#9;&#9;if obj then
&#9;&#9;&#9;self:Hit(obj)
&#9;&#9;end
&#9;&#9;
&#9;end
&#9;
&#9;function PartProjectile:Destroy()
&#9;&#9;self.Part.Anchored = false
&#9;&#9;Delay(5,function()
&#9;&#9;&#9;self.Part.Parent = nil
&#9;&#9;end)
&#9;&#9;
&#9;end
&#9;
end

--[[shooting Tool Class]]--
&#9;
local ShootingTool =
{
&#9;FireRate = .5, -- How often the weapon can fire.
&#9;Automatic = false, -- hold down to continue firing
&#9;Spread = 0, -- The bigger the spread, the more inaccurate the shots will be.
&#9;ClipSize = 50, -- Shots in a clip
&#9;ReloadTime = 3, -- Time it takes to reload the tool.
&#9;StartingClips = -1,
&#9;BarrelPos = CFrame.new(0, 0, - 1.2), -- L, F, U
&#9;
&#9;SourcePart = nil,
&#9;TemplateProjectile = nil,
&#9;Projectiles = {},
&#9;IsFireing = false,
&#9;
&#9;OnFire = nil,
&#9;OnReload = nil,
&#9;
&#9;BulletsLeft = 50,
&#9;
&#9;LastReload = 0,
&#9;
&#9;FireSound = nil,
&#9;
}
do
&#9;UTIL.MakeClass(ShootingTool)
&#9;function ShootingTool.New(nSource,nProjectile)
&#9;&#9;local init= UTIL.DeepCopy(ShootingTool)
&#9;&#9;init.SourcePart= nSource
&#9;&#9;init.TemplateProjectile = nProjectile
&#9;&#9;init.OnFire = InternalEvent.New()
&#9;&#9;init.OnReload = InternalEvent.New()
&#9;&#9;return init
&#9;end
&#9;
&#9;function ShootingTool:UpdateBullets(dt)
&#9;&#9;for index,i in ipairs(self.Projectiles) do
&#9;&#9;&#9;if i.IsAlive then 
&#9;&#9;&#9;&#9;i:Update(dt) 
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;i:Destroy()
&#9;&#9;&#9;&#9;table.remove(self.Projectiles, index)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;function ShootingTool:StartFireing(mouse)
&#9;&#9;if tick()-self.LastReload&lt;self.ReloadTime then return end
&#9;&#9;while self.IsFireing do wait() end
&#9;&#9;self.IsFireing = true
&#9;&#9;repeat
&#9;&#9;&#9;if tick()-self.LastReload&gt;self.ReloadTime then
&#9;&#9;&#9;&#9;local startPos = self.SourcePart.CFrame:toWorldSpace(self.BarrelPos)
&#9;&#9;&#9;&#9;local dir = CFrame.Angles((math.random()-.5)*2*self.Spread,(math.random()-.5)*2*self.Spread,(math.random()-.5)*2*self.Spread)*(mouse.Hit.p-startPos.p)
&#9;&#9;&#9;&#9;local nprojectile = PartProjectile.New(self.TemplateProjectile, Ray.new(startPos.p,dir))
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;table.insert(self.Projectiles,nprojectile)
&#9;&#9;&#9;&#9;self.OnFire:Fire()
&#9;&#9;&#9;&#9;if self.FireSound then
&#9;&#9;&#9;&#9;&#9;self.FireSound:Play()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;self.BulletsLeft = self.BulletsLeft -1
&#9;&#9;&#9;end
&#9;&#9;&#9;if self.BulletsLeft==0 then
&#9;&#9;&#9;&#9;self.OnReload:Fire()
&#9;&#9;&#9;&#9;self.BulletsLeft = self.ClipSize
&#9;&#9;&#9;&#9;self.LastReload = tick()
&#9;&#9;&#9;end
&#9;&#9;&#9;wait(self.FireRate)
&#9;&#9;until not self.IsFireing or not self.Automatic
&#9;end
&#9;
&#9;function ShootingTool:EndFireing()
&#9;&#9;self.IsFireing=false
&#9;end
&#9;
end
do
&#9;local Handle = script.Parent
&#9;local Tool = Handle.Parent
&#9;

&#9;local OrangeLight = Handle:WaitForChild(&apos;OrangeLight&apos;)
&#9;local RedLight = Handle:WaitForChild(&apos;RedLight&apos;)
&#9;local SpotLight = Handle:WaitForChild(&apos;SpotLight&apos;)
&#9;
&#9;
&#9;local Player = game.Players.LocalPlayer
&#9;local Character = UTIL.WaitForValidCharacter(Player)
&#9;local HoldAni = UTIL.Instantiate&quot;Animation&quot;
&#9;{AnimationId = &quot;http://www.roblox.com/Asset?ID=116690317&quot;}
&#9;local ReloadAni = UTIL.Instantiate&quot;Animation&quot;
&#9;{AnimationId = &quot;http://www.roblox.com/Asset?ID=116695140&quot;}
&#9;
&#9;local HoldAniTrack
&#9;local ReloadAniTrack
&#9;local ShellMesh = UTIL.Instantiate&quot;SpecialMesh&quot;
&#9;{
&#9;&#9;MeshId = UTIL.AssetURL..125755971,
&#9;&#9;TextureId = UTIL.AssetURL..125755118,
&#9;&#9;Scale = Vector3.new(1,1,1),
&#9;}
&#9;local Projectile
&#9;do
&#9;&#9;local tpart = UTIL.Instantiate&quot;Part&quot;
&#9;&#9;{
&#9;&#9;&#9;Anchored = true,
&#9;&#9;&#9;CanCollide = true,
&#9;&#9;&#9;Size = Vector3.new(.4,.4,.4),
&#9;&#9;&#9;Shape = &quot;Ball&quot;,
&#9;&#9;&#9;ShellMesh:Clone(),
&#9;&#9;}
&#9;&#9;Projectile = PartProjectile.New(tpart,Ray.new())
&#9;end 
&#9;table.insert(Projectile.IgnoreList,Handle)
&#9;
&#9;Projectile.Speed = 20
&#9;Projectile.Arching = Vector3.new(0,5,0)
&#9;Projectile.Damage = 20
&#9;
&#9;Projectile.EffectFunction = function(hum,part)
&#9;&#9;local explo = Instance.new(&apos;Explosion&apos;)
&#9;&#9;explo.BlastPressure=0
&#9;&#9;explo.BlastRadius = 20
&#9;&#9;explo.Position=part.CFrame.p
&#9;&#9;explo.Parent = part
&#9;end
&#9;
&#9;local Gun = ShootingTool.New(Handle,Projectile)
&#9;Gun.Automatic = false
&#9;Gun.BarrelPos = CFrame.new(0, 0, - 3.1)
&#9;Gun.FireRate = .25
&#9;Gun.Spread = .05
&#9;Gun.FireSound  = Handle:WaitForChild(&apos;FireSound&apos;)
&#9;
&#9;Gun.OnFire:Connect(function()
&#9;&#9;SpotLight.Enabled = true
&#9;&#9;if(math.random()&gt;.5) then
&#9;&#9;&#9;OrangeLight.Enabled =true
&#9;&#9;else
&#9;&#9;&#9;RedLight.Enabled =true
&#9;&#9;end
&#9;&#9;wait(.05)
&#9;&#9;SpotLight.Enabled = false
&#9;&#9;OrangeLight.Enabled =false
&#9;&#9;RedLight.Enabled =false
&#9;end)
&#9;
&#9;Gun.OnReload:Connect(function()
&#9;&#9;if ReloadAniTrack then
&#9;&#9;&#9;ReloadAniTrack:Play()
&#9;&#9;end
&#9;&#9;wait(3)

&#9;end)
&#9;
&#9;Tool.Equipped:connect(function(mouse)
&#9;&#9;
&#9;&#9;Character = UTIL.WaitForValidCharacter(Player)
&#9;&#9;local Humanoid = Character:FindFirstChild(&apos;Humanoid&apos;)
&#9;&#9;table.insert(Projectile.IgnoreList,Character)
&#9;&#9;HoldAniTrack = Humanoid:LoadAnimation(HoldAni)
&#9;&#9;ReloadAniTrack = Humanoid:LoadAnimation(ReloadAni)
&#9;&#9;--HoldAniTrack:Play()
&#9;&#9;mouse.Button1Down:connect(function()
&#9;&#9;&#9;Gun:StartFireing(mouse)
&#9;&#9;end)
&#9;&#9;mouse.Button1Up:connect(function()
&#9;&#9;&#9;Gun:EndFireing()
&#9;&#9;end)
&#9;end)
&#9;Tool.Unequipped:connect(function()
&#9;&#9;--HoldAniTrack:Stop()
&#9;end)
&#9;while true do
&#9;&#9;Gun:UpdateBullets(1/30)
&#9;&#9;wait()
&#9;end

end
</ProtectedString>
				</Properties>
			</Item>
			<Item class="SpecialMesh" referent="RBX3">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=125754898</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=125755118</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="PointLight" referent="RBX4">
				<Properties>
					<float name="Brightness">4</float>
					<Color3 name="Color">4293034271</Color3>
					<bool name="Enabled">false</bool>
					<string name="Name">OrangeLight</string>
					<float name="Range">4</float>
				</Properties>
			</Item>
			<Item class="PointLight" referent="RBX5">
				<Properties>
					<float name="Brightness">4</float>
					<Color3 name="Color">4294901760</Color3>
					<bool name="Enabled">false</bool>
					<string name="Name">RedLight</string>
					<float name="Range">4</float>
				</Properties>
			</Item>
			<Item class="SpotLight" referent="RBX6">
				<Properties>
					<float name="Angle">45</float>
					<float name="Brightness">8</float>
					<Color3 name="Color">4294901760</Color3>
					<bool name="Enabled">false</bool>
					<string name="Name">SpotLight</string>
					<float name="Range">16</float>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX7">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">FireSound</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=125762586</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
		</Item>
		<Item class="Camera" referent="RBX8">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-3.07675982</X>
					<Y>44.5081863</Y>
					<Z>-38.9809608</Z>
					<R00>0.938487947</R00>
					<R01>0.078037113</R01>
					<R02>-0.336378634</R02>
					<R10>-0</R10>
					<R11>0.974129617</R11>
					<R12>0.225990176</R12>
					<R20>0.34531197</R20>
					<R21>-0.212089062</R21>
					<R22>0.914208889</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-2.40400219</X>
					<Y>44.0562057</Y>
					<Z>-40.8093796</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>