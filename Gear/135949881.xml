<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">WinnerEggCracked</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=135564438</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="LocalScript" referent="RBX1">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source">local MOUSE_ICON = &apos;rbxasset://textures/GunCursor.png&apos;
local RELOADING_ICON = &apos;rbxasset://textures/GunWaitCursor.png&apos;

local Tool = script.Parent

local Mouse = nil

local function UpdateIcon()
&#9;Mouse.Icon = Tool.Enabled and MOUSE_ICON or RELOADING_ICON
end

local function OnEquipped(mouse)
&#9;Mouse = mouse
&#9;UpdateIcon()
end

local function OnChanged(property)
&#9;if property == &apos;Enabled&apos; then
&#9;&#9;UpdateIcon()
&#9;end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX2">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">1</int>
				<CoordinateFrame name="CFrame">
					<X>42.0000076</X>
					<Y>1.39844394</Y>
					<Z>4</Z>
					<R00>1</R00>
					<R01>-1.28136491e-018</R01>
					<R02>2.70646879e-019</R02>
					<R10>1.28136491e-018</R10>
					<R11>1</R11>
					<R12>-1.67646949e-018</R12>
					<R20>-2.70646879e-019</R20>
					<R21>1.67646949e-018</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">0</token>
				<token name="shape">0</token>
				<Vector3 name="size">
					<X>2</X>
					<Y>2</Y>
					<Z>2</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX3">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=139110864</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=139111862</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="Script" referent="RBX4">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">BadgeRequirer</string>
				<ProtectedString name="Source">local Tool = script.Parent

local PlayersService = Game:GetService(&apos;Players&apos;)
local Backpack = Tool.Parent
local Player = Backpack.Parent
local BadgeService = Game:GetService(&apos;BadgeService&apos;)

wait(3)

if not BadgeService:UserHasBadge(Player.userId, 135878182) then
&#9;Tool.Parent = nil
end

</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX5">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">WinnerEggScript</string>
				<ProtectedString name="Source">local DEBUG_PATHING = false

local CHARGE_CD = 10
local MAX_CHARGE_RANGE = 100
local MAX_WAYPOINTS = 5
local MAX_JUMP_DISTANCE = 100
local JUMP_BACK_DIST = 5


local CHARGE_DAMAGE = 50

local HORN_MESH_ID = 138330146
local HORN_TX_ID = 138330253

local Tool = script.Parent
local Handle = Tool:WaitForChild(&apos;Handle&apos;)
local PlayersService = Game:GetService(&apos;Players&apos;)
local DebrisService = Game:GetService(&apos;Debris&apos;)
local MyCharacter = nil
local MyPlayer = nil
local PlayerGui = nil
local GuiTemplate = script:WaitForChild(&apos;ReleaseGui&apos;)
local Gui = nil
local ChargeVelocity = nil
local Cleaner = script:WaitForChild(&apos;Cleaner&apos;)

-- Create the CreatorTag once at the start
local CreatorTag = Instance.new(&apos;ObjectValue&apos;)
CreatorTag.Name = &apos;creator&apos;

local weaponNameTag = Instance.new(&apos;StringValue&apos;, CreatorTag)
weaponNameTag.Name = &apos;weaponName&apos;
weaponNameTag.Value = Tool.Name
local weaponIconTag = Instance.new(&apos;StringValue&apos;, CreatorTag)
weaponIconTag.Name = &apos;weaponIcon&apos;
weaponIconTag.Value = &apos;http://www.roblox.com/asset/?id=135564438&apos;



local function Attackable(player1, player2)
&#9;if not (player1 and player2) then
&#9;&#9;return false
&#9;end
&#9;if player1.Neutral or player2.Neutral then
&#9;&#9;return true
&#9;end
&#9;if player1.TeamColor == player2.TeamColor then
&#9;&#9;return false
&#9;end
&#9;return true
end


local function getPlayerTorso(player)
&#9;return player and player.Character and player.Character:FindFirstChild(&apos;Torso&apos;)
end


function RayIgnoreCheck(hit, pos)
&#9;if hit then
&#9;&#9;if hit.CanCollide == false or hit:IsDescendantOf(MyCharacter) then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false
end

-- @preconditions: vec should be a unit vector, and 0 &lt; rayLength &lt;= 1000
function RayCast(startPos, vec, rayLength)
&#9;vec = vec.unit
&#9;local hitObject, hitPos = Workspace:FindPartOnRay(Ray.new(startPos + (vec * .01), vec * rayLength), Handle)
&#9;if hitObject and hitPos then
&#9;&#9;local distance = rayLength - (hitPos - startPos).magnitude
&#9;&#9;if RayIgnoreCheck(hitObject, hitPos) and distance &gt; 0 then
&#9;&#9;&#9;-- there is a chance here for potential infinite recursion
&#9;&#9;&#9;return RayCast(hitPos, vec, distance)
&#9;&#9;end
&#9;end
&#9;return hitObject, hitPos
end

function DistanceBetweenPlayers(playerA, playerB)
&#9;local torsoA = getPlayerTorso(playerA)
&#9;local torsoB = getPlayerTorso(playerB)
&#9;if torsoA and torsoB then
&#9;&#9;return torsoA.CFrame.p - torsoB.CFrame.p
&#9;end
&#9;return Vector3.new(10000000,10000000,10000000)
end

function AngleFromCamera(player)
&#9;local torso = getPlayerTorso(player)
&#9;local myTorso = getPlayerTorso(MyPlayer)
&#9;if torso and myTorso then
&#9;&#9;local vec = (torso.CFrame.p - myTorso.CFrame.p).unit
&#9;&#9;local angleOffBy = vec:Dot(myTorso.CFrame.lookVector)
&#9;&#9;return angleOffBy, (torso.CFrame.p - myTorso.CFrame.p)
&#9;end
&#9;return nil, nil
end

local NormalIdToSurfaceId =
{
&#9;[Enum.NormalId.Back] = &apos;BackSurface&apos;;
&#9;[Enum.NormalId.Front] = &apos;FrontSurface&apos;;
&#9;[Enum.NormalId.Left] = &apos;LeftSurface&apos;;
&#9;[Enum.NormalId.Right] = &apos;RightSurface&apos;;
&#9;[Enum.NormalId.Top] = &apos;TopSurface&apos;;
&#9;[Enum.NormalId.Bottom] = &apos;BottomSurface&apos;;
}

local function ClassifySurface(part, point)
&#9;local psize = part.Size
&#9;local localPoint = part.CFrame:pointToObjectSpace(point)
&#9;local posDiff = psize/2 - localPoint
&#9;local negDiff = psize/2 + localPoint
&#9;local minDiff = Vector3.new(
&#9;&#9;&#9;math.min(math.abs(posDiff.x), math.abs(negDiff.x)),
&#9;&#9;&#9;math.min(math.abs(posDiff.y), math.abs(negDiff.y)),
&#9;&#9;&#9;math.min(math.abs(posDiff.z), math.abs(negDiff.z)))
&#9;&#9; 
&#9;if minDiff.x &lt;= math.min(minDiff.y, minDiff.z) then -- On x-axis
&#9;&#9;if math.abs(posDiff.x) &lt; math.abs(negDiff.x) then
&#9;&#9;&#9;return Enum.NormalId.Right
&#9;&#9;else
&#9;&#9;&#9;return Enum.NormalId.Left
&#9;&#9;end
&#9;elseif minDiff.y &lt;= minDiff.z then -- On y-axis
&#9;&#9;if math.abs(posDiff.y) &lt; math.abs(negDiff.y) then
&#9;&#9;&#9;return Enum.NormalId.Top
&#9;&#9;else
&#9;&#9;&#9;return Enum.NormalId.Bottom
&#9;&#9;end
&#9;else -- On z-axis
&#9;&#9;if math.abs(posDiff.z) &lt; math.abs(negDiff.z) then
&#9;&#9;&#9;return Enum.NormalId.Back
&#9;&#9;else
&#9;&#9;&#9;return Enum.NormalId.Front
&#9;&#9;end
&#9;end
end


local function GetNormal(part, point)
&#9;local normal = ClassifySurface(part, point)
&#9;return ((part.CFrame-part.CFrame.p)*Vector3.FromNormalId(normal))
end


--DEBUG
local function DebugShowRay(ray, colorBlue)
&#9;Spawn(function()
&#9;&#9;local p = Instance.new(&apos;Part&apos;)
&#9;&#9;p.Name = &apos;Effect&apos;
&#9;&#9;p.Anchored = true
&#9;&#9;p.CanCollide = false
&#9;&#9;p.Transparency = 0.5
&#9;&#9;p.BrickColor = colorBlue and BrickColor.new(&apos;Really blue&apos;) or BrickColor.new(&apos;Really red&apos;)
&#9;&#9;p.FormFactor = &apos;Custom&apos;
&#9;&#9;p.Size = Vector3.new(0.2, 0.2, ray.Direction.magnitude)
&#9;&#9;local startPoint = ray.Origin
&#9;&#9;local endPoint = startPoint + ray.Direction
&#9;&#9;p.CFrame = CFrame.new(startPoint + ((endPoint - startPoint) / 2), endPoint)
&#9;&#9;Game:GetService(&apos;Debris&apos;):AddItem(p, 50)
&#9;&#9;p.Parent = Workspace
&#9;end)
end

function GetTangentVectors(part, point)
&#9;local normalId = ClassifySurface(part, point)
&#9;if DEBUG_PATHING then
&#9;&#9;Spawn(function() part[NormalIdToSurfaceId[normalId]] = &apos;Studs&apos; wait(10) part[NormalIdToSurfaceId[normalId]] = &apos;Smooth&apos; end)
&#9;end
&#9;local normal = Vector3.FromNormalId(normalId)
&#9;local localHitOffset = part.CFrame:pointToObjectSpace(point)
&#9;local tangentVectors = {}
&#9;for i = -1, 1, 2 do
&#9;&#9;-- Add three so we can round the corners
&#9;&#9;local xVec = Vector3.new(((part.Size.x)/2 + JUMP_BACK_DIST) * i  - localHitOffset.x,0,0)
&#9;&#9;if math.abs(normal:Dot(xVec.unit)) &lt; 0.8 then
&#9;&#9;&#9;-- To World Space
&#9;&#9;&#9;table.insert(tangentVectors, (part.CFrame-part.CFrame.p)*(xVec))
&#9;&#9;end
&#9;&#9;local yVec = Vector3.new(0,((part.Size.y)/2 + JUMP_BACK_DIST) * i  - localHitOffset.y,0)
&#9;&#9;if math.abs(normal:Dot(yVec.unit)) &lt; 0.8 then
&#9;&#9;&#9;table.insert(tangentVectors, (part.CFrame-part.CFrame.p)*(yVec))
&#9;&#9;end
&#9;&#9;local zVec = Vector3.new(0,0,((part.Size.z) /2 + JUMP_BACK_DIST) * i - localHitOffset.z)
&#9;&#9;if math.abs(normal:Dot(zVec.unit)) &lt; 0.8 then
&#9;&#9;&#9;table.insert(tangentVectors, (part.CFrame-part.CFrame.p)*(zVec))
&#9;&#9;end
&#9;&#9;--print(xVec.unit, yVec.unit, zVec.unit)
&#9;end
&#9;if DEBUG_PATHING then
&#9;&#9;for _, vec in pairs(tangentVectors) do
&#9;&#9;&#9;DebugShowRay(Ray.new(point, vec), false)
&#9;&#9;end
&#9;end
&#9;if #tangentVectors ~= 4 then
&#9;&#9;print(&quot;ERROR: only&quot; , #tangentVectors , &quot;tangent vectors. normal:&quot; , normal)
&#9;&#9;for _, vec in pairs(tangentVectors) do
&#9;&#9;&#9;print(&quot;Vec:&quot; , vec.unit , &quot;Dot:&quot; , math.abs(normal:Dot(vec.unit)))
&#9;&#9;end
&#9;end
&#9;return tangentVectors
end


function WaypointsRecurse(currPos, desiredPos, wps, depth)
&#9;if (desiredPos - currPos).magnitude &lt; 10 then
&#9;&#9;return true
&#9;end
&#9;if depth &lt;= MAX_WAYPOINTS then
&#9;&#9;local rayDir = desiredPos - currPos
&#9;&#9;local hitObj, hitPos = RayCast(currPos, rayDir, math.min(MAX_JUMP_DISTANCE, rayDir.magnitude))
&#9;&#9;-- back up JUMP_BACK_DIST studs for torso
&#9;&#9;local directPos = hitPos - (rayDir.unit * JUMP_BACK_DIST)
&#9;&#9;local candidates = {}
&#9;&#9;table.insert(candidates, directPos)
&#9;&#9;
&#9;&#9;if hitObj then
&#9;&#9;&#9;local tang = GetTangentVectors(hitObj, hitPos)
&#9;&#9;&#9;for _, vec in pairs(tang) do
&#9;&#9;&#9;&#9;-- Turn the tangent vector into a translation vector
&#9;&#9;&#9;&#9;local tangVec = (hitPos + vec) - currPos
&#9;&#9;&#9;&#9;local obj, pos = RayCast(currPos, tangVec, math.min(MAX_JUMP_DISTANCE, (tangVec.magnitude)))
&#9;&#9;&#9;&#9;table.insert(candidates, pos) -- - (pos - currPos).unit * JUMP_BACK_DIST)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(rayDir)
&#9;&#9;&#9;local xObj, xPos = RayCast(currPos, Vector3.new(rayDir.x, 0,0), math.min(MAX_JUMP_DISTANCE, math.abs(rayDir.x)))
&#9;&#9;&#9;local yObj, yPos = RayCast(currPos, Vector3.new(0,rayDir.y, 0), math.min(MAX_JUMP_DISTANCE, math.abs(rayDir.y)))
&#9;&#9;&#9;local zObj, zPos = RayCast(currPos, Vector3.new(0,0,rayDir.z), math.min(MAX_JUMP_DISTANCE, math.abs(rayDir.z)))
&#9;
&#9;&#9;&#9;if DEBUG_PATHING then
&#9;&#9;&#9;&#9;DebugShowRay(Ray.new(currPos, xPos - currPos), true)
&#9;&#9;&#9;&#9;DebugShowRay(Ray.new(currPos, yPos - currPos), true)
&#9;&#9;&#9;&#9;DebugShowRay(Ray.new(currPos, zPos - currPos), true)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;table.insert(candidates, xPos - (xObj and (xPos - currPos).unit * JUMP_BACK_DIST or Vector3.new()))
&#9;&#9;&#9;table.insert(candidates, yPos - (yObj and (yPos - currPos).unit * JUMP_BACK_DIST or Vector3.new()))
&#9;&#9;&#9;table.insert(candidates, zPos - (zObj and (zPos - currPos).unit * JUMP_BACK_DIST or Vector3.new()))
&#9;&#9;end
&#9;&#9;-- sort by closeness
&#9;&#9;table.sort(candidates, function(a,b) return (desiredPos - a).magnitude &lt; (desiredPos - b).magnitude end)
&#9;&#9;
&#9;&#9;while candidates[1] do
&#9;&#9;&#9;local currPoint = table.remove(candidates)
&#9;&#9;&#9;if WaypointsRecurse(currPoint, desiredPos, wps, depth + 1) then
&#9;&#9;&#9;&#9;table.insert(wps, 1, currPoint)
&#9;&#9;&#9;&#9;if DEBUG_PATHING then
&#9;&#9;&#9;&#9;&#9;print(&quot;Adding point:&quot; , currPoint , &quot;at depth&quot; , depth)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;return true
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;return false
end


function GetWaypointToTarget(player)
&#9;local myTorso = getPlayerTorso(MyPlayer)
&#9;local theirTorso = getPlayerTorso(player)
&#9;if theirTorso and myTorso then
&#9;&#9;
&#9;end
end

function FindChargeTarget()
&#9;local players = PlayersService:GetPlayers()
&#9;table.sort(players, function(a,b)
&#9;&#9;print(a.Name , (DistanceBetweenPlayers(MyPlayer, a).magnitude &lt; DistanceBetweenPlayers(MyPlayer, b).magnitude and &quot;closer&quot; or &quot;farther&quot;) , &quot;than&quot; , b.Name)
&#9;&#9;return DistanceBetweenPlayers(MyPlayer, a).magnitude &lt; DistanceBetweenPlayers(MyPlayer, b).magnitude
&#9;end)
&#9;local smallestAngle = 10000
&#9;local bestPlayer = nil
&#9;for _, player in pairs(players) do
&#9;&#9;if MyPlayer ~= player and Attackable(MyPlayer, player) and MAX_CHARGE_RANGE &gt; DistanceBetweenPlayers(MyPlayer, player).magnitude then
&#9;&#9;&#9;--local angleOffset = math.cos(AngleFromCamera(player))
&#9;&#9;&#9;local angleOffset = 0.000001
&#9;&#9;&#9;--if angleOffset &lt; math.rad(60) then
&#9;&#9;&#9;&#9;if angleOffset &lt; smallestAngle then
&#9;&#9;&#9;&#9;&#9;smallestAngle = angleOffset
&#9;&#9;&#9;&#9;&#9;bestPlayer = player
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;--end
&#9;&#9;end
&#9;end
&#9;return bestPlayer
end

function CreateTrail(pt1, pt2)
&#9;local p = Instance.new(&apos;Part&apos;)
&#9;p.Name = &apos;Trail&apos;
&#9;p.Anchored = true
&#9;p.Transparency = 0.5
&#9;p.Size = Vector3.new(0.2,4,(pt2 - pt1).magnitude)
&#9;p.CFrame = CFrame.new((pt1 + pt2)/2, pt2)
&#9;p.TopSurface = &apos;Smooth&apos;
&#9;p.BottomSurface = &apos;Smooth&apos;
&#9;p.CanCollide = false
&#9;p.BrickColor = BrickColor.new(1, 0, 0);
&#9;p.Parent = Workspace
&#9;local cleanerClone = Cleaner:Clone()
&#9;cleanerClone.Parent = p
&#9;cleanerClone.Disabled = false
&#9;Spawn(function() local start = tick()
&#9;&#9;while p and tick() - start &lt; 2 do
&#9;&#9;&#9;p.Transparency = 0.5 + (((tick() - start) / 2))
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)
&#9;return p
end

function Charge()
&#9;if DEBUG_PATHING then
&#9;&#9;local wps = {}
&#9;&#9;local success = WaypointsRecurse(MyCharacter.Torso.CFrame.p, Vector3.new(0,6,0), wps, 0)
&#9;&#9;print(&quot;Sucess:&quot; , success , &quot;wps:&quot; , wps and #wps or wps)
&#9;&#9;if success then
&#9;&#9;&#9;for i, point in pairs(wps) do
&#9;&#9;&#9;&#9;local p = Instance.new(&apos;Part&apos;)
&#9;&#9;&#9;&#9;p.Anchored = true
&#9;&#9;&#9;&#9;p.Size = Vector3.new(1,1,1)
&#9;&#9;&#9;&#9;p.CFrame = CFrame.new(point)
&#9;&#9;&#9;&#9;p.CanCollide = false
&#9;&#9;&#9;&#9;p.BrickColor = BrickColor.new(i/#wps, i/#wps, i/#wps);
&#9;&#9;&#9;&#9;p.Parent = Workspace
&#9;&#9;&#9;&#9;DebrisService:AddItem(p, 10)
&#9;&#9;&#9;&#9;--print(&quot;Point:&quot; , i , &quot;:&quot; , point)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Was unable to find a path&quot;)
&#9;&#9;end
&#9;else
&#9;&#9;local player = FindChargeTarget()
&#9;&#9;local torso = getPlayerTorso(player)
&#9;&#9;local myHumanoid = MyCharacter and MyCharacter:FindFirstChild(&apos;Humanoid&apos;)
&#9;&#9;
&#9;&#9;--print(&quot;Found player&quot; , player , torso, myHumanoid)
&#9;&#9;if myHumanoid and myHumanoid.Health &gt; 0 and MyCharacter:FindFirstChild(&apos;Torso&apos;) and torso then
&#9;&#9;&#9;--print(&quot;Charging at&quot; , player)
&#9;&#9;&#9;local wps = {}
&#9;&#9;&#9;local success = WaypointsRecurse(MyCharacter.Torso.CFrame.p, torso.CFrame.p, wps, 0)-- torso.CFrame.p, wps, 0)
&#9;&#9;&#9;if success then
&#9;&#9;&#9;&#9;local start = tick()
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;ChargeVelocity.maxForce = Vector3.new(10000000,100000,10000000);
&#9;&#9;&#9;&#9;for i, waypoint in pairs(wps) do
&#9;&#9;&#9;&#9;&#9;while MyCharacter:FindFirstChild(&apos;Torso&apos;) and (waypoint - MyCharacter.Torso.CFrame.p).magnitude &gt; 5 and tick() - start &lt; 6 do
&#9;&#9;&#9;&#9;&#9;&#9;if ChargeVelocity and MyCharacter.Torso then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;ChargeVelocity.velocity = (waypoint - MyCharacter.Torso.CFrame.p).unit * 150
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--MyCharacter.Torso.CFrame = CFrame.new(MyCharacter.Torso.CFrame.p, waypoint)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;wait(1/30)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if i &gt; 1 then
&#9;&#9;&#9;&#9;&#9;&#9;local trail = CreateTrail(wps[i-1], wps[i])
&#9;&#9;&#9;&#9;&#9;&#9;DebrisService:AddItem(trail, 2)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;ChargeVelocity.velocity = Vector3.new(0,0,0);
&#9;&#9;&#9;&#9;delay(0.1, function()
&#9;&#9;&#9;&#9;&#9;ChargeVelocity.maxForce = Vector3.new(0,0,0);
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;if torso and torso.Parent then
&#9;&#9;&#9;&#9;&#9;&#9;local humanoid = torso.Parent:FindFirstChild(&apos;Humanoid&apos;)
&#9;&#9;&#9;&#9;&#9;&#9;if myHumanoid and humanoid and myHumanoid.Health &gt; 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local hitBindable = humanoid:FindFirstChild(&apos;Hit&apos;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if hitBindable and CreatorTag then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Doing charge damage from&quot;, CreatorTag.Value , &quot;is a player&quot; , CreatorTag.Value:IsA(&apos;Player&apos;) , &quot;to&quot; , humanoid.Parent.Name)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;hitBindable:Invoke(50, CreatorTag:Clone())
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Could not find BindableFunction &apos;Hit&apos;&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;humanoid:TakeDamage(CHARGE_DAMAGE)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;wait(math.max(0, 10 - (tick() - start)))
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

local function GetHead()
&#9;return MyCharacter and MyCharacter:FindFirstChild(&apos;Head&apos;)
end

local function RemoveHorns()
&#9;if Horns then
&#9;&#9;Horns:Destroy()
&#9;&#9;Horns = nil
&#9;end
end

local function GrowHorns()
&#9;RemoveHorns()
&#9;Horns = Instance.new(&apos;Part&apos;)
&#9;Horns.FormFactor = &apos;Custom&apos;
&#9;Horns.Size = Vector3.new(2,2,2)
&#9;Horns.CanCollide = false
&#9;Horns.TopSurface = &apos;Smooth&apos;
&#9;Horns.BottomSurface = &apos;Smooth&apos;
&#9;Horns.Name = &quot;Horns&quot;
&#9;
&#9;local mesh = Instance.new(&apos;SpecialMesh&apos;)
&#9;mesh.MeshId = &apos;http://www.roblox.com/asset/?id=138330146&apos;
&#9;mesh.TextureId = &apos;http://www.roblox.com/asset/?id=138330253&apos;
&#9;mesh.Parent = Horns
&#9;
&#9;local weld = Instance.new(&apos;Weld&apos;)
&#9;weld.Part0 = Horns
&#9;weld.Part1 = GetHead()
&#9;weld.C0 = CFrame.new(0, -0.6, 1)
&#9;weld.Parent = Horns
&#9;
&#9;Horns.Parent = MyCharacter
end



function OnActivated()
&#9;if not Tool.Enabled then return end
&#9;Tool.Enabled = false
&#9;Charge()
&#9;--[[
&#9;if Gui then
&#9;&#9;local container = Gui:FindFirstChild(&apos;Container&apos;)
&#9;&#9;if container then
&#9;&#9;&#9;container.Visible = true
&#9;&#9;&#9;wait(10)
&#9;&#9;&#9;container.Visible = false
&#9;&#9;end
&#9;end
&#9;--]]
&#9;Tool.Enabled = true
end

function OnEquipped(mouse)
&#9;MyCharacter = Tool.Parent
&#9;MyPlayer = MyCharacter and PlayersService:GetPlayerFromCharacter(MyCharacter)
&#9;if MyPlayer then
&#9;&#9;PlayerGui = MyPlayer:FindFirstChild(&apos;PlayerGui&apos;)
&#9;&#9;if PlayerGui then
&#9;&#9;&#9;Gui = GuiTemplate:Clone()
&#9;&#9;&#9;Gui.Parent = PlayerGui
&#9;&#9;end
&#9;&#9;CreatorTag.Value = MyPlayer
&#9;end
&#9;delay(0.1, function()
&#9;&#9;ChargeVelocity = Instance.new(&apos;BodyVelocity&apos;)
&#9;&#9;ChargeVelocity.velocity = Vector3.new()
&#9;&#9;ChargeVelocity.maxForce = Vector3.new(0,0,0);
&#9;&#9;ChargeVelocity.P = 100000000
&#9;&#9;ChargeVelocity.Name = &apos;ChargeVelocity&apos;
&#9;&#9;ChargeVelocity.Parent = MyCharacter:FindFirstChild(&apos;Torso&apos;)
&#9;end)
&#9;delay(0.1, GrowHorns)
end

function OnUnequipped()
&#9;if Gui then
&#9;&#9;Gui:Destroy()&#9;
&#9;end
&#9;delay(0.1, function()
&#9;&#9;if ChargeVelocity then
&#9;&#9;&#9;ChargeVelocity:Destroy()
&#9;&#9;end
&#9;end)
&#9;Tool.Enabled = true
&#9;delay(0.1, RemoveHorns)
end


Tool.Activated:connect(OnActivated)
Tool.Equipped:connect(OnEquipped)
Tool.Unequipped:connect(OnUnequipped)
</ProtectedString>
			</Properties>
			<Item class="Script" referent="RBX6">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Cleaner</string>
					<ProtectedString name="Source">local Debris = Game:GetService(&apos;Debris&apos;)
local DebrisItem = script.Parent
Debris:AddItem(DebrisItem, 5)</ProtectedString>
				</Properties>
			</Item>
			<Item class="ScreenGui" referent="RBX7">
				<Properties>
					<string name="Name">ReleaseGui</string>
				</Properties>
				<Item class="Frame" referent="RBX8">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4294967295</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">true</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Container</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-360</XO>
							<YS>0.5</YS>
							<YO>-120</YO>
						</UDim2>
						<float name="Rotation">0</float>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>720</XO>
							<YS>0</YS>
							<YO>240</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">3</token>
						<bool name="Visible">false</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX9">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<token name="FontSize">8</token>
							<string name="Name">Prompt</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>25</XO>
								<YS>0</YS>
								<YO>25</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-50</XO>
								<YS>1</YS>
								<YO>-50</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">This egg will hatch on December 20th and give you a special in game power! Be sure to catch Walking with Dinosaurs, In theaters December 20th!</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>