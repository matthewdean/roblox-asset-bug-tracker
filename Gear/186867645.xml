<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXDC9E56B7CCE34C8BB21056718C8BD7CC">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>0.100000001</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">TabletOfAkmenrah</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset?id=186495170</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBXB42E9A5D16A34830B6F729AB3DA967A9">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>17.3999996</Y>
					<Z>22</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1.75</X>
					<Y>2.25</Y>
					<Z>0.25</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBXEC37BFD437994F8095216973A04396A8">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=186495142</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>0.0500000007</X>
						<Y>0.0500000007</Y>
						<Z>0.0500000007</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=186495164</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sparkles" referent="RBX0B73AABAAD1F452C9D7611B121635E28">
				<Properties>
					<bool name="Enabled">false</bool>
					<string name="Name">Sparkles</string>
					<Color3 name="SparkleColor">4289374720</Color3>
				</Properties>
			</Item>
			<Item class="PointLight" referent="RBX3403CDBDB71A4360AD7F75CFE9E6C20D">
				<Properties>
					<float name="Brightness">50</float>
					<Color3 name="Color">4289374720</Color3>
					<bool name="Enabled">false</bool>
					<string name="Name">PointLight</string>
					<float name="Range">8</float>
					<bool name="Shadows">false</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX56770C994DF7466F9A412A319E3B9BC7">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
ContentProvider = game:GetService(&quot;ContentProvider&quot;)

Camera = game:GetService(&quot;Workspace&quot;).CurrentCamera

Animations = {}

ServerControl = Tool:WaitForChild(&quot;ServerControl&quot;)
ClientControl = Tool:WaitForChild(&quot;ClientControl&quot;)

ClientControl.OnClientInvoke = (function(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; and Humanoid then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local AnimationTrack = Humanoid:LoadAnimation(Value.Animation)
&#9;&#9;table.insert(Animations, {Animation = Value.Animation, AnimationTrack = AnimationTrack})
&#9;&#9;AnimationTrack:Play(Value.FadeTime, Value.Weight, Value.Speed)
&#9;elseif Mode == &quot;StopAnimation&quot; and Value then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif Mode == &quot;Preload&quot; and Value then
&#9;&#9;ContentProvider:Preload(Value)
&#9;elseif Mode == &quot;PlaySound&quot; and Value then
&#9;&#9;Value:Play()
&#9;elseif Mode == &quot;StopSound&quot; and Value then
&#9;&#9;Value:Stop()
&#9;elseif Mode == &quot;MousePosition&quot; then
&#9;&#9;return PlayerMouse.Hit.p
&#9;elseif Mode == &quot;DisableJump&quot; then
&#9;&#9;DisableJump(Value)
&#9;elseif Mode == &quot;SetCamera&quot; and Value then
&#9;&#9;if Value.Subject and Value.Type then
&#9;&#9;&#9;Camera.CameraSubject = Value.Subject
&#9;&#9;&#9;Camera.CameraType = Value.Type
&#9;&#9;end
&#9;end
end)

function InvokeServer(Mode, Value)
&#9;local ServerReturn = nil
&#9;pcall(function()
&#9;&#9;ServerReturn = ServerControl:InvokeServer(Mode, Value)
&#9;end)
&#9;return ServerReturn
end

function DisableJump(Boolean)
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;if Boolean then
&#9;&#9;PreventJump = Humanoid.Changed:connect(function(Property)
&#9;&#9;&#9;if Property ==  &quot;Jump&quot; then
&#9;&#9;&#9;&#9;Humanoid.Jump = false
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped(Mouse)
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;PlayerMouse = Player:GetMouse()
&#9;Mouse.Button1Down:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = true})
&#9;end)
&#9;Mouse.Button1Up:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = false})
&#9;end)
&#9;Mouse.KeyDown:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = true})
&#9;end)
&#9;Mouse.KeyUp:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = false})
&#9;end)
end

function Unequipped()
&#9;for i, v in pairs(Animations) do
&#9;&#9;if v and v.AnimationTrack then
&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;end
&#9;end
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;Animations = {}
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX6ACB796913064085A8B0094ADF7E219B">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)
Sparkles = Handle:WaitForChild(&quot;Sparkles&quot;)
PointLight = Handle:WaitForChild(&quot;PointLight&quot;)

Players = game:GetService(&quot;Players&quot;)
Debris = game:GetService(&quot;Debris&quot;)

Animations = {
&#9;Activate = {Animation = Tool:WaitForChild(&quot;Activate&quot;), FadeTime = nil, Weight = nil, Speed = nil, Duration = 2}
}

Sounds = {}

ToolEquipped = false
AttemptingActivation = false

Duration = 30

DefaultColor = BrickColor.new(&quot;Lime green&quot;).Color

ClientControl = (Tool:FindFirstChild(&quot;ClientControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ClientControl.Name = &quot;ClientControl&quot;
ClientControl.Parent = Tool

ServerControl = (Tool:FindFirstChild(&quot;ServerControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ServerControl.Name = &quot;ServerControl&quot;
ServerControl.Parent = Tool

ServerControl.OnServerInvoke = (function(player, Mode, Value)
&#9;if Mode == &quot;KeyPress&quot; and Value then
&#9;&#9;local Key = string.lower(Value.Key)
&#9;&#9;local ByteKey = string.byte(Key)
&#9;&#9;local Down = Value.Down
&#9;end
end)

Sparkles.Enabled = false
PointLight.Enabled = false
Tool.Enabled = true

function InvokeClient(Mode, Value)
&#9;local ClientReturn = nil
&#9;pcall(function()
&#9;&#9;ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
&#9;end)
&#9;return ClientReturn
end

function CheckTableForString(Table, String)
&#9;for i, v in pairs(Table) do
&#9;&#9;if string.lower(v) == string.lower(String) then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false
end

function GetAllObjects(Parent)
&#9;local Objects = {}
&#9;local function GetObjects(Parent)
&#9;&#9;for i, v in pairs(Parent:GetChildren()) do
&#9;&#9;&#9;table.insert(Objects, v)
&#9;&#9;&#9;GetObjects(v)
&#9;&#9;end
&#9;end
&#9;GetObjects(Parent)
&#9;return Objects
end

function GlowPart(Object)
&#9;local Part, Weld, Meshes, Sparkles, Light = nil, nil, {}, nil, nil
&#9;local Parts = {&quot;Head&quot;, &quot;HumanoidRootPart&quot;}
&#9;if Object.Parent ~= Tool and not Object.Parent:IsA(&quot;Tool&quot;) and Object.Parent.Name ~= &quot;GlowingModel&quot; then
&#9;&#9;if Object:IsA(&quot;JointInstance&quot;) and Object.Name == &quot;GlowWeld&quot; then
&#9;&#9;&#9;Object:Destroy()
&#9;&#9;elseif Object:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;Part = Object:Clone()
&#9;&#9;&#9;Part.Name = &quot;GlowingPart&quot;
&#9;&#9;&#9;Part.Transparency = 0.5
&#9;&#9;&#9;Part.Material = Enum.Material.Plastic
&#9;&#9;&#9;Part.CanCollide = false
&#9;&#9;&#9;Part.Locked = true
&#9;&#9;&#9;Part.Anchored = false
&#9;&#9;&#9;Light = Instance.new(&quot;PointLight&quot;)
&#9;&#9;&#9;Light.Brightness = 50
&#9;&#9;&#9;Light.Range = 6
&#9;&#9;&#9;Light.Shadows = false
&#9;&#9;&#9;Light.Enabled = false
&#9;&#9;&#9;local Surfaces = {Enum.NormalId.Top, Enum.NormalId.Bottom, Enum.NormalId.Front, Enum.NormalId.Back, Enum.NormalId.Left, Enum.NormalId.Right}
&#9;&#9;&#9;for i, v in pairs(Surfaces) do
&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;Part[Object.Name .. &quot;Surface&quot;] = Enum.SurfaceType.Smooth
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;&#9;Part.FormFactor = Enum.FormFactor.Custom
&#9;&#9;&#9;Part.Size = Vector3.new(0.2, 0.2, 0.2)
&#9;&#9;&#9;Weld = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;Weld.Name = &quot;GlowWeld&quot;
&#9;&#9;&#9;Weld.Part0 = Object
&#9;&#9;&#9;Weld.Part1 = Part
&#9;&#9;&#9;Weld.C0 = CFrame.new(0, 0, 0)
&#9;&#9;&#9;local PartUsable = false
&#9;&#9;&#9;if not CheckTableForString(Parts, Object.Name) then
&#9;&#9;&#9;&#9;if Object.Name == &quot;Torso&quot; then
&#9;&#9;&#9;&#9;&#9;Sparkles = Instance.new(&quot;Sparkles&quot;)
&#9;&#9;&#9;&#9;&#9;Sparkles.Enabled = false
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;local HasCharacterMesh = false
&#9;&#9;&#9;&#9;for ii, vv in pairs(Object.Parent:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if vv:IsA(&quot;CharacterMesh&quot;) and vv.BodyPart.Name == string.gsub(Object.Name, &quot; &quot;, &quot;&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Weld.C0 = CFrame.new(0, 0.075, 0)
&#9;&#9;&#9;&#9;&#9;&#9;Mesh = Instance.new(&quot;SpecialMesh&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.MeshType = Enum.MeshType.FileMesh
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.MeshId = (&quot;http://www.roblox.com/asset?id=&quot; .. vv.MeshId)
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.TextureId = &quot;null&quot;
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.Scale = Vector3.new(1.1, 1.1, 1.1)
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.Parent = Part
&#9;&#9;&#9;&#9;&#9;&#9;table.insert(Meshes, Mesh)
&#9;&#9;&#9;&#9;&#9;&#9;PartUsable = true
&#9;&#9;&#9;&#9;&#9;&#9;HasCharacterMesh = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if not HasCharacterMesh then
&#9;&#9;&#9;&#9;&#9;if Object.Parent and Object.Parent:IsA(&quot;Hat&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;for ii, vv in pairs(Part:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if vv:IsA(&quot;DataModelMesh&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;vv.Scale = Vector3.new((vv.Scale.X + 0.05), (vv.Scale.Y + 0.05), (vv.Scale.Z + 0.05))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if vv.MeshType == Enum.MeshType.FileMesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;vv.TextureId = &quot;http://www.roblox.com/asset?id=&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;table.insert(Meshes, vv)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;PartUsable = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;local Mesh = Instance.new(&quot;SpecialMesh&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.MeshType = Enum.MeshType.FileMesh
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.MeshId = &quot;http://www.roblox.com/Asset/?id=9856898&quot;
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.TextureId = &quot;http://www.roblox.com/asset/?ID=1361097&quot;
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.Scale = ((Object.Size * 2) + Vector3.new(0.1, 0.1, 0.1))
&#9;&#9;&#9;&#9;&#9;&#9;Mesh.Parent = Part
&#9;&#9;&#9;&#9;&#9;&#9;table.insert(Meshes, Mesh)
&#9;&#9;&#9;&#9;&#9;&#9;PartUsable = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif Object.Name == &quot;Head&quot; then
&#9;&#9;&#9;&#9;for ii, vv in pairs(Part:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if vv:IsA(&quot;DataModelMesh&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;if vv.MeshType == Enum.MeshType.FileMesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;vv.TextureId = &quot;http://www.roblox.com/asset?id=&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;vv.Scale = Vector3.new((vv.Scale.X + 0.1), (vv.Scale.Y + 0.1), (vv.Scale.Z + 0.1))
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;vv.Scale = ((vv.Scale + Vector3.new(0.1, 0.1, 0.1)) * 5)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;table.insert(Meshes, vv)
&#9;&#9;&#9;&#9;&#9;&#9;PartUsable = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end&#9;
&#9;return ((Part and Weld and {Object = Object, Part = Part, Weld = Weld, Meshes = Meshes, Sparkles = Sparkles, Light = Light}) or nil)
end

function Glow(character, Color)
&#9;if character == Tool then
&#9;&#9;return
&#9;end
&#9;
&#9;GlowingModel = Instance.new(&quot;Model&quot;)
&#9;GlowingModel.Name = &quot;GlowingModel&quot;
&#9;
&#9;if GlowingModel and GlowingModel.Parent then
&#9;&#9;GlowingModel:Destroy()
&#9;end
&#9;
&#9;for i, v in pairs(character:GetChildren()) do
&#9;&#9;if v.Name == GlowingModel.Name then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs({ObjectAdded, ObjectRemoved}) do
&#9;&#9;if v then
&#9;&#9;&#9;v:disconnect()
&#9;&#9;end
&#9;end
&#9;
&#9;local GlowData = {}
&#9;
&#9;local function SetUpGlow(Table)
&#9;&#9;Table.Part.BrickColor = BrickColor.new(Color)
&#9;&#9;for ii, vv in pairs(Table.Part:GetChildren()) do
&#9;&#9;&#9;if not vv:IsA(&quot;DataModelMesh&quot;) then
&#9;&#9;&#9;&#9;vv:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for ii, vv in pairs({Table.Sparkles, Table.Light}) do
&#9;&#9;&#9;if vv then
&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;vv[((vv:IsA(&quot;Sparkles&quot;) and &quot;SparkleColor&quot;) or (vv:IsA(&quot;Light&quot;) and &quot;Color&quot;))] = Color
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;vv.Enabled = true
&#9;&#9;&#9;&#9;vv.Parent = Table.Part
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for ii, vv in pairs(Table.Meshes) do
&#9;&#9;&#9;if vv:IsA(&quot;DataModelMesh&quot;) then
&#9;&#9;&#9;&#9;vv.VertexColor = Vector3.new(Color.r, Color.g, Color.b)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Table.Weld.Parent = Table.Part
&#9;&#9;Table.Part.Parent = GlowingModel
&#9;end
&#9;
&#9;local function GlowParts(Parent)
&#9;&#9;for i, v in pairs(Parent:GetChildren()) do
&#9;&#9;&#9;local GlowTable = GlowPart(v)
&#9;&#9;&#9;if GlowTable then
&#9;&#9;&#9;&#9;local ObjectAlreadyUsed = false
&#9;&#9;&#9;&#9;for ii, vv in pairs(GlowData) do
&#9;&#9;&#9;&#9;&#9;if vv.Object and vv.Object and vv.Object == GlowTable.Object then
&#9;&#9;&#9;&#9;&#9;&#9;ObjectAlreadyUsed = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if not ObjectAlreadyUsed then
&#9;&#9;&#9;&#9;&#9;SetUpGlow(GlowTable)
&#9;&#9;&#9;&#9;&#9;table.insert(GlowData, GlowTable)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;GlowParts(v)
&#9;&#9;end
&#9;end

&#9;GlowParts(character)
&#9;if Players:GetPlayerFromCharacter(character) then
&#9;&#9;Debris:AddItem(GlowingModel, Duration)
&#9;&#9;GlowingModel.Parent = character
&#9;&#9;
&#9;&#9;ObjectAdded = character.ChildAdded:connect(function(Child)
&#9;&#9;&#9;if Child == Tool then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;wait()
&#9;&#9;&#9;if not Child or not Child.Parent or Child.Name == GlowingModel.Name then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;GlowParts(Child)
&#9;&#9;end)
&#9;&#9;
&#9;&#9;ObjectRemoved = character.ChildRemoved:connect(function(Child)
&#9;&#9;&#9;if Child == Tool then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;wait()
&#9;&#9;&#9;if not Child or not Child.Parent or Child.Name == GlowingModel.Name then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;local Objects = GetAllObjects(Child)
&#9;&#9;&#9;for i, v in pairs(Objects) do
&#9;&#9;&#9;&#9;for ii, vv in pairs(GlowData) do
&#9;&#9;&#9;&#9;&#9;if v == vv.Object then
&#9;&#9;&#9;&#9;&#9;&#9;if vv.Part and vv.Part.Parent then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;vv.Part:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;table.remove(GlowData, ii)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;
&#9;&#9;Spawn(function()
&#9;&#9;&#9;local VertexColor = Color
&#9;&#9;&#9;while GlowingModel and GlowingModel.Parent do
&#9;&#9;&#9;&#9;for i = 1, 20 do
&#9;&#9;&#9;&#9;&#9;local Interval = (0.05 * ((i &lt; 11 and 1) or -1))
&#9;&#9;&#9;&#9;&#9;VertexColor = Color3.new((VertexColor.r + Interval), VertexColor.g, VertexColor.b)
&#9;&#9;&#9;&#9;&#9;for ii, vv in pairs(GlowData) do
&#9;&#9;&#9;&#9;&#9;&#9;for iii, vvv in pairs(vv.Meshes) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if vvv:IsA(&quot;DataModelMesh&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;vvv.VertexColor = Vector3.new(VertexColor.r, VertexColor.g, VertexColor.b)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;if vv.Sparkles and vv.Sparkles.Parent then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;vv.Sparkles.SparkleColor = Color3.new(VertexColor.r, VertexColor.g, VertexColor.b)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;for i, v in pairs({ObjectAdded, ObjectRemoved}) do
&#9;&#9;&#9;&#9;if v then
&#9;&#9;&#9;&#9;&#9;v:disconnect()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;end)
&#9;&#9;
&#9;end
&#9;
&#9;return GlowingModel
end

function Activated()
&#9;if not Tool.Enabled or AttemptingActivation or not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;AttemptingActivation = true
&#9;local Animation = Animations.Activate
&#9;InvokeClient(&quot;PlayAnimation&quot;, Animation)
&#9;Sparkles.Enabled = true
&#9;PointLight.Enabled = true
&#9;local CurrentlyEquipped = true
&#9;if ToolUnequipped then
&#9;&#9;ToolUnequipped:disconnect()
&#9;end
&#9;ToolUnequipped = Tool.Unequipped:connect(function()
&#9;&#9;CurrentlyEquipped = false
&#9;end)
&#9;wait(Animation.Duration)
&#9;if not CurrentlyEquipped then
&#9;&#9;return
&#9;end
&#9;Tool.Enabled = false
&#9;AttemptingActivation = false
&#9;Sparkles.Enabled = false
&#9;PointLight.Enabled = false
&#9;local humanoid = Humanoid --Prevents glitching if the tool is dropped.
&#9;humanoid.WalkSpeed = 24
&#9;Spawn(function()
&#9;&#9;Color = ((ColorBox and ColorBox.Parent and ColorBox.BackgroundColor3) or DefaultColor)
&#9;&#9;Glow(Character, Color)
&#9;end)
&#9;wait(Duration)
&#9;if GlowingModel and GlowingModel.Parent then
&#9;&#9;GlowingModel:Destroy()
&#9;end
&#9;humanoid.WalkSpeed = 16
&#9;wait((Duration / 2))
&#9;Tool.Enabled = true
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped(Mouse)
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;PlayerGui = Player:FindFirstChild(&quot;PlayerGui&quot;)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;if PlayerGui then
&#9;&#9;Spawn(function()
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;if ColorGui and ColorGui.Parent then
&#9;&#9;&#9;&#9;&#9;ColorGui:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;local CurrentlyEquipped = true
&#9;&#9;&#9;&#9;if EquippedToolUnequipped then
&#9;&#9;&#9;&#9;&#9;EquippedToolUnequipped:disconnect()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;EquippedToolUnequipped = Tool.Unequipped:connect(function()
&#9;&#9;&#9;&#9;&#9;CurrentlyEquipped = false
&#9;&#9;&#9;&#9;&#9;if ColorGui and ColorGui.Parent then
&#9;&#9;&#9;&#9;&#9;&#9;ColorGui:Destroy()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;local Module = require(187430232)
&#9;&#9;&#9;&#9;local PlayerReturnTable = Module.GetTable({Key = &quot;NATMTablet&quot;, Player = Player})
&#9;&#9;&#9;&#9;if ToolEquipped and CurrentlyEquipped and PlayerReturnTable then
&#9;&#9;&#9;&#9;&#9;ColorGui = PlayerReturnTable.ColorGui(DefaultColor)
&#9;&#9;&#9;&#9;&#9;ColorBox = ColorGui:FindFirstChild(&quot;Frame&quot;):FindFirstChild(&quot;Border&quot;):FindFirstChild(&quot;ColorBox&quot;)
&#9;&#9;&#9;&#9;&#9;if ToolEquipped and CurrentlyEquipped then
&#9;&#9;&#9;&#9;&#9;&#9;ColorGui.Parent = PlayerGui
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;end)
&#9;end
&#9;ToolEquipped = true
end

function Unequipped()
&#9;AttemptingActivation = false
&#9;Sparkles.Enabled = false
&#9;PointLight.Enabled = false
&#9;for i, v in pairs({EquippedToolUnequipped, ToolUnequipped}) do
&#9;&#9;if v then
&#9;&#9;&#9;v:disconnect()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs(Sounds) do
&#9;&#9;InvokeClient(&quot;StopSound&quot;, v)
&#9;&#9;v:Stop()
&#9;end
&#9;for i, v in pairs(Animations) do
&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, v)
&#9;end
&#9;if ColorGui and ColorGui.Parent then
--&#9;&#9;ColorGui:Destroy()
&#9;end
&#9;ToolEquipped = false
end

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX604FBC43CC5D422C994927D9C831A12D">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset?id=186673959</url></Content>
				<string name="Name">Activate</string>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX89C4858143E24797AEB703B3E7E3E937">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Mouse_Icon = &quot;rbxasset://textures/GunCursor.png&quot;
Reloading_Icon = &quot;rbxasset://textures/GunWaitCursor.png&quot;

Tool = script.Parent

Mouse = nil

function UpdateIcon()
&#9;if Mouse then
&#9;&#9;Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
&#9;end
end

function OnEquipped(ToolMouse)
&#9;Mouse = ToolMouse
&#9;UpdateIcon()
end

function OnChanged(Property)
&#9;if Property == &quot;Enabled&quot; then
&#9;&#9;UpdateIcon()
&#9;end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX2F0D7CDA20B94E16A3C3CE5E6683AE31">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-0.0106637962</X>
					<Y>17.5349922</Y>
					<Z>20.1502266</Z>
					<R00>-0.999975502</R00>
					<R01>0.000309309398</R01>
					<R02>-0.00699036289</R02>
					<R10>-2.91038305e-011</R10>
					<R11>0.999022484</R11>
					<R12>0.0442047268</R12>
					<R20>0.00699720252</R20>
					<R21>0.0442036428</R21>
					<R22>-0.998998046</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>0.00331692491</X>
					<Y>17.4465828</Y>
					<Z>22.148222</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>