<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX40F10426F7E7430A9C816B37A0DB941E">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>4</X>
				<Y>2.375</Y>
				<Z>-1</Z>
				<R00>0.969680786</R00>
				<R01>-0</R01>
				<R02>0.244375199</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>-0.244375199</R20>
				<R21>0</R21>
				<R22>0.969680786</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">DeployableSnowPlow</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset?id=189741841</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBXBE076218889E4F34BA608C4A007584E5">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>57.0889664</X>
					<Y>1.18906868</Y>
					<Z>121.494621</Z>
					<R00>0.99582839</R00>
					<R01>-0.0080556944</R01>
					<R02>0.0908895731</R02>
					<R10>0.00593693089</R10>
					<R11>0.999704838</R11>
					<R12>0.0235577412</R12>
					<R20>-0.0910525173</R20>
					<R21>-0.0229198616</R21>
					<R22>0.995582283</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2.625</X>
					<Y>2.25</Y>
					<Z>4.875</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX644C84A9BC85481FB3C0206E8A7B9F7B">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset?id=189741802</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.5</X>
						<Y>1.5</Y>
						<Z>1.5</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset?id=189741825</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX93C38E67B5BF41E09F2A6F056346A0D8">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
ContentProvider = game:GetService(&quot;ContentProvider&quot;)
RunService = game:GetService(&quot;RunService&quot;)

Camera = game:GetService(&quot;Workspace&quot;).CurrentCamera

Animations = {}
LocalObjects = {}

ServerControl = Tool:WaitForChild(&quot;ServerControl&quot;)
ClientControl = Tool:WaitForChild(&quot;ClientControl&quot;)

ToolEquipped = false

ClientControl.OnClientInvoke = (function(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; and Value and ToolEquipped and Humanoid then
&#9;&#9;SetAnimation(&quot;PlayAnimation&quot;, Value)
&#9;elseif Mode == &quot;StopAnimation&quot; and Value then
&#9;&#9;SetAnimation(&quot;StopAnimation&quot;, Value)
&#9;elseif Mode == &quot;Preload&quot; and Value then
&#9;&#9;ContentProvider:Preload(Value)
&#9;elseif Mode == &quot;PlaySound&quot; and Value then
&#9;&#9;Value:Play()
&#9;elseif Mode == &quot;StopSound&quot; and Value then
&#9;&#9;Value:Stop()
&#9;elseif Mode == &quot;MousePosition&quot; then
&#9;&#9;return PlayerMouse.Hit.p
&#9;elseif Mode == &quot;DisableJump&quot; then
&#9;&#9;DisableJump(Value)
&#9;elseif Mode == &quot;SetMouseIcon&quot; and Value then
&#9;&#9;PlayerMouse.Icon = Value
&#9;elseif Mode == &quot;SetLocalTransparencyModifier&quot; and Value and ToolEquipped then
&#9;&#9;pcall(function()
&#9;&#9;&#9;local ObjectFound = false
&#9;&#9;&#9;for i, v in pairs(LocalObjects) do
&#9;&#9;&#9;&#9;if v == Value then
&#9;&#9;&#9;&#9;&#9;ObjectFound = true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if not ObjectFound then
&#9;&#9;&#9;&#9;table.insert(LocalObjects, Value)
&#9;&#9;&#9;&#9;if ObjectLocalTransparencyModifier then
&#9;&#9;&#9;&#9;&#9;ObjectLocalTransparencyModifier:disconnect()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;ObjectLocalTransparencyModifier = RunService.RenderStepped:connect(function()
&#9;&#9;&#9;&#9;&#9;for i, v in pairs(LocalObjects) do
&#9;&#9;&#9;&#9;&#9;&#9;if v.Object and v.Object.Parent and ((not v.AutoUpdate and (v.Object.LocalTransparencyModifier == 1 or  v.Object.LocalTransparencyModifier == 0)) or v.AutoUpdate) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Object.LocalTransparencyModifier = v.Transparency
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;elseif Mode == &quot;GetCamera&quot; and Value then
&#9;&#9;local PropertyValue = nil
&#9;&#9;if Value.Property then
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;PropertyValue = Camera[Value.Property]
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;&#9;return PropertyValue
&#9;elseif Mode == &quot;SetCamera&quot; and Value then
&#9;&#9;if Value.Property and Value.Value then
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;Camera[Value.Property] = Value.Value
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;elseif Mode == &quot;SetMouseSensitivity&quot; and Value then
&#9;&#9;if Value.Sensitivity == 1 then
&#9;&#9;&#9;if MouseSensivityConnection then
&#9;&#9;&#9;&#9;MouseSensivityConnection:disconnect()
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;SetMouseSensitivity(Value.Sensitivity)
&#9;&#9;end
&#9;end
end)

function InvokeServer(Mode, Value)
&#9;pcall(function()
&#9;&#9;local ServerReturn = ServerControl:InvokeServer(Mode, Value)
&#9;&#9;return ServerReturn
&#9;end)
end

function SetAnimation(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; and Value and ToolEquipped and Humanoid then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local AnimationTrack = Humanoid:LoadAnimation(Value.Animation)
&#9;&#9;table.insert(Animations, {Animation = Value.Animation, AnimationTrack = AnimationTrack})
&#9;&#9;AnimationTrack:Play(Value.FadeTime, Value.Weight, Value.Speed)
&#9;elseif Mode == &quot;StopAnimation&quot; and Value then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function DisableJump(Boolean)
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;if Boolean then
&#9;&#9;PreventJump = Humanoid.Changed:connect(function(Property)
&#9;&#9;&#9;if Property ==  &quot;Jump&quot; then
&#9;&#9;&#9;&#9;Humanoid.Jump = false
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

function SetMouseSensitivity(Sensitivity)

&#9;if MouseSensivityConnection then
&#9;&#9;MouseSensivityConnection:disconnect()
&#9;end&#9;
&#9;
&#9;local function EulerAnglesYX(cframe)
&#9;&#9;local X, Y, Z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = cframe:components(cframe)
&#9;&#9;return -math.asin(R12), ((math.abs(R12) &gt; 0.99999 and -math.atan2(-R20, R00)) or -math.atan2(-R02, R22))
&#9;end
&#9;
&#9;local DirectionX, DirectionY = EulerAnglesYX(Camera.CoordinateFrame)
&#9;
&#9;local function UpdateSensitivity()
&#9;&#9;local CFrameX, CFrameY = EulerAnglesYX(Camera.CoordinateFrame)
&#9;&#9;DirectionX = (DirectionX * (1 - Sensitivity) + (CFrameX + (math.pi * 2) * math.floor((DirectionX - CFrameX) / (math.pi * 2) + 0.5)) * Sensitivity)
&#9;&#9;DirectionY = (DirectionY * (1 - Sensitivity) + (CFrameY + (math.pi * 2) * math.floor((DirectionY - CFrameY) / (math.pi * 2) + 0.5)) * Sensitivity)
&#9;&#9;Camera.CoordinateFrame = CFrame.Angles(0, DirectionY, 0) * CFrame.Angles(DirectionX, 0, 0) * CFrame.new(0, 0, 0.5) + Camera.Focus.p
&#9;end
&#9;
&#9;MouseSensivityConnection = RunService.RenderStepped:connect(UpdateSensitivity)
&#9;
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped(Mouse)
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;ToolEquipped = true
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;PlayerMouse = Player:GetMouse()
&#9;Mouse.Button1Down:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = true, Target = PlayerMouse.Target})
&#9;end)
&#9;Mouse.KeyDown:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = true})
&#9;end)
&#9;Mouse.KeyUp:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = false})
&#9;end)
&#9;Mouse.WheelForward:connect(function()
&#9;&#9;InvokeServer(&quot;WheelMoved&quot;, {Forward = true})
&#9;end)
&#9;Mouse.WheelBackward:connect(function()
&#9;&#9;InvokeServer(&quot;WheelMoved&quot;, {Forward = false})
&#9;end)
end

function Unequipped()
&#9;ToolEquipped = false
&#9;LocalObjects = {}
&#9;for i, v in pairs(Animations) do
&#9;&#9;if v and v.AnimationTrack then
&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs({PreventJump, MouseSensivityConnection, ObjectLocalTransparencyModifier}) do
&#9;&#9;if v then
&#9;&#9;&#9;v:disconnect()
&#9;&#9;end
&#9;end
&#9;PlayerMouse.Icon = &quot;&quot;
&#9;Animations = {}
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBXB71DF7A08D3044E8A6C03C4F3E5FE853">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
Debris = game:GetService(&quot;Debris&quot;)
InsertService = game:GetService(&quot;InsertService&quot;)

Movement = script:WaitForChild(&quot;Movement&quot;)
Remover = script:WaitForChild(&quot;Remover&quot;)

DeployableSnowPlowModel = InsertService:LoadAsset(189802551)
DeployableSnowPlow = DeployableSnowPlowModel:GetChildren()[1]:Clone()
if DeployableSnowPlowModel and DeployableSnowPlowModel.Parent then
&#9;DeployableSnowPlowModel:Destroy()
end

ClientControl = (Tool:FindFirstChild(&quot;ClientControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ClientControl.Name = &quot;ClientControl&quot;
ClientControl.Parent = Tool

ServerControl = (Tool:FindFirstChild(&quot;ServerControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ServerControl.Name = &quot;ServerControl&quot;
ServerControl.Parent = Tool

Handle.Transparency = 0
Tool.Enabled = true

ServerControl.OnServerInvoke = (function(Player, Mode, Value)
&#9;if Mode == &quot;MouseClick&quot; and CheckIfAlive() then
&#9;&#9;local Down = Value.Down
&#9;&#9;local Target = Value.Target
&#9;&#9;if TargetValue and TargetValue.Parent then
&#9;&#9;&#9;if Down and Target and Target.Parent then
&#9;&#9;&#9;&#9;local character = Target.Parent
&#9;&#9;&#9;&#9;local humanoid = character:FindFirstChild(&quot;Humanoid&quot;)
&#9;&#9;&#9;&#9;local torso = character:FindFirstChild(&quot;Torso&quot;)
&#9;&#9;&#9;&#9;if humanoid and humanoid.Health &gt; 0 and torso then
&#9;&#9;&#9;&#9;&#9;local DistanceApart = (Torso.Position - torso.Position).magnitude
&#9;&#9;&#9;&#9;&#9;if DistanceApart &lt;= 30 then
&#9;&#9;&#9;&#9;&#9;&#9;TargetValue.Value = character
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;TargetValue.Value = nil
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;TargetValue.Value = nil
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)

function InvokeClient(Mode, Value)
&#9;local ClientReturn = nil
&#9;pcall(function()
&#9;&#9;ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
&#9;end)
&#9;return ClientReturn
end

function MakeDeployableSnowPlow()
&#9;if PlayerDeployableSnowPlow and PlayerDeployableSnowPlow.Parent then
&#9;&#9;PlayerDeployableSnowPlow:Destroy()
&#9;end
&#9;PlayerDeployableSnowPlow = DeployableSnowPlow:Clone()
&#9;DeployableSnowPlowHumanoid = PlayerDeployableSnowPlow:FindFirstChild(&quot;Humanoid&quot;)
&#9;DeployableSnowPlowTorso = PlayerDeployableSnowPlow:FindFirstChild(&quot;Torso&quot;)
&#9;if not DeployableSnowPlowHumanoid or not DeployableSnowPlowTorso then
&#9;&#9;return
&#9;end
&#9;local humanoid = PlayerDeployableSnowPlow:FindFirstChild(&quot;Humanoid&quot;)
&#9;if humanoid then
&#9;&#9;humanoid.Died:connect(function()
&#9;&#9;&#9;for i, v in pairs(PlayerDeployableSnowPlow:GetChildren()) do
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;v.Name = &quot;Part&quot;
&#9;&#9;&#9;&#9;&#9;v.CanCollide = false
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;Debris:AddItem(PlayerDeployableSnowPlow, 3)
&#9;&#9;end)
&#9;end
&#9;local SnowModel = Instance.new(&quot;Model&quot;)
&#9;SnowModel.Name = &quot;SnowModel&quot;
&#9;SnowModel.Parent = PlayerDeployableSnowPlow
&#9;local BodyGyro = Instance.new(&quot;BodyGyro&quot;)
&#9;BodyGyro.maxTorque = Vector3.new(math.huge, 0, math.huge)
&#9;BodyGyro.Parent = DeployableSnowPlowTorso
&#9;local CreatorValue = Instance.new(&quot;ObjectValue&quot;)
&#9;CreatorValue.Name = &quot;Creator&quot;
&#9;CreatorValue.Value = Player
&#9;CreatorValue.Parent = PlayerDeployableSnowPlow
&#9;local ToolValue = Instance.new(&quot;ObjectValue&quot;)
&#9;ToolValue.Name = &quot;Tool&quot;
&#9;ToolValue.Value = Tool
&#9;ToolValue.Parent = PlayerDeployableSnowPlow
&#9;TargetValue = Instance.new(&quot;ObjectValue&quot;)
&#9;TargetValue.Name = &quot;Target&quot;
&#9;TargetValue.Parent = PlayerDeployableSnowPlow
&#9;local MovementClone = Movement:Clone()
&#9;MovementClone.Disabled = false
&#9;MovementClone.Parent = PlayerDeployableSnowPlow
&#9;local RemoverClone = Remover:Clone()
&#9;RemoverClone.Disabled = false
&#9;RemoverClone.Parent = PlayerDeployableSnowPlow
&#9;PlayerDeployableSnowPlow.Parent = game:GetService(&quot;Workspace&quot;)
&#9;local TorsoCFrame = Torso.CFrame
&#9;local TorsoPosition = (TorsoCFrame + TorsoCFrame.lookVector * (Torso.Size.Z * -0.25))
&#9;TorsoPosition = (TorsoPosition + (TorsoPosition * CFrame.Angles(0, (math.pi / 2), 0)).lookVector * (Torso.Size.X * 1.5))
&#9;TorsoPosition = TorsoPosition - Vector3.new(0, ((PlayerDeployableSnowPlow:GetModelSize().Y / 2) - (Torso.Size.Y / 2)), 0)
&#9;DeployableSnowPlowTorso.CFrame = TorsoPosition
&#9;local DeployableSnowPlowAnimation = PlayerDeployableSnowPlow:FindFirstChild(&quot;Animation&quot;)
&#9;if DeployableSnowPlowAnimation then
&#9;&#9;DeployableSnowPlowAnimation.Disabled = true
&#9;&#9;Delay(0.25, function()
&#9;&#9;&#9;if DeployableSnowPlowAnimation and DeployableSnowPlowAnimation.Parent then
&#9;&#9;&#9;&#9;DeployableSnowPlowAnimation.Disabled = false
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Torso and Torso.Parent)
end

function Equipped()
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;Torso = Character:FindFirstChild(&quot;Torso&quot;)
&#9;Handle.Transparency = 0
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;Spawn(function()
&#9;&#9;Handle.Transparency = 1
&#9;&#9;MakeDeployableSnowPlow()
&#9;end)
end

function Unequipped()
&#9;for i, v in pairs({PlayerDeployableSnowPlow}) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;Handle.Transparency = 0
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
			<Item class="Script" referent="RBX6AAB39F367434EABB0ED671495D63791">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Movement</string>
					<ProtectedString name="Source">--Made by Luckymaxer

Figure = script.Parent
Humanoid = Figure:WaitForChild(&quot;Humanoid&quot;)
Torso = Figure:WaitForChild(&quot;Torso&quot;)
Plow = Figure:WaitForChild(&quot;Plow&quot;)

Players = game:GetService(&quot;Players&quot;)
RunService = game:GetService(&quot;RunService&quot;)
Debris = game:GetService(&quot;Debris&quot;)

SnowModel = Figure:WaitForChild(&quot;SnowModel&quot;)

Creator = Figure:WaitForChild(&quot;Creator&quot;)
Target = Figure:WaitForChild(&quot;Target&quot;)

NormalSurfaceModule = require(script:WaitForChild(&quot;NormalSurfaceModule&quot;))

FollowingPath = false
WalkRadius = 25

BasePart = Instance.new(&quot;Part&quot;)
BasePart.Material = Enum.Material.Plastic
BasePart.Shape = Enum.PartType.Block
BasePart.TopSurface = Enum.SurfaceType.Smooth
BasePart.BottomSurface = Enum.SurfaceType.Smooth
BasePart.FormFactor = Enum.FormFactor.Custom
BasePart.Size = Vector3.new(0.2, 0.2, 0.2)
BasePart.CanCollide = true
BasePart.Locked = true

Humanoid.Health = Humanoid.MaxHealth

function RayCast(Position, Direction, MaxDistance, IgnoreList)
&#9;return game:GetService(&quot;Workspace&quot;):FindPartOnRayWithIgnoreList(Ray.new(Position, Direction.unit * (MaxDistance or 999.999)), IgnoreList) 
end

function IsFlipped(Object)
&#9;local Vector1 = Object.CFrame:vectorToWorldSpace(Vector3.FromNormalId(Enum.NormalId.Top))
&#9;local Vector2 = Vector3.new(0, 1, 0)
&#9;local Angle = math.acos(Vector1:Dot(Vector2))
&#9;return (Angle &gt; 0.05)
end

function MoveAround(TargetPoint)
&#9;TargetPoint = ((not TargetPoint and (Torso.Position + Vector3.new(math.random(-WalkRadius, WalkRadius), 0, math.random(-WalkRadius, WalkRadius))) or TargetPoint))
&#9;Humanoid:MoveTo(TargetPoint)
end

function CreateSnow()
&#9;local CurrentPlayers = {Figure}
&#9;for i, v in pairs(Players:GetChildren()) do
&#9;&#9;if v:IsA(&quot;Player&quot;) and v.Character then
&#9;&#9;&#9;table.insert(CurrentPlayers, v.Character)
&#9;&#9;end
&#9;end
&#9;local RayHit, RayPos = RayCast(Torso.Position, Vector3.new(0, -1, 0), (Torso.Size * 1.5), CurrentPlayers)
&#9;if RayHit and not IsFlipped(Torso) and RayHit.Name ~= &quot;Snow&quot; then
&#9;&#9;local Normal = NormalSurfaceModule(RayHit, RayPos)
&#9;&#9;local Snow = BasePart:Clone()
&#9;&#9;Snow.Size = Vector3.new(2, 0.2, 2)
&#9;&#9;Snow.Name = &quot;Snow&quot;
&#9;&#9;Snow.BrickColor = BrickColor.new(&quot;Institutional white&quot;)
&#9;&#9;Snow.TopSurface = Enum.SurfaceType.SmoothNoOutlines
&#9;&#9;Snow.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
&#9;&#9;Snow.Anchored = true
&#9;&#9;Snow.CanCollide = false
&#9;&#9;Debris:AddItem(Snow, 1)
&#9;&#9;Snow.Parent = SnowModel
&#9;&#9;local StickCFrame = CFrame.new(RayPos, (RayPos + Normal)) * CFrame.Angles((math.pi / 2), 0, 0)
&#9;&#9;Snow.CFrame = StickCFrame
&#9;end
end

Plow.Touched:connect(function(Hit)
&#9;if not Hit or not Hit.Parent then
&#9;&#9;return
&#9;end
&#9;local character = Hit.Parent
&#9;local humanoid = character:FindFirstChild(&quot;Humanoid&quot;)
&#9;local torso = character:FindFirstChild(&quot;Torso&quot;)
&#9;if not Target or not Target.Value or character ~= Target.Value then
&#9;&#9;return
&#9;end
&#9;if humanoid and humanoid.Health &gt; 0 and torso then
&#9;&#9;torso.Velocity = CFrame.new(Vector3.new(Plow.Position.X, torso.Position.Y, Plow.Position.Z), torso.Position).lookVector * 100
&#9;end
end)

RunService.Heartbeat:connect(function()
&#9;Spawn(function()
&#9;&#9;
&#9;&#9;if not Humanoid or Humanoid.Health == 0 then
&#9;&#9;&#9;return
&#9;&#9;end
&#9;&#9;
&#9;&#9;local CreatorValue = Creator.Value
&#9;&#9;local CreatorCharacter, CreatorHumanoid, TorsoPosition, CreatorTorso, TargetTorso
&#9;&#9;
&#9;&#9;if CreatorValue and CreatorValue:IsA(&quot;Player&quot;) and CreatorValue.Character then
&#9;&#9;&#9;CreatorCharacter = CreatorValue.Character
&#9;&#9;&#9;CreatorHumanoid = CreatorCharacter:FindFirstChild(&quot;Humanoid&quot;)
&#9;&#9;&#9;CreatorTorso = CreatorCharacter:FindFirstChild(&quot;Torso&quot;)
&#9;&#9;else
&#9;&#9;&#9;return
&#9;&#9;end

&#9;&#9;local TargetAlive = false
&#9;&#9;if Target and Target.Value then
&#9;&#9;&#9;local character = Target.Value
&#9;&#9;&#9;local humanoid = character:FindFirstChild(&quot;Humanoid&quot;)
&#9;&#9;&#9;TargetTorso = character:FindFirstChild(&quot;Torso&quot;)
&#9;&#9;&#9;if humanoid and humanoid.Health &gt; 0 and TargetTorso then
&#9;&#9;&#9;&#9;local Distance = (CreatorTorso.Position - TargetTorso.Position).magnitude
&#9;&#9;&#9;&#9;if Distance &gt;= 50 then
&#9;&#9;&#9;&#9;&#9;Target.Value = nil
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;TargetAlive = true
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;if not TargetAlive then
&#9;&#9;&#9;if CreatorTorso then
&#9;&#9;&#9;&#9;local TorsoCFrame = CreatorTorso.CFrame
&#9;&#9;&#9;&#9;TorsoPosition = (TorsoCFrame + TorsoCFrame.lookVector * (CreatorTorso.Size.Z * -0.25))
&#9;&#9;&#9;&#9;TorsoPosition = (TorsoPosition + (TorsoPosition * CFrame.Angles(0, (math.pi / 2), 0)).lookVector * (CreatorTorso.Size.X * 1.5))
&#9;&#9;&#9;&#9;TorsoCFrame = TorsoPosition
&#9;&#9;&#9;&#9;TorsoPosition = TorsoPosition.p
&#9;&#9;&#9;&#9;if (CreatorTorso.Position - Torso.Position).magnitude &gt;= 55 then
&#9;&#9;&#9;&#9;&#9;Torso.CFrame = TorsoCFrame
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;local TorsoCFrame = TargetTorso.CFrame
&#9;&#9;&#9;local Direction = TorsoCFrame.lookVector
&#9;&#9;&#9;TorsoCFrame = TorsoCFrame + Direction * 1
&#9;&#9;&#9;TorsoPosition = TorsoCFrame.p
&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;CreateSnow()
&#9;&#9;
&#9;&#9;local WalkSpeed = 24
&#9;&#9;if CreatorHumanoid and CreatorHumanoid.Parent then
&#9;&#9;&#9;WalkSpeed = (CreatorHumanoid.WalkSpeed * 1.5)
&#9;&#9;end
&#9;&#9;Humanoid.WalkSpeed = WalkSpeed
&#9;&#9;
&#9;&#9;MoveAround(TorsoPosition)
&#9;end)
end)</ProtectedString>
				</Properties>
				<Item class="ModuleScript" referent="RBX2B3B6B0F589C458C9E0D896AA46B281C">
					<Properties>
						<string name="Name">NormalSurfaceModule</string>
						<ProtectedString name="Source">--Normal Surface Retrieval by xXxMoNkEyMaNxXx

Terrain = game:GetService(&quot;Workspace&quot;).Terrain
GetCell = Terrain.GetCell
CellCenterToWorld = Terrain.CellCenterToWorld
WorldToCellPreferSolid = Terrain.WorldToCellPreferSolid

IdentityVector = Vector3.new()
IdentityCFrame = CFrame.new()

--Returns:
--Index of closest plane to p
--Distance to surface from p
function ClosestNormalVector(p, planes)
&#9;local best_d = -math.huge
&#9;local best_i
&#9;for i = 1, #planes do
&#9;&#9;local plane = planes[i]
&#9;&#9;local d = IdentityVector.Dot(plane[1], (p - plane[2]))
&#9;&#9;if d &gt; best_d then
&#9;&#9;&#9;best_i, best_d = i, d
&#9;&#9;end
&#9;end
&#9;return best_i, best_d
end

--Part geometry data
UnitaryConvexPlaneMeshes = { --Each component of the normal vector dependent on every component of the size using matrices
&#9;WedgePart = {{Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {CFrame.new(0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0), Vector3.new(0, 0, 0)}, {Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}}, 
&#9;CornerWedgePart = {{Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0), Vector3.new(0, 0, 0)}, {CFrame.new(0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0), Vector3.new(0, 0, 0)}}, 
&#9;Part = {{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}}
}

--Terrain geometry data
TerrainCellSize = Vector3.new(4, 4, 4) --Arbitrary size input
TerrainCellOrientations = {
&#9;[0] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1), 
&#9;CFrame.new(0, 0, 0, 0, 0, 1, 0, 1, 0, -1, 0, 0), 
&#9;CFrame.new(0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1), 
&#9;CFrame.new(0, 0, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}
TerrainCellBlockUnitaryConvexPlaneMeshes = {
&#9;[0] = {{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0), Vector3.new(0, 0, 0)}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, -1, -1, 1, 0, 1, 1, 1, 0), Vector3.new(0.5, -0.5, -0.5)/3}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, -1, -1, 1, 0, 1, 1, 1, 0), Vector3.new(-0.5, 0.5, 0.5)/3}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0), Vector3.new(0, 0, 0)}}
}

function NormalVector(part, point)
&#9;if part.ClassName == &quot;Part&quot; and (part.Shape == Enum.PartType.Ball or part.Shape == Enum.PartType.Cylinder) then
&#9;&#9;return IdentityCFrame.vectorToWorldSpace(part.CFrame, IdentityCFrame.pointToObjectSpace(part.CFrame, point).unit)
&#9;else
&#9;&#9;local partCFrame, partSize = part.CFrame, part.Size
&#9;&#9;local UCPM
&#9;&#9;if part.ClassName == &quot;Terrain&quot; then
&#9;&#9;&#9;local CellGridLocation = WorldToCellPreferSolid(part, Vector3.new(point.x, (point.y - 1e-5), point.z))--Ugly floating point fix
&#9;&#9;&#9;local CellMaterial, CellBlock, CellOrientation = GetCell(part, CellGridLocation.x, CellGridLocation.y, CellGridLocation.z)
&#9;&#9;&#9;partCFrame = (TerrainCellOrientations[CellOrientation.Value] + CellCenterToWorld(part, CellGridLocation.x, CellGridLocation.y, CellGridLocation.z))
&#9;&#9;&#9;partSize = TerrainCellSize
&#9;&#9;&#9;UCPM = TerrainCellBlockUnitaryConvexPlaneMeshes[CellBlock.Value]
&#9;&#9;else
&#9;&#9;&#9;UCPM = UnitaryConvexPlaneMeshes[part.ClassName] or UnitaryConvexPlaneMeshes.Part --Trusses, SpawnLocations, etc.
&#9;&#9;end
&#9;&#9;local CPM = {}
&#9;&#9;for i = 1, #UCPM do
&#9;&#9;&#9;local plane = UCPM[i]
&#9;&#9;&#9;CPM[i] = {(plane[1] * partSize).unit, plane[2] * partSize}
&#9;&#9;end
&#9;&#9;local PlaneIndex, DistanceToSurface = ClosestNormalVector(IdentityCFrame.pointToObjectSpace(partCFrame, point), CPM)
&#9;&#9;if PlaneIndex then
&#9;&#9;&#9;return IdentityCFrame.vectorToWorldSpace(partCFrame, CPM[PlaneIndex][1])
&#9;&#9;else
&#9;&#9;&#9;return IdentityVector --Dead code unless the tables are tampered with
&#9;&#9;end
&#9;end
end

return NormalVector</ProtectedString>
					</Properties>
				</Item>
			</Item>
			<Item class="Script" referent="RBX40310C986D62468F8295722EFBED5AB8">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Remover</string>
					<ProtectedString name="Source">--Made by Luckymaxer

Model = script.Parent

Debris = game:GetService(&quot;Debris&quot;)

Creator = Model:FindFirstChild(&quot;Creator&quot;)
Tool = Model:FindFirstChild(&quot;Tool&quot;)

function DestroyModel()
&#9;Debris:AddItem(Model, 2)
end

if not Creator or not Creator.Value or not Creator.Value:IsA(&quot;Player&quot;) or not Creator.Value.Parent or not Tool or not Tool.Value or not Tool.Value.Parent then
&#9;DestroyModel()
&#9;return
end

Creator = Creator.Value
Tool = Tool.Value

Character = Creator.Character
if not Character then
&#9;DestroyModel()
&#9;return
end

Creator.Changed:connect(function(Property)
&#9;if Property == &quot;Parent&quot; and not Creator.Parent then
&#9;&#9;DestroyModel()
&#9;end
end)

Character.Changed:connect(function(Property)
&#9;if Property == &quot;Parent&quot; and not Character.Parent then
&#9;&#9;DestroyModel()
&#9;end
end)

Tool.Changed:connect(function(Property)
&#9;if Property == &quot;Parent&quot; then
&#9;&#9;DestroyModel()
&#9;end
end)</ProtectedString>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBXA937D624BCD946E885AD6E4FCC0B2A82">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Mouse_Icon = &quot;rbxasset://textures/GunCursor.png&quot;
Reloading_Icon = &quot;rbxasset://textures/GunWaitCursor.png&quot;

Tool = script.Parent

Mouse = nil

function UpdateIcon()
&#9;if Mouse then
&#9;&#9;Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
&#9;end
end

function OnEquipped(ToolMouse)
&#9;Mouse = ToolMouse
&#9;UpdateIcon()
end

function OnChanged(Property)
&#9;if Property == &quot;Enabled&quot; then
&#9;&#9;UpdateIcon()
&#9;end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX6319C5C1C0D441939CC4DBEBEBC2C818">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>54.53405</X>
					<Y>4.60520792</Y>
					<Z>119.064003</Z>
					<R00>-0.604097724</R00>
					<R01>0.627605736</R01>
					<R02>-0.491097629</R02>
					<R10>-0</R10>
					<R11>0.616252124</R11>
					<R12>0.7875489</R12>
					<R20>0.796910167</R20>
					<R21>0.475756496</R21>
					<R22>-0.372276545</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>55.8649292</X>
					<Y>2.47094297</Y>
					<Z>120.072876</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>