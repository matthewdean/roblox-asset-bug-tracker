<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX3A80AE440FDE4C8BA060EE8695233C76">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>1.5</X>
				<Y>3</Y>
				<Z>-0.850000024</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">RocketSkis</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset?id=189884124</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX73B9365EEFCD4587842C97446F6024D6">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>-0.00358200073</X>
					<Y>17.3301048</Y>
					<Z>22.0126572</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1.5</X>
					<Y>1.25</Y>
					<Z>5.75</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBXF71DCC9F8B5643418FECB1CA86235779">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=190096599 </url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.25</X>
						<Y>1.5</Y>
						<Z>0.75</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=189884063 </url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX2342D716785E4616A1F1A079E4C19583">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Mouse_Icon = &quot;rbxasset://textures/GunCursor.png&quot;
Reloading_Icon = &quot;rbxasset://textures/GunWaitCursor.png&quot;

Tool = script.Parent

Mouse = nil

function UpdateIcon()
&#9;if Mouse then
&#9;&#9;Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
&#9;end
end

function OnEquipped(ToolMouse)
&#9;Mouse = ToolMouse
&#9;UpdateIcon()
end

function OnChanged(Property)
&#9;if Property == &quot;Enabled&quot; then
&#9;&#9;UpdateIcon()
&#9;end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX8A375AEC03C34C4BA7AAA50BA8206CB9">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
ContentProvider = game:GetService(&quot;ContentProvider&quot;)
RunService = game:GetService(&quot;RunService&quot;)

Camera = game:GetService(&quot;Workspace&quot;).CurrentCamera

Animations = {}
LocalObjects = {}

ServerControl = Tool:WaitForChild(&quot;ServerControl&quot;)
ClientControl = Tool:WaitForChild(&quot;ClientControl&quot;)

ToolEquipped = false

ClientControl.OnClientInvoke = (function(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; and Value and ToolEquipped and Humanoid then
&#9;&#9;SetAnimation(&quot;PlayAnimation&quot;, Value)
&#9;elseif Mode == &quot;StopAnimation&quot; and Value then
&#9;&#9;SetAnimation(&quot;StopAnimation&quot;, Value)
&#9;elseif Mode == &quot;Preload&quot; and Value then
&#9;&#9;ContentProvider:Preload(Value)
&#9;elseif Mode == &quot;PlaySound&quot; and Value then
&#9;&#9;Value:Play()
&#9;elseif Mode == &quot;StopSound&quot; and Value then
&#9;&#9;Value:Stop()
&#9;elseif Mode == &quot;MousePosition&quot; then
&#9;&#9;return PlayerMouse.Hit.p
&#9;elseif Mode == &quot;DisableJump&quot; then
&#9;&#9;DisableJump(Value)
&#9;elseif Mode == &quot;SetMouseIcon&quot; and Value then
&#9;&#9;PlayerMouse.Icon = Value
&#9;elseif Mode == &quot;SetLocalTransparencyModifier&quot; and Value and ToolEquipped then
&#9;&#9;pcall(function()
&#9;&#9;&#9;local ObjectFound = false
&#9;&#9;&#9;for i, v in pairs(LocalObjects) do
&#9;&#9;&#9;&#9;if v == Value then
&#9;&#9;&#9;&#9;&#9;ObjectFound = true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if not ObjectFound then
&#9;&#9;&#9;&#9;table.insert(LocalObjects, Value)
&#9;&#9;&#9;&#9;if ObjectLocalTransparencyModifier then
&#9;&#9;&#9;&#9;&#9;ObjectLocalTransparencyModifier:disconnect()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;ObjectLocalTransparencyModifier = RunService.RenderStepped:connect(function()
&#9;&#9;&#9;&#9;&#9;for i, v in pairs(LocalObjects) do
&#9;&#9;&#9;&#9;&#9;&#9;if v.Object and v.Object.Parent then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Object.LocalTransparencyModifier = v.Transparency
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;elseif Mode == &quot;GetCamera&quot; and Value then
&#9;&#9;local PropertyValue = nil
&#9;&#9;if Value.Property then
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;PropertyValue = Camera[Value.Property]
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;&#9;return PropertyValue
&#9;elseif Mode == &quot;SetCamera&quot; and Value then
&#9;&#9;if Value.Property and Value.Value then
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;Camera[Value.Property] = Value.Value
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;elseif Mode == &quot;SetMouseSensitivity&quot; and Value then
&#9;&#9;if Value.Sensitivity == 1 then
&#9;&#9;&#9;if MouseSensivityConnection then
&#9;&#9;&#9;&#9;MouseSensivityConnection:disconnect()
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;SetMouseSensitivity(Value.Sensitivity)
&#9;&#9;end
&#9;end
end)

function InvokeServer(Mode, Value)
&#9;pcall(function()
&#9;&#9;local ServerReturn = ServerControl:InvokeServer(Mode, Value)
&#9;&#9;return ServerReturn
&#9;end)
end

function SetAnimation(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; and Value and ToolEquipped and Humanoid then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local AnimationTrack = Humanoid:LoadAnimation(Value.Animation)
&#9;&#9;table.insert(Animations, {Animation = Value.Animation, AnimationTrack = AnimationTrack})
&#9;&#9;AnimationTrack:Play(Value.FadeTime, Value.Weight, Value.Speed)
&#9;elseif Mode == &quot;StopAnimation&quot; and Value then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function DisableJump(Boolean)
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;if Boolean then
&#9;&#9;PreventJump = Humanoid.Changed:connect(function(Property)
&#9;&#9;&#9;if Property ==  &quot;Jump&quot; then
&#9;&#9;&#9;&#9;Humanoid.Jump = false
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

function SetMouseSensitivity(Sensitivity)

&#9;if MouseSensivityConnection then
&#9;&#9;MouseSensivityConnection:disconnect()
&#9;end&#9;
&#9;
&#9;local function EulerAnglesYX(cframe)
&#9;&#9;local X, Y, Z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = cframe:components(cframe)
&#9;&#9;return -math.asin(R12), ((math.abs(R12) &gt; 0.99999 and -math.atan2(-R20, R00)) or -math.atan2(-R02, R22))
&#9;end
&#9;
&#9;local DirectionX, DirectionY = EulerAnglesYX(Camera.CoordinateFrame)
&#9;
&#9;local function UpdateSensitivity()
&#9;&#9;local CFrameX, CFrameY = EulerAnglesYX(Camera.CoordinateFrame)
&#9;&#9;DirectionX = (DirectionX * (1 - Sensitivity) + (CFrameX + (math.pi * 2) * math.floor((DirectionX - CFrameX) / (math.pi * 2) + 0.5)) * Sensitivity)
&#9;&#9;DirectionY = (DirectionY * (1 - Sensitivity) + (CFrameY + (math.pi * 2) * math.floor((DirectionY - CFrameY) / (math.pi * 2) + 0.5)) * Sensitivity)
&#9;&#9;Camera.CoordinateFrame = CFrame.Angles(0, DirectionY, 0) * CFrame.Angles(DirectionX, 0, 0) * CFrame.new(0, 0, 0.5) + Camera.Focus.p
&#9;end
&#9;
&#9;MouseSensivityConnection = RunService.RenderStepped:connect(UpdateSensitivity)
&#9;
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped(Mouse)
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;ToolEquipped = true
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;PlayerMouse = Player:GetMouse()
&#9;Mouse.Button1Down:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = true})
&#9;end)
&#9;Mouse.KeyDown:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = true})
&#9;end)
&#9;Mouse.KeyUp:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = false})
&#9;end)
&#9;Mouse.WheelForward:connect(function()
&#9;&#9;InvokeServer(&quot;WheelMoved&quot;, {Forward = true})
&#9;end)
&#9;Mouse.WheelBackward:connect(function()
&#9;&#9;InvokeServer(&quot;WheelMoved&quot;, {Forward = false})
&#9;end)
end

function Unequipped()
&#9;ToolEquipped = false
&#9;LocalObjects = {}
&#9;for i, v in pairs(Animations) do
&#9;&#9;if v and v.AnimationTrack then
&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs({PreventJump, MouseSensivityConnection, ObjectLocalTransparencyModifier}) do
&#9;&#9;if v then
&#9;&#9;&#9;v:disconnect()
&#9;&#9;end
&#9;end
&#9;PlayerMouse.Icon = &quot;&quot;
&#9;Animations = {}
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX3B6762FDBF394D04A3CA193F2179967E">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
Debris = game:GetService(&quot;Debris&quot;)
RunService = game:GetService(&quot;RunService&quot;)

NormalSurfaceModule = require(Tool:WaitForChild(&quot;NormalSurfaceModule&quot;))

BasePart = Instance.new(&quot;Part&quot;)
BasePart.Shape = Enum.PartType.Block
BasePart.Material = Enum.Material.Plastic
BasePart.TopSurface = Enum.SurfaceType.Smooth
BasePart.BottomSurface = Enum.SurfaceType.Smooth
BasePart.FormFactor = Enum.FormFactor.Custom
BasePart.Size = Vector3.new(0.2, 0.2, 0.2)
BasePart.CanCollide = true
BasePart.Locked = true
BasePart.Anchored = false

SpeedBoostGui = Instance.new(&quot;ScreenGui&quot;)
SpeedBoostGui.Name = &quot;SpeedBoostGui&quot;
SpeedBoostFrame = Instance.new(&quot;Frame&quot;)
SpeedBoostFrame.Name = &quot;Frame&quot;
SpeedBoostFrame.BackgroundColor3 = Color3.new((255 / 255), (255 / 255), (255 / 255))
SpeedBoostFrame.BorderColor3 = Color3.new((0 / 255), (222 / 255), (222 / 255))
SpeedBoostFrame.BorderSizePixel = 2
SpeedBoostFrame.Position = UDim2.new(0.75, 0, 0.9, 0)
SpeedBoostFrame.Size = UDim2.new(0.2, 0, 0.075, 0)
SpeedBoostFrame.ZIndex = 1
SpeedBoostFrame.Parent = SpeedBoostGui
FuelDisplay = Instance.new(&quot;Frame&quot;)
FuelDisplay.Name = &quot;FuelDisplay&quot;
FuelDisplay.BackgroundColor3 = Color3.new((0 / 255), (255 / 255), (255 / 255))
FuelDisplay.BorderColor3 = Color3.new((0 / 255), (222 / 255), (222 / 255))
FuelDisplay.BorderSizePixel = 0
FuelDisplay.Position = UDim2.new(0, 0, 0)
FuelDisplay.Size = UDim2.new(1, 0, 1, 0)
FuelDisplay.ZIndex = 2
FuelDisplay.Parent = SpeedBoostFrame
HelpText = Instance.new(&quot;TextLabel&quot;)
HelpText.Name = &quot;HelpText&quot;
HelpText.BackgroundColor3 = Color3.new((255 / 255), (255 / 255), (255 / 255))
HelpText.BackgroundTransparency = 1
HelpText.BorderSizePixel = 0
HelpText.Position = UDim2.new(0, 0, 0, 0)
HelpText.Size = UDim2.new(1, 0, 0.35, 0)
HelpText.Font = Enum.Font.Legacy
HelpText.FontSize = Enum.FontSize.Size14
HelpText.Text = &quot;(Hold Shift for boost)&quot;
HelpText.TextColor3 = Color3.new((0 / 255), (0 / 255), (0 / 255))
HelpText.TextStrokeColor3 = Color3.new((0 / 255), (0 / 255), (0 / 255))
HelpText.TextStrokeTransparency = 0.95
HelpText.TextTransparency = 0.5
HelpText.TextScaled = true
HelpText.TextWrapped = true
HelpText.TextXAlignment = Enum.TextXAlignment.Center
HelpText.TextYAlignment = Enum.TextYAlignment.Center
HelpText.ZIndex = 3
HelpText.Parent = SpeedBoostFrame
TitleText = Instance.new(&quot;TextLabel&quot;)
TitleText.Name = &quot;TitleText&quot;
TitleText.BackgroundColor3 = Color3.new((255 / 255), (255 / 255), (255 / 255))
TitleText.BackgroundTransparency = 1
TitleText.BorderSizePixel = 0
TitleText.Position = UDim2.new(0, 0, 0.2, 0)
TitleText.Size = UDim2.new(1, 0, 0.8, 0)
TitleText.Font = Enum.Font.Arial
TitleText.FontSize = Enum.FontSize.Size14
TitleText.Text = &quot;Rocket Boost&quot;
TitleText.TextColor3 = Color3.new((0 / 255), (85 / 255), (255 / 255))
TitleText.TextStrokeColor3 = Color3.new((0 / 255), (0 / 255), (255 / 255))
TitleText.TextStrokeTransparency = 0.95
TitleText.TextTransparency = 0.5
TitleText.TextScaled = true
TitleText.TextWrapped = true
TitleText.TextXAlignment = Enum.TextXAlignment.Center
TitleText.TextYAlignment = Enum.TextYAlignment.Center
TitleText.ZIndex = 3
TitleText.Parent = SpeedBoostFrame

Animations = {
&#9;IdleLegs = {Animation = Tool:WaitForChild(&quot;IdleLegs&quot;), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil},
&#9;Swing = {Animation = Tool:WaitForChild(&quot;Swing&quot;), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil},
&#9;Tuck = {Animation = Tool:WaitForChild(&quot;Tuck&quot;), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil} --http://www.roblox.com/asset/?id=190071033
}

Sounds = {
}

SpeedBoost = {
&#9;MaxFuel = 100,
&#9;CurrentFuel = 100,
&#9;IncreaseRate = 0.25,
&#9;DecreaseRate = 0.5,
&#9;UsageRate = (1 / 30),
&#9;Regenerating = false,
&#9;Active = false
}

LastUpdate = nil
State = &quot;Stopped&quot;
LastStateTime = 0

ToolEquipped = false
SkiActive = false

DisplayModel = Tool:FindFirstChild(&quot;DisplayModel&quot;)
if DisplayModel then
&#9;DisplayModel:Destroy()
end

for i, v in pairs(Tool:GetChildren()) do
&#9;if (v:IsA(&quot;BasePart&quot;) and v ~= Handle) then
&#9;&#9;v:Destroy()
&#9;end
end

ServerControl = (Tool:FindFirstChild(&quot;ServerControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ServerControl.Name = &quot;ServerControl&quot;
ServerControl.Parent = Tool

ClientControl = (Tool:FindFirstChild(&quot;ClientControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ClientControl.Name = &quot;ClientControl&quot;
ClientControl.Parent = Tool

Handle.Transparency = 0
Tool.Enabled = true

ServerControl.OnServerInvoke = (function(player, Mode, Value)
&#9;if player == Player then
&#9;&#9;if Mode == &quot;MouseClick&quot; and Value.Down then
&#9;&#9;&#9;Activated()
&#9;&#9;elseif Mode == &quot;KeyPress&quot; then
&#9;&#9;&#9;local Key = Value.Key
&#9;&#9;&#9;local ByteKey = string.byte(Key)
&#9;&#9;&#9;local Down = Value.Down
&#9;&#9;&#9;if ByteKey == 48 and SkiActive and ToolEquipped then
&#9;&#9;&#9;&#9;if Down and not SpeedBoost.Active and SpeedBoost.CurrentFuel &gt; (SpeedBoost.MaxFuel / 2) then
&#9;&#9;&#9;&#9;&#9;SpeedBoost.Active = true
&#9;&#9;&#9;&#9;&#9;SetSpeedBoost(true)
&#9;&#9;&#9;&#9;&#9;while ToolEquipped and SpeedBoost.Active and SpeedBoost.CurrentFuel &gt; 0 do
&#9;&#9;&#9;&#9;&#9;&#9;SpeedBoost.CurrentFuel = (SpeedBoost.CurrentFuel - SpeedBoost.DecreaseRate)
&#9;&#9;&#9;&#9;&#9;&#9;FuelDisplay.Size = UDim2.new((1 / (SpeedBoost.MaxFuel / SpeedBoost.CurrentFuel)), 0, 1, 0)
&#9;&#9;&#9;&#9;&#9;&#9;wait(SpeedBoost.Rate)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;SpeedBoost.Active = false
&#9;&#9;&#9;&#9;&#9;SpeedBoost.CurrentFuel = ((SpeedBoost.CurrentFuel &lt; 0 and 0) or SpeedBoost.CurrentFuel)
&#9;&#9;&#9;&#9;&#9;SetSpeedBoost(false)
&#9;&#9;&#9;&#9;&#9;RegenerateFuel()
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;SpeedBoost.Active = false
&#9;&#9;&#9;&#9;&#9;SetSpeedBoost(false)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)

function InvokeClient(Mode, Value)
&#9;local ClientReturn = nil
&#9;pcall(function()
&#9;&#9;ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
&#9;end)
&#9;return ClientReturn
end

function RayCast1(Position, Direction, MaxDistance, IgnoreList)
&#9;return game:GetService(&quot;Workspace&quot;):FindPartOnRayWithIgnoreList(Ray.new(Position, Direction.unit * (MaxDistance or 999.999)), IgnoreList) 
end

function TagHumanoid(humanoid, player)
&#9;local Creator_Tag = Instance.new(&quot;ObjectValue&quot;)
&#9;Creator_Tag.Name = &quot;creator&quot;
&#9;Creator_Tag.Value = player
&#9;Debris:AddItem(Creator_Tag, 2)
&#9;Creator_Tag.Parent = humanoid
end

function UntagHumanoid(humanoid)
&#9;for i, v in pairs(humanoid:GetChildren()) do
&#9;&#9;if v:IsA(&quot;ObjectValue&quot;) and v.Name == &quot;creator&quot; then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
end

function SetSpeedBoost(Boolean)
&#9;for i, v in pairs({LeftSki, RightSki}) do
&#9;&#9;local RocketPart = v:FindFirstChild(&quot;RocketPart&quot;)
&#9;&#9;if RocketPart then
&#9;&#9;&#9;local Weld = RocketPart:FindFirstChild(&quot;Weld&quot;)
&#9;&#9;&#9;if Weld and Weld.Part0 == v and Weld.Part1 == RocketPart then
&#9;&#9;&#9;&#9;for ii, vv in pairs(RocketPart:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if vv:IsA(&quot;Fire&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;vv.Enabled = Boolean
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function RegenerateFuel()
&#9;Spawn(function()
&#9;&#9;if SpeedBoost.Regenerating then
&#9;&#9;&#9;return
&#9;&#9;end
&#9;&#9;while --[[ToolEquipped and]] not SpeedBoost.Active and SpeedBoost.CurrentFuel &lt; SpeedBoost.MaxFuel do
&#9;&#9;&#9;SpeedBoost.Regenerating = true
&#9;&#9;&#9;SpeedBoost.CurrentFuel = (SpeedBoost.CurrentFuel + SpeedBoost.IncreaseRate)
&#9;&#9;&#9;FuelDisplay.Size = UDim2.new((1 / (SpeedBoost.MaxFuel / SpeedBoost.CurrentFuel)), 0, 1, 0)
&#9;&#9;&#9;wait(SpeedBoost.UsageRate)
&#9;&#9;end
&#9;&#9;SpeedBoost.Regenerating = false
&#9;&#9;SpeedBoost.CurrentFuel = ((SpeedBoost.CurrentFuel &gt; SpeedBoost.MaxFuel and SpeedBoost.MaxFuel) or SpeedBoost.CurrentFuel)
&#9;end)
end

function StopSkis()
&#9;if FunctionSkis then
&#9;&#9;FunctionSkis:disconnect()
&#9;end
&#9;LastUpdate = nil
&#9;LastStateTime = 0
&#9;State = &quot;Stopped&quot;
&#9;if BodyVelocity and BodyVelocity.Parent then
&#9;&#9;BodyVelocity.velocity = Vector3.new(0, 0, 0)
&#9;&#9;BodyVelocity.maxForce = Vector3.new(0, 0, 0)
&#9;end
end

function Activated()
&#9;if not Tool.Enabled or not ToolEquipped then
&#9;&#9;return
&#9;end
&#9;if SkiActive then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, v)
&#9;&#9;end
&#9;&#9;StopSkis()
&#9;else
&#9;&#9;InvokeClient(&quot;PlayAnimation&quot;,Animations.IdleLegs)
&#9;&#9;FunctionSkis = RunService.Heartbeat:connect(function()
&#9;&#9;&#9;BodyVelocity.maxForce = Vector3.new(math.huge, 0, math.huge)
&#9;&#9;&#9;UpdateSkiVelocity()
&#9;&#9;end)
&#9;end
&#9;SkiActive = not SkiActive
end

function GetNormal(part, point)
&#9;local Normal = NormalSurfaceModule(part, point)
&#9;return ((part.CFrame-part.CFrame.p) * Normal)
end

function AngleFromFlat(Vec1)
&#9;local Vec1 = Vec1.unit
&#9;local FlatVec = (Vec1 * Vector3.new(1, 0, 1)).unit
&#9;local Angle = math.acos(Vec1:Dot(FlatVec))
&#9;if Angle ~= Angle then --If the angle is nan then assume flat surface
&#9;&#9;return math.rad(90)
&#9;end
&#9;return (math.rad(90) - Angle)
end

function RayIgnoreCheck(Hit, Pos)
&#9;return false
end

function RayIgnoreCamera(Hit, Pos)
&#9;if Hit then
&#9;&#9;if not Hit.CanCollide then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false
end

function RayCast2(StartPos, Vec, RayLength, IgnoreFunc, IgnoreList) -- @preconditions: Vec should be a unit Vector, and 0 &lt; RayLength &lt;= 1000
&#9;IgnoreFunc = (IgnoreFunc or RayIgnoreCheck)
&#9;IgnoreList = (IgnoreList or {Character})
&#9;Vec = Vec.unit
&#9;local Ray = Ray.new(StartPos, (Vec * RayLength))
&#9;local HitObject, HitPos = game:GetService(&quot;Workspace&quot;):FindPartOnRayWithIgnoreList(Ray, IgnoreList)
&#9;if HitObject and HitPos then
&#9;&#9;if IgnoreFunc(HitObject, HitPos) then
&#9;&#9;&#9;table.insert(IgnoreList, HitObject)
&#9;&#9;&#9;return RayCast2(StartPos, Vec, RayLength, IgnoreFunc, IgnoreList)
&#9;&#9;end
&#9;end
&#9;return HitObject, HitPos
end

function GetGroundBelowCharacter()
&#9;if Torso then
&#9;&#9;local TorsoCFrame = Torso.CFrame
&#9;&#9;local HitData = {}
&#9;&#9;for z = -1, 1, 2 do
&#9;&#9;&#9;for x = -1, 1, 2 do
&#9;&#9;&#9;&#9;local RayPos = (TorsoCFrame.p + TorsoCFrame:vectorToWorldSpace(Vector3.new(((Torso.Size.X / 2) * x), 0, ((Torso.Size.Z / 2) * z))))
&#9;&#9;&#9;&#9;local Hit, Pos = RayCast2(RayPos, Vector3.new(0, -1, 0), ((Torso.Size.Y / 2) + Torso.Size.Y + 6), RayIgnoreCamera)
&#9;&#9;&#9;&#9;if Hit and Pos then
&#9;&#9;&#9;&#9;&#9;table.insert(HitData, {[&quot;Pos&quot;] = CFrame.new(Vector3.new(TorsoCFrame.p.X, (Pos.Y + 3), TorsoCFrame.p.Z)), [&quot;Part&quot;] = Hit})
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;table.sort(HitData, (function(a, b)
&#9;&#9;&#9;return a[&quot;Pos&quot;].p.Y &gt; b[&quot;Pos&quot;].p.Y
&#9;&#9;end))
&#9;&#9;if #HitData &gt; 0 then
&#9;&#9;&#9;return HitData[1][&quot;Pos&quot;], HitData[1][&quot;Part&quot;]
&#9;&#9;end
&#9;&#9;return TorsoCFrame, nil
&#9;end
end

function StudsPerSToMetersPerS(studs)
&#9;return (studs / 2)
end

function MetersPerSToStudsPerS(meters)
&#9;return (meters * 2.5)
end

function UpdateSkiVelocity()
&#9;if not ToolEquipped or not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;local Now = tick()
&#9;if not LastUpdate then
&#9;&#9;LastUpdate = Now
&#9;&#9;return
&#9;end
&#9;local GroundHit, GroundPart = GetGroundBelowCharacter(Character)
&#9;if GroundHit and GroundPart then
&#9;&#9;local Normal = GetNormal(GroundPart, GroundHit.p)
&#9;&#9;local Theta = AngleFromFlat(Normal) --[[ Angle of slope --]]
&#9;&#9;local DeltaTime = (Now - LastUpdate)
&#9;&#9;if BodyVelocity.velocity.magnitude &lt; 22 then
&#9;&#9;&#9;if State ~= &quot;Poles&quot; and (tick() - LastStateTime) &gt; 0.5 then
&#9;&#9;&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, Animations.Tuck)
&#9;&#9;&#9;&#9;InvokeClient(&quot;PlayAnimation&quot;, Animations.Swing)
&#9;&#9;&#9;&#9;State = &quot;Poles&quot;
&#9;&#9;&#9;&#9;LastStateTime = Now
&#9;&#9;&#9;end
&#9;&#9;&#9;local SkiOrientation = (Torso.CFrame.lookVector * Vector3.new(1,0,1)).unit
&#9;&#9;&#9;if math.abs(math.acos(SkiOrientation:Dot(BodyVelocity.velocity.unit))) &gt; (math.pi / 3) then
&#9;&#9;&#9;&#9;BodyVelocity.velocity = (BodyVelocity.velocity * (1 - 0.55 * DeltaTime))
&#9;&#9;&#9;end
&#9;&#9;&#9;BodyVelocity.velocity = (BodyVelocity.velocity + (SkiOrientation * 19 * DeltaTime))
&#9;&#9;else
&#9;&#9;&#9;if State ~= &quot;Tuck&quot; and (tick() - LastStateTime) &gt; 0.5 and (State ~= &quot;Poles&quot; or BodyVelocity.velocity.magnitude &gt; 24) then
&#9;&#9;&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, Animations.Swing)
&#9;&#9;&#9;&#9;InvokeClient(&quot;PlayAnimation&quot;, Animations.Tuck)
&#9;&#9;&#9;&#9;State = &quot;Tuck&quot;
&#9;&#9;&#9;&#9;LastStateTime = Now
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;local KineticSkiSnow = 0.05 --dynamic coeff of snow
&#9;&#9;&#9;local CdAp = 0.65 --Drag coeff with frontal area
&#9;&#9;&#9;local rho = 1.3413 --kg*m^3
&#9;&#9;&#9;local Velocity = StudsPerSToMetersPerS(Torso.Velocity).magnitude
&#9;&#9;&#9;local Mass = 65
&#9;&#9;&#9;local Gravity = 9.81
&#9;&#9;&#9;Gravity = ((SpeedBoost.Active and (Gravity * 2.5)) or Gravity)
&#9;&#9;&#9;
&#9;&#9;&#9;local DownhillVec = Vector3.new(0,1,0):Cross(Normal):Cross(Normal)
&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;local SkiOrientation = (Torso.CFrame.lookVector * Vector3.new(1, 0, 1)).unit
&#9;&#9;&#9;local AngleBetweenLookAndHill = math.acos((DownhillVec * Vector3.new(1, 0, 1)).unit:Dot(SkiOrientation))
&#9;&#9;&#9;if math.abs(AngleBetweenLookAndHill) &gt; math.rad(90) then -- if we are pointed uphill, flip direction
&#9;&#9;&#9;&#9;SkiOrientation = (SkiOrientation * -1)
&#9;&#9;&#9;&#9;AngleBetweenLookAndHill = math.acos((DownhillVec * Vector3.new(1, 0, 1)).unit:Dot(SkiOrientation))
&#9;&#9;&#9;end
&#9;&#9;&#9;local Acceleration = (Gravity * math.sin(Theta) - KineticSkiSnow * Gravity * math.cos(Theta) - (CdAp * rho * (Velocity ^ 2)) / (2 * Mass))
&#9;&#9;&#9;if math.abs(math.acos(SkiOrientation:Dot(BodyVelocity.velocity.unit))) &gt; (math.pi / 3) then
&#9;&#9;&#9;&#9;BodyVelocity.velocity = (BodyVelocity.velocity * (1 - 0.55 * DeltaTime))
&#9;&#9;&#9;end
&#9;&#9;&#9;BodyVelocity.velocity = (BodyVelocity.velocity + ((SkiOrientation + Vector3.new(0, 0.0001, 0)).unit * Acceleration) * DeltaTime) 
&#9;&#9;&#9;
&#9;&#9;&#9;LastUpdate = Now
&#9;&#9;&#9;
&#9;&#9;end

&#9;end
end

function EquipSkis()
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;BodyGyro = Instance.new(&quot;BodyGyro&quot;)
&#9;BodyGyro.cframe = Torso.CFrame
&#9;BodyGyro.maxTorque = Vector3.new(math.huge, math.huge, math.huge)
&#9;BodyGyro.Parent = Torso
&#9;BodyVelocity = Instance.new(&quot;BodyVelocity&quot;)
&#9;BodyVelocity.maxForce = Vector3.new(0, 0, 0)
&#9;BodyVelocity.velocity = Vector3.new(0, 0, 0)
&#9;BodyVelocity.Parent = Torso
&#9;local Ski = BasePart:Clone()
&#9;Ski.Name = &quot;Ski&quot;
&#9;Ski.Transparency = 0
&#9;Ski.Size = Vector3.new(0.5, 1.15, 5.75)
&#9;Ski.CanCollide = false
&#9;Ski.Velocity = Vector3.new(0, 0, 0)
&#9;Ski.RotVelocity = Vector3.new(0, 0, 0)
&#9;RocketPart = BasePart:Clone()
&#9;RocketPart.Name = &quot;RocketPart&quot;
&#9;RocketPart.Transparency = 1
&#9;RocketPart.Size = Vector3.new(0.5, 1, 0.85)
&#9;RocketPart.CanCollide = false
&#9;local Fire = Instance.new(&quot;Fire&quot;)
&#9;Fire.Color = Color3.new((236 / 255), (139 / 255), (70 / 255))
&#9;Fire.SecondaryColor = Color3.new((139 / 255), (80 / 255), (55 / 255))
&#9;Fire.Heat = 10
&#9;Fire.Size = 5
&#9;Fire.Enabled = false
&#9;Fire.Parent = RocketPart
&#9;local RocketWeld = Instance.new(&quot;Weld&quot;)
&#9;RocketWeld.Part0 = Ski
&#9;RocketWeld.Part1 = RocketPart
&#9;RocketWeld.C0 = CFrame.new(0, 0, 0)
&#9;RocketWeld.C1 = CFrame.new(0, -3, 0) * CFrame.Angles(-(math.pi / 2), 0, 0)
&#9;RocketWeld.Parent = RocketPart
&#9;RocketPart.Parent = Ski
&#9;local Mesh = Instance.new(&quot;SpecialMesh&quot;)
&#9;Mesh.TextureId = &quot;http://www.roblox.com/asset?id=189884063&quot;
&#9;Mesh.MeshType = Enum.MeshType.FileMesh
&#9;Mesh.Offset = Vector3.new(0, 0.35, 0)
&#9;Mesh.Scale = Vector3.new(1.25, 1.5, 0.75)
&#9;Mesh.Parent = Ski
&#9;local LeftLeg = Character:FindFirstChild(&quot;Left Leg&quot;)
&#9;local RightLeg = Character:FindFirstChild(&quot;Right Leg&quot;)
&#9;if LeftLeg then
&#9;&#9;LeftSki = Ski:Clone()
&#9;&#9;LeftSki.Name = &quot;LeftSki&quot;
&#9;&#9;LeftSki.Mesh.MeshId = &quot;http://www.roblox.com/asset?id=189884041&quot;
&#9;&#9;LeftWeld = Instance.new(&quot;Weld&quot;)
&#9;&#9;LeftWeld.Part0 = LeftLeg
&#9;&#9;LeftWeld.Part1 = LeftSki
&#9;&#9;LeftWeld.C0 = CFrame.new(0, 0, 0)
&#9;&#9;LeftWeld.C1 = CFrame.new(0, 0.55, 0.675)
&#9;&#9;LeftWeld.Parent = LeftSki
&#9;&#9;LeftSki.Parent = Tool
&#9;&#9;InvokeClient(&quot;SetLocalTransparencyModifier&quot;, {Object = LeftLeg, Transparency = 0})
&#9;end
&#9;if RightLeg then
&#9;&#9;RightSki = Ski:Clone()
&#9;&#9;RightSki.Name = &quot;RightSki&quot;
&#9;&#9;RightSki.Mesh.MeshId = &quot;http://www.roblox.com/asset?id=189884023&quot;
&#9;&#9;RightWeld = Instance.new(&quot;Weld&quot;)
&#9;&#9;RightWeld.Part0 = RightLeg
&#9;&#9;RightWeld.Part1 = RightSki
&#9;&#9;RightWeld.C0 = CFrame.new(0, 0, 0)
&#9;&#9;RightWeld.C1 = CFrame.new(0, 0.55, 0.675)
&#9;&#9;RightWeld.Parent = RightSki
&#9;&#9;RightSki.Parent = Tool
&#9;&#9;InvokeClient(&quot;SetLocalTransparencyModifier&quot;, {Object = RightLeg, Transparency = 0})
&#9;end
&#9;if SkiAlign then
&#9;&#9;SkiAlign:disconnect()
&#9;end
&#9;SkiAlign = RunService.Heartbeat:connect(function()
&#9;&#9;if (not (LeftLeg and LeftLeg.Parent and LeftSki and LeftSki.Parent and LeftWeld and LeftWeld.Parent) or not (RightLeg and RightLeg.Parent and RightSki and RightSki.Parent and RightWeld and RightWeld.Parent)) then
&#9;&#9;&#9;SkiAlign:disconnect()
&#9;&#9;&#9;return
&#9;&#9;end
&#9;&#9;local RayHit, RayPos = RayCast1(Torso.Position, Vector3.new(0, -1, 0), (Torso.Size * 2), {Character})
&#9;&#9;if RayHit then
&#9;&#9;&#9;local Normal = NormalSurfaceModule(RayHit, RayPos)
&#9;&#9;&#9;local StickCFrame = CFrame.new(RayPos, (RayPos + Normal)) * CFrame.Angles((math.pi / 2), 0, 0)
&#9;&#9;&#9;BodyGyro.maxTorque = Vector3.new(math.huge, 0, math.huge)
&#9;&#9;&#9;BodyGyro.cframe = StickCFrame * CFrame.Angles(math.pi, 0, 0)
&#9;&#9;else
--&#9;&#9;&#9;BodyGyro.maxTorque = Vector3.new(0, 0, 0)
&#9;&#9;end
&#9;end)
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped()
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;PlayerGui = Player:FindFirstChild(&quot;PlayerGui&quot;)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;Torso = Character:FindFirstChild(&quot;Torso&quot;)
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;if PlayerGui then
&#9;&#9;SpeedBoostGuiClone = SpeedBoostGui:Clone()
&#9;&#9;FuelDisplay = SpeedBoostGuiClone.Frame.FuelDisplay
&#9;&#9;FuelDisplay.Size = UDim2.new((1 / (SpeedBoost.MaxFuel / SpeedBoost.CurrentFuel)), 0, 1, 0)
&#9;&#9;SpeedBoostGuiClone.Parent = PlayerGui
&#9;end
&#9;RegenerateFuel()
&#9;for i, v in pairs(Tool:GetChildren()) do
&#9;&#9;if (v:IsA(&quot;BasePart&quot;) and v ~= Handle) then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs(Animations) do
&#9;&#9;if v and v.Animation then
&#9;&#9;&#9;InvokeClient(&quot;Preload&quot;, v.Animation.AnimationId)
&#9;&#9;end
&#9;end
&#9;Handle.Transparency = 1
&#9;Spawn(function()
&#9;&#9;EquipSkis()
&#9;end)
&#9;ToolEquipped = true
end

function Unequipped()
&#9;StopSkis()
&#9;SkiActive = false
&#9;for i, v in pairs({LeftSki, RightSki, BodyGyro, BodyVelocity, SpeedBoostGuiClone}) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs(Tool:GetChildren()) do
&#9;&#9;if v:IsA(&quot;BasePart&quot;) and v ~= Handle then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs({SkiAlign, FunctionSkis}) do
&#9;&#9;if v then
&#9;&#9;&#9;v:disconnect()
&#9;&#9;end
&#9;end
&#9;if CheckIfAlive() then
&#9;&#9;local X, Y, Z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = Torso.CFrame:components()
&#9;&#9;Torso.CFrame = CFrame.new(X, Y, Z, R00, 0, R02, 0, R11, R12, R20, 0, R22)
&#9;end
&#9;Handle.Transparency = 0
&#9;for i, v in pairs(Animations) do
&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, v)
&#9;end
&#9;ToolEquipped = false
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX6AF919CCF10745DC980B1B4A448BBBD7">
			<Properties>
				<string name="Name">NormalSurfaceModule</string>
				<ProtectedString name="Source">--Normal Surface Retrieval by xXxMoNkEyMaNxXx

Terrain = game:GetService(&quot;Workspace&quot;).Terrain
GetCell = Terrain.GetCell
CellCenterToWorld = Terrain.CellCenterToWorld
WorldToCellPreferSolid = Terrain.WorldToCellPreferSolid

IdentityVector = Vector3.new()
IdentityCFrame = CFrame.new()

--Returns:
--Index of closest plane to p
--Distance to surface from p
function ClosestNormalVector(p, planes)
&#9;local best_d = -math.huge
&#9;local best_i
&#9;for i = 1, #planes do
&#9;&#9;local plane = planes[i]
&#9;&#9;local d = IdentityVector.Dot(plane[1], (p - plane[2]))
&#9;&#9;if d &gt; best_d then
&#9;&#9;&#9;best_i, best_d = i, d
&#9;&#9;end
&#9;end
&#9;return best_i, best_d
end

--Part geometry data
UnitaryConvexPlaneMeshes = { --Each component of the normal vector dependent on every component of the size using matrices
&#9;WedgePart = {{Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {CFrame.new(0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0), Vector3.new(0, 0, 0)}, {Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}}, 
&#9;CornerWedgePart = {{Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0), Vector3.new(0, 0, 0)}, {CFrame.new(0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0), Vector3.new(0, 0, 0)}}, 
&#9;Part = {{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}}
}

--Terrain geometry data
TerrainCellSize = Vector3.new(4, 4, 4) --Arbitrary size input
TerrainCellOrientations = {
&#9;[0] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1), 
&#9;CFrame.new(0, 0, 0, 0, 0, 1, 0, 1, 0, -1, 0, 0), 
&#9;CFrame.new(0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1), 
&#9;CFrame.new(0, 0, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}
TerrainCellBlockUnitaryConvexPlaneMeshes = {
&#9;[0] = {{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0), Vector3.new(0, 0, 0)}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, -1, -1, 1, 0, 1, 1, 1, 0), Vector3.new(0.5, -0.5, -0.5)/3}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, 0, 1), Vector3.new(0, 0, 0.5)}, {Vector3.new(-1, 0, 0), Vector3.new(-0.5, 0, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, -1, -1, 1, 0, 1, 1, 1, 0), Vector3.new(-0.5, 0.5, 0.5)/3}}, 
&#9;{{Vector3.new(1, 0, 0), Vector3.new(0.5, 0, 0)}, {Vector3.new(0, 1, 0), Vector3.new(0, 0.5, 0)}, {Vector3.new(0, -1, 0), Vector3.new(0, -0.5, 0)}, {Vector3.new(0, 0, -1), Vector3.new(0, 0, -0.5)}, {CFrame.new(0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0), Vector3.new(0, 0, 0)}}
}

function NormalVector(part, point)
&#9;if part.ClassName == &quot;Part&quot; and (part.Shape == Enum.PartType.Ball or part.Shape == Enum.PartType.Cylinder) then
&#9;&#9;return IdentityCFrame.vectorToWorldSpace(part.CFrame, IdentityCFrame.pointToObjectSpace(part.CFrame, point).unit)
&#9;else
&#9;&#9;local partCFrame, partSize = part.CFrame, part.Size
&#9;&#9;local UCPM
&#9;&#9;if part.ClassName == &quot;Terrain&quot; then
&#9;&#9;&#9;local CellGridLocation = WorldToCellPreferSolid(part, Vector3.new(point.x, (point.y - 1e-5), point.z))--Ugly floating point fix
&#9;&#9;&#9;local CellMaterial, CellBlock, CellOrientation = GetCell(part, CellGridLocation.x, CellGridLocation.y, CellGridLocation.z)
&#9;&#9;&#9;partCFrame = (TerrainCellOrientations[CellOrientation.Value] + CellCenterToWorld(part, CellGridLocation.x, CellGridLocation.y, CellGridLocation.z))
&#9;&#9;&#9;partSize = TerrainCellSize
&#9;&#9;&#9;UCPM = TerrainCellBlockUnitaryConvexPlaneMeshes[CellBlock.Value]
&#9;&#9;else
&#9;&#9;&#9;UCPM = UnitaryConvexPlaneMeshes[part.ClassName] or UnitaryConvexPlaneMeshes.Part --Trusses, SpawnLocations, etc.
&#9;&#9;end
&#9;&#9;local CPM = {}
&#9;&#9;for i = 1, #UCPM do
&#9;&#9;&#9;local plane = UCPM[i]
&#9;&#9;&#9;CPM[i] = {(plane[1] * partSize).unit, plane[2] * partSize}
&#9;&#9;end
&#9;&#9;local PlaneIndex, DistanceToSurface = ClosestNormalVector(IdentityCFrame.pointToObjectSpace(partCFrame, point), CPM)
&#9;&#9;if PlaneIndex then
&#9;&#9;&#9;return IdentityCFrame.vectorToWorldSpace(partCFrame, CPM[PlaneIndex][1])
&#9;&#9;else
&#9;&#9;&#9;return IdentityVector --Dead code unless the tables are tampered with
&#9;&#9;end
&#9;end
end

return NormalVector</ProtectedString>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX4A935E1901D84089B019AEB7E868834B">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset?id=190032723</url></Content>
				<string name="Name">IdleLegs</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBXC2081FE0DC63403A85236804E303A680">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=190070830</url></Content>
				<string name="Name">Swing</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX336A78750DEE45D7B6E56FFECB3084A1">
			<Properties>
				<Content name="AnimationId"><null></null></Content>
				<string name="Name">Tuck</string>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX931B7CDA47AC46F3AC279AE9D8094F6B">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-0.498961329</X>
					<Y>21.9091167</Y>
					<Z>20.7450905</Z>
					<R00>-0.958950043</R00>
					<R01>0.274293959</R01>
					<R02>-0.0719554201</R02>
					<R10>-0</R10>
					<R11>0.253743887</R11>
					<R12>0.967271447</R12>
					<R20>0.283574969</R20>
					<R21>0.927564979</R21>
					<R22>-0.243327737</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-0.39822337</X>
					<Y>20.5549316</Y>
					<Z>21.0857506</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>