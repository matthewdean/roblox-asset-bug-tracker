<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>-3.05227701e-008</Y>
				<Z>-1.52613865e-007</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>0</R11>
				<R12>-1</R12>
				<R20>0</R20>
				<R21>1</R21>
				<R22>0</R22>
			</CoordinateFrame>
			<string name="Name">GigantoformPotion</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=72639382 </url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Script" referent="RBX1">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ServerScript</string>
				<ProtectedString name="Source">--Rescripted by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
Debris = game:GetService(&quot;Debris&quot;)
InsertService = game:GetService(&quot;InsertService&quot;)

Animations = {
&#9;Drink = Tool:WaitForChild(&quot;Drink&quot;),
&#9;Rage = Tool:WaitForChild(&quot;Rage&quot;)
}

Sounds = {
&#9;Rage = Handle:WaitForChild(&quot;RageSound&quot;)
}

ReloadTime = 15

ScaleFactor = 2

HulkId = 72648316
HulkModel = InsertService:LoadAsset(HulkId)
Hulk = HulkModel:GetChildren()[1]:Clone()
HulkModel:Destroy()

for i, v in pairs(Hulk:GetChildren()) do
&#9;if v:IsA(&quot;BaseScript&quot;) or v:IsA(&quot;Humanoid&quot;) then
&#9;&#9;v:Destroy()
&#9;end
end

TransformReady = true
Morphing = false

ServerControl = (Tool:FindFirstChild(&quot;ServerControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ServerControl.Name = &quot;ServerControl&quot;
ServerControl.Parent = Tool

ClientControl = (Tool:FindFirstChild(&quot;ClientControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ClientControl.Name = &quot;ClientControl&quot;
ClientControl.Parent = Tool

Tool.Enabled = true

ServerControl.OnServerInvoke = (function(player, Mode, Value)
&#9;if Mode == &quot;MouseClick&quot; and Value then
&#9;&#9;Transform()
&#9;end
end)

function InvokeClient(Mode, Value)
&#9;pcall(function()
&#9;&#9;ClientControl:InvokeClient(Player, Mode, Value)
&#9;end)
end

function CheckObjectClass(Classes, Object)
&#9;for i, v in pairs(Classes) do
&#9;&#9;if Object:IsA(v) then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false
end

function GetObjectsByClassName(Parent, Classes)
&#9;local Objects = {}
&#9;local function GetAllObjectsByClassName(Parent)
&#9;&#9;for i, v in pairs(Parent:GetChildren()) do
&#9;&#9;&#9;if v.Parent ~= Tool then
&#9;&#9;&#9;&#9;if CheckObjectClass(Classes, v) then
&#9;&#9;&#9;&#9;&#9;table.insert(Objects, v)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;GetAllObjectsByClassName(v)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;GetAllObjectsByClassName(Parent)
&#9;return Objects
end

function CheckTableForInstance(Table, Instance)
&#9;for i, v in pairs(Table) do
&#9;&#9;if v == Instance then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false
end

function CheckTableForString(Table, String)
&#9;for i, v in pairs(Table) do
&#9;&#9;if string.lower(v) == string.lower(String) then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false
end

function GripCheck(NewGrip)
&#9;if NewGrip:IsA(&quot;Weld&quot;) and NewGrip.Name == &quot;RightGrip&quot; then
&#9;&#9;NewGrip.C0 = NewGrip.C0 + (ScaleFactor - 1) * NewGrip.C0.p
&#9;&#9;NewGrip.C1 = NewGrip.C1 + (ScaleFactor - 1) * NewGrip.C1.p
&#9;end
end

function ResizeTool(NewTool, Shrink, Table)
&#9;if NewTool:IsA(&quot;Tool&quot;) then
&#9;&#9;if not Shrink then
&#9;&#9;&#9;if Table and not CheckTableForInstance(Table, NewTool) then
&#9;&#9;&#9;&#9;table.insert(Table, NewTool)
&#9;&#9;&#9;end
&#9;&#9;elseif Shrink then
&#9;&#9;&#9;for i, v in pairs(Table) do
&#9;&#9;&#9;&#9;if v == NewTool then
&#9;&#9;&#9;&#9;&#9;table.remove(Table, i)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local Handle = NewTool:FindFirstChild(&quot;Handle&quot;)
&#9;&#9;if Handle then
&#9;&#9;&#9;for i, v in pairs(Handle:GetChildren()) do
&#9;&#9;&#9;&#9;if v:IsA(&quot;DataModelMesh&quot;) then
&#9;&#9;&#9;&#9;&#9;v.Scale = ((not Shrink and (v.Scale * ScaleFactor)) or (Shrink and (v.Scale / ScaleFactor)))
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function SetHumanoid(humanoid, MaxHealth, WalkSpeed)
&#9;if not humanoid or not humanoid.Parent or humanoid.Health == 0 then
&#9;&#9;return
&#9;end
&#9;local Ratio = (humanoid.Health / humanoid.MaxHealth)
&#9;humanoid.WalkSpeed = WalkSpeed
&#9;humanoid.MaxHealth = MaxHealth
&#9;humanoid.Health = (Ratio * humanoid.MaxHealth)
end

function GetRightGrip()
&#9;local RightArm = nil
&#9;local RightGrip = nil
&#9;if CurrentCharacter and CurrentCharacter.Parent then
&#9;&#9;RightArm = CurrentCharacter:FindFirstChild(&quot;Right Arm&quot;)
&#9;&#9;if RightArm then
&#9;&#9;&#9;RightGrip = RightArm:FindFirstChild(&quot;RightGrip&quot;)
&#9;&#9;&#9;if RightGrip then
&#9;&#9;&#9;&#9;RightGrip = RightGrip:Clone()
&#9;&#9;&#9;&#9;CurrentGrip = RightGrip
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;return RightArm, RightGrip
end

function Transform()
&#9;if not TransformReady or not Character.Parent or Character:FindFirstChild(&quot;GiantMorphed&quot;) or not Humanoid.Parent or Humanoid.Health == 0 or not Torso.Parent or not Tool.Enabled then
&#9;&#9;return
&#9;end
&#9;Tool.Enabled = false
&#9;TransformReady = false
&#9;
&#9;CurrentCharacter = Character
&#9;CurrentHumanoid = Humanoid
&#9;CurrentTorso = Torso&#9;

&#9;local GiantMorphed = Instance.new(&quot;StringValue&quot;)
&#9;GiantMorphed.Name = &quot;GiantMorphed&quot;
&#9;GiantMorphed.Parent = CurrentCharacter
&#9;Debris:AddItem(GiantMorphed, (ReloadTime + 5))
&#9;
&#9;local Items = {}
&#9;local HulkItems = {}
&#9;local OriginalColors = {}&#9;
&#9;local Tools = {}
&#9;
&#9;local Limbs = {}
&#9;local Motors = {}
&#9;local HulkMotors = {}
&#9;
&#9;InvokeClient(&quot;PlayAnimation&quot;, {Animation = Animations.Drink, Speed = nil})
&#9;wait(1.25)
&#9;InvokeClient(&quot;PlayAnimation&quot;, {Animation = Animations.Rage, Speed = nil})
&#9;wait(0.6)
&#9;InvokeClient(&quot;PlaySound&quot;, Sounds.Rage)
&#9;wait(0.5)
&#9;InvokeClient(&quot;PlayAnimation&quot;, {Animation = Animations.Rage, Speed = nil})
&#9;
&#9;if Tool.Parent ~= CurrentCharacter then
&#9;&#9;Tool.Enabled = true
&#9;&#9;TransformReady = true
&#9;&#9;return
&#9;end&#9;
&#9;
&#9;Morphing = true&#9;
&#9;
&#9;local RightArm, RightGrip = GetRightGrip()
&#9;
&#9;local ItemsTable = GetObjectsByClassName(CurrentCharacter, {&quot;Clothing&quot;, &quot;Decal&quot;, &quot;Texture&quot;, &quot;ShirtGraphic&quot;, &quot;BodyColors&quot;, &quot;Hat&quot;, &quot;CharacterMesh&quot;, &quot;SpecialMesh&quot;})
&#9;for i, v in pairs(ItemsTable) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;table.insert(Items, {Parent = v.Parent, NewObject = v:Clone()})
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs(Hulk:GetChildren()) do
&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;local Part = CurrentCharacter:FindFirstChild(v.Name)
&#9;&#9;&#9;if Part then
&#9;&#9;&#9;&#9;table.insert(OriginalColors, {Part = Part, OriginalColor = Part.BrickColor})
&#9;&#9;&#9;&#9;Part.BrickColor = v.BrickColor
&#9;&#9;&#9;&#9;local Objects = GetObjectsByClassName(v, {&quot;Clothing&quot;, &quot;Decal&quot;, &quot;Texture&quot;, &quot;ShirtGraphic&quot;, &quot;BodyColors&quot;, &quot;Hat&quot;, &quot;CharacterMesh&quot;, &quot;SpecialMesh&quot;})
&#9;&#9;&#9;&#9;for ii, vv in pairs(Objects) do
&#9;&#9;&#9;&#9;&#9;local Object = vv:Clone()
&#9;&#9;&#9;&#9;&#9;table.insert(HulkItems, Object)
&#9;&#9;&#9;&#9;&#9;Object.Parent = Part
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local BodyColors = Instance.new(&quot;BodyColors&quot;) --To counter client sided BrickColor glitch which colors remain the same
&#9;local Limbs = {&quot;Head&quot;, &quot;Torso&quot;, &quot;Left Arm&quot;, &quot;Right Arm&quot;, &quot;Left Leg&quot;, &quot;Right Leg&quot;}
&#9;for i, v in pairs(CurrentCharacter:GetChildren()) do
&#9;&#9;if CheckTableForString(Limbs, v.Name) then
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;BodyColors[(string.gsub(v.Name, &quot; &quot;, &quot;&quot;) .. &quot;Color&quot;)] = v.BrickColor
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end
&#9;Debris:AddItem(BodyColors, (ReloadTime + 5))
&#9;BodyColors.Parent = CurrentCharacter

&#9;for i, v in pairs(CurrentCharacter:GetChildren()) do
&#9;&#9;if v:IsA(&quot;Tool&quot;) then
&#9;&#9;&#9;ResizeTool(v, false, Tools)
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs(CurrentTorso:GetChildren()) do
&#9;&#9;if v:IsA(&quot;JointInstance&quot;) and v:IsA(&quot;Motor6D&quot;) and v.Part0 and v.Part1 then
&#9;&#9;&#9;table.insert(Motors, {Name = v.Name, Object = v:Clone(), Parent = v.Parent, Part0 = v.Part0, Part1 = v.Part1, Part0Size = v.Part0.Size, Part1Size = v.Part1.Size, C0 = v.C0, C1 = v.C1, MaxVelocity = v.MaxVelocity})
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end

&#9;for i, v in pairs(Hulk:FindFirstChild(&quot;Torso&quot;):GetChildren()) do
&#9;&#9;if v:IsA(&quot;Motor6D&quot;) and v.Part0 and v.Part0.Parent and v.Part1 and v.Part1.Parent then
&#9;&#9;&#9;local Part0 = CurrentCharacter:FindFirstChild(v.Part0.Name)
&#9;&#9;&#9;local Part1 = CurrentCharacter:FindFirstChild(v.Part1.Name)
&#9;&#9;&#9;if Part0 and Part1 then
&#9;&#9;&#9;&#9;local NewMotor = Instance.new(&quot;Motor6D&quot;)
&#9;&#9;&#9;&#9;NewMotor.Name = v.Name
&#9;&#9;&#9;&#9;NewMotor.Part0 = Part0
&#9;&#9;&#9;&#9;NewMotor.Part1 = Part1
&#9;&#9;&#9;&#9;NewMotor.C0 = v.C0
&#9;&#9;&#9;&#9;NewMotor.C1 = v.C1
&#9;&#9;&#9;&#9;if not CheckTableForInstance(Limbs, Part0) then
&#9;&#9;&#9;&#9;&#9;NewMotor.Part0.FormFactor = Enum.FormFactor.Custom
&#9;&#9;&#9;&#9;&#9;NewMotor.Part0.Size = v.Part0.Size
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if not CheckTableForInstance(Limbs, Part1) then
&#9;&#9;&#9;&#9;&#9;NewMotor.Part1.FormFactor = Enum.FormFactor.Custom
&#9;&#9;&#9;&#9;&#9;NewMotor.Part1.Size = v.Part1.Size
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;table.insert(HulkMotors, NewMotor)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local HumanoidRootPart = CurrentCharacter:FindFirstChild(&quot;HumanoidRootPart&quot;)
&#9;if HumanoidRootPart then
&#9;&#9;for i, v in pairs(HumanoidRootPart:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;JointInstance&quot;) and v:IsA(&quot;Motor6D&quot;) then
&#9;&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;HumanoidRootPart.FormFactor = Enum.FormFactor.Custom
&#9;&#9;HumanoidRootPart.Size = CurrentTorso.Size
&#9;&#9;local RootJoint = Instance.new(&quot;Motor6D&quot;)
&#9;&#9;RootJoint.Name = &quot;RootJoint&quot;
&#9;&#9;RootJoint.Part0 = HumanoidRootPart
&#9;&#9;RootJoint.Part1 = CurrentTorso
&#9;&#9;RootJoint.C0 = CFrame.new(0, 0, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
&#9;&#9;RootJoint.C1 = CFrame.new(0, 0, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
&#9;&#9;RootJoint.Parent = HumanoidRootPart
&#9;end
&#9;
&#9;for i, v in pairs(HulkMotors) do
&#9;&#9;v.Parent = CurrentTorso
&#9;end
&#9;
&#9;if RightArm and RightArm.Parent and RightGrip then
&#9;&#9;pcall(function()
&#9;&#9;&#9;RightGrip.Parent = RightArm
&#9;&#9;end)
&#9;&#9;GripCheck(RightGrip)
&#9;end
&#9;
&#9;Morphing = false
&#9;
&#9;SetHumanoid(CurrentHumanoid, 500, 24)
&#9;
&#9;if RightArm then
&#9;&#9;ToolGrip = RightArm.ChildAdded:connect(function(Child)
&#9;&#9;&#9;GripCheck(Child)
&#9;&#9;end)
&#9;end
&#9;
&#9;ToolAdded = CurrentCharacter.ChildAdded:connect(function(Child)
&#9;&#9;ResizeTool(Child, false, Tools)
&#9;end)
&#9;
&#9;ToolRemoved = CurrentCharacter.ChildRemoved:connect(function(Child)
&#9;&#9;ResizeTool(Child, true, Tools)
&#9;end)
&#9;
&#9;wait(ReloadTime)
&#9;
&#9;RightArm, RightGrip = GetRightGrip()
&#9;
&#9;SetHumanoid(CurrentHumanoid, 100, 16)
&#9;
&#9;for i, v in pairs(CurrentTorso:GetChildren()) do
&#9;&#9;if v:IsA(&quot;JointInstance&quot;) and v:IsA(&quot;Motor6D&quot;) then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;local NewMotors = {}
&#9;Limbs = {}
&#9;
&#9;for i, v in pairs(Motors) do
&#9;&#9;if not CheckTableForInstance(Limbs, Part0) then
&#9;&#9;&#9;v.Part0.FormFactor = Enum.FormFactor.Custom
&#9;&#9;&#9;v.Part0.Size = v.Part0Size
&#9;&#9;end
&#9;&#9;if not CheckTableForInstance(Limbs, Part1) then
&#9;&#9;&#9;v.Part1.FormFactor = Enum.FormFactor.Custom
&#9;&#9;&#9;v.Part1.Size = v.Part1Size
&#9;&#9;end
&#9;&#9;local Motor = Instance.new(&quot;Motor6D&quot;)
&#9;&#9;Motor.Name = v.Name
&#9;&#9;Motor.Part0 = v.Part0
&#9;&#9;Motor.Part1 = v.Part1
&#9;&#9;Motor.C0 = v.C0
&#9;&#9;Motor.C1 = v.C1
&#9;&#9;Motor.MaxVelocity = v.MaxVelocity
&#9;&#9;table.insert(NewMotors, Motor)
&#9;end

&#9;local HumanoidRootPart = CurrentCharacter:FindFirstChild(&quot;HumanoidRootPart&quot;)
&#9;if HumanoidRootPart then
&#9;&#9;for i, v in pairs(HumanoidRootPart:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;JointInstance&quot;) and v:IsA(&quot;Motor6D&quot;) then
&#9;&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;HumanoidRootPart.FormFactor = Enum.FormFactor.Custom
&#9;&#9;HumanoidRootPart.Size = CurrentTorso.Size
&#9;&#9;local RootJoint = Instance.new(&quot;Motor6D&quot;)
&#9;&#9;RootJoint.Name = &quot;RootJoint&quot;
&#9;&#9;RootJoint.Part0 = HumanoidRootPart
&#9;&#9;RootJoint.Part1 = CurrentTorso
&#9;&#9;RootJoint.C0 = CFrame.new(0, 0, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
&#9;&#9;RootJoint.C1 = CFrame.new(0, 0, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
&#9;&#9;RootJoint.Parent = HumanoidRootPart
&#9;end
&#9;
&#9;for i, v in pairs(NewMotors) do
&#9;&#9;v.Parent = CurrentTorso
&#9;end
&#9;
&#9;for i, v in pairs(HulkMotors) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;v.Part0 = nil
&#9;&#9;&#9;v.Part1 = nil
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs(OriginalColors) do
&#9;&#9;if v and v.Part and v.Part.Parent then
&#9;&#9;&#9;v.Part.BrickColor = v.OriginalColor
&#9;&#9;end
&#9;end&#9;
&#9;
&#9;for i, v in pairs(HulkItems) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs(Items) do
&#9;&#9;if v.Parent then
&#9;&#9;&#9;v.NewObject.Parent = v.Parent
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs({ToolGrip, ToolAdded, ToolRemoved}) do
&#9;&#9;if v then
&#9;&#9;&#9;v:disconnect()
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs(Tools) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;ResizeTool(v, true, Tools)
&#9;&#9;end
&#9;end
&#9;
&#9;if not RightGrip then
&#9;&#9;RightArm, RightGrip = GetRightGrip()
&#9;end
&#9;if RightArm and RightArm.Parent and RightGrip then
&#9;&#9;if Tool.Parent == CurrentCharacter then
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;RightGrip.Parent = RightArm
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;&#9;if RightGrip.Part1 and RightGrip.Part1.Parent and RightGrip.Part1.Parent:IsA(&quot;Tool&quot;) then
&#9;&#9;&#9;CurrentHumanoid:EquipTool(RightGrip.Part1.Parent)
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs({GiantMorphed, BodyColors}) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;for i, v in pairs(CurrentCharacter:GetChildren()) do --Prevents the giant&apos;s BodyColors from showing on the client
&#9;&#9;if v:IsA(&quot;BodyColors&quot;) then
&#9;&#9;&#9;local Object = v:Clone()
&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;Object.Parent = CurrentCharacter
&#9;&#9;end
&#9;end
&#9;
&#9;TransformReady = true
&#9;Tool.Enabled = true
end

function Equipped()
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;Torso = Character:FindFirstChild(&quot;Torso&quot;)
&#9;if not Player or not Humanoid or Humanoid.Health == 0 or not Torso then
&#9;&#9;return
&#9;end
end

function Unequipped()
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)

Tool.Changed:connect(function(Property)
&#9;if Property == &quot;Parent&quot; and Tool.Parent ~= CurrentCharacter then
&#9;&#9;if CurrentGrip and not Morphing then
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;CurrentGrip:Destroy()
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end
end)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX2">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>24.192379</X>
					<Y>7.45306683</Y>
					<Z>27.4188042</Z>
					<R00>0.752917945</R00>
					<R01>0.657956004</R01>
					<R02>0.0144351693</R02>
					<R10>-1.56407785e-014</R10>
					<R11>-0.0219341367</R11>
					<R12>0.999759436</R12>
					<R20>0.658114314</R20>
					<R21>-0.752736807</R21>
					<R22>-0.0165146049</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1.38999748</X>
					<Y>1</Y>
					<Z>2.01999927</Z>
				</Vector3>
			</Properties>
			<Item class="Sound" referent="RBX3">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">RageSound</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=72664863</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
			<Item class="SpecialMesh" referent="RBX4">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=72639103 </url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.20000005</X>
						<Y>1.20000005</Y>
						<Z>1.20000005</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=72639133 </url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX5">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ClientScript</string>
				<ProtectedString name="Source">--Rescripted by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)

Animations = {}
Sounds = {}

ServerControl = Tool:WaitForChild(&quot;ServerControl&quot;)
ClientControl = Tool:WaitForChild(&quot;ClientControl&quot;)

ClientControl.OnClientInvoke = (function(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local AnimationTrack = Humanoid:LoadAnimation(Value.Animation)
&#9;&#9;table.insert(Animations, {Animation = Value.Animation, AnimationTrack = AnimationTrack})
&#9;&#9;AnimationTrack:Play(nil, nil, Value.Speed)
&#9;elseif Mode == &quot;PlaySound&quot; then
&#9;&#9;for i, v in pairs(Sounds) do
&#9;&#9;&#9;if v == Value then
&#9;&#9;&#9;&#9;table.remove(Sounds, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;table.insert(Sounds, Value)
&#9;&#9;Value:Play()
&#9;end
end)

function InvokeServer(Mode, Value)
&#9;pcall(function()
&#9;&#9;ServerControl:InvokeServer(Mode, Value)
&#9;end)
end

function Equipped(Mouse)
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;if not Player or not Humanoid or Humanoid.Health == 0 then
&#9;&#9;return
&#9;end
&#9;Mouse.Button1Down:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, true)
&#9;end)
end

function Unequipped()
&#9;for i, v in pairs(Animations) do
&#9;&#9;if v and v.AnimationTrack then
&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs(Sounds) do
&#9;&#9;if v then
&#9;&#9;&#9;v:Stop()
&#9;&#9;end
&#9;end
&#9;Animations = {}
&#9;Sounds = {}
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX6">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/Asset?ID=55306564</url></Content>
				<string name="Name">Drink</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX7">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/Asset?ID=72635723</url></Content>
				<string name="Name">Rage</string>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX8">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Mouse_Icon = &quot;rbxasset://textures/GunCursor.png&quot;
Reloading_Icon = &quot;rbxasset://textures/GunWaitCursor.png&quot;

Tool = script.Parent

Mouse = nil

function UpdateIcon()
&#9;if Mouse then
&#9;&#9;Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
&#9;end
end

function OnEquipped(ToolMouse)
&#9;Mouse = ToolMouse
&#9;UpdateIcon()
end

function OnChanged(Property)
&#9;if Property == &quot;Enabled&quot; then
&#9;&#9;UpdateIcon()
&#9;end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX9">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">5</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>23.6247311</X>
					<Y>7.66299772</Y>
					<Z>29.6876755</Z>
					<R00>0.966666341</R00>
					<R01>0.0266966987</R01>
					<R02>-0.254643768</R02>
					<R10>-0</R10>
					<R11>0.994549215</R11>
					<R12>0.104267955</R12>
					<R20>0.256039351</R20>
					<R21>-0.100792326</R21>
					<R22>0.96139729</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>23.9557686</X>
					<Y>7.52744913</Y>
					<Z>28.4378567</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>