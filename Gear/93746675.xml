<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>0.25</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">CrashBernstein</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=93589140</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX1">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>-1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>1</R11>
					<R12>-0</R12>
					<R20>-0</R20>
					<R21>0</R21>
					<R22>-1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1.83999956</X>
					<Y>3.43999958</Y>
					<Z>0.849999964</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX2">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=93589363</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.21500003</X>
						<Y>1.21500003</Y>
						<Z>1.21500003</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=93589165</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX3">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Local Gui</string>
				<ProtectedString name="Source">local Tool = script.Parent

local sg = nil
local frame = nil

local stillEquipped = false

local function onEquippedLocal(mouse)
&#9;stillEquipped = true

&#9;local vPlayer = game.Players.LocalPlayer
&#9;local playerGui = vPlayer:FindFirstChild(&quot;PlayerGui&quot;)
&#9;if playerGui and playerGui:FindFirstChild(&quot;PetGui&quot;) == nil then
&#9;&#9;sg = Instance.new(&quot;ScreenGui&quot;)
&#9;&#9;sg.Name = &quot;PetGui&quot;
&#9;&#9;sg.Parent = playerGui

&#9;&#9;frame = Instance.new(&quot;Frame&quot;)
&#9;&#9;frame.Parent = sg
&#9;&#9;frame.Style = Enum.FrameStyle.RobloxRound
&#9;&#9;frame.Size = UDim2.new(0, 120, 0, 30)
&#9;&#9;frame.Position = UDim2.new(0.5, -60, 1, -130)

&#9;&#9;local genericTextLabel = Instance.new(&quot;TextLabel&quot;)
&#9;&#9;genericTextLabel.BackgroundTransparency = 1.0
&#9;&#9;genericTextLabel.Size = UDim2.new(1, 0, 1, 0)
&#9;&#9;genericTextLabel.Visible = true
&#9;&#9;genericTextLabel.ZIndex = 10
&#9;&#9;genericTextLabel.FontSize = Enum.FontSize.Size10
&#9;&#9;genericTextLabel.Font = Enum.Font.Legacy
&#9;&#9;genericTextLabel.TextColor3 = Color3.new(1, 0, 1)
&#9;&#9;genericTextLabel.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;genericTextLabel.TextYAlignment = Enum.TextYAlignment.Top
&#9;&#9;genericTextLabel.Parent = frame
&#9;&#9;genericTextLabel.Text = &quot;Click to call Crash!&quot;
&#9;end

&#9;if not mouse then return end

&#9;while stillEquipped do
&#9;&#9;mouse.Icon = &quot;rbxasset://textures\\GunCursor.png&quot;
&#9;&#9;while Tool.Enabled and stillEquipped do
&#9;&#9;&#9;wait(0.01)
&#9;&#9;end
&#9;&#9;mouse.Icon = &quot;rbxasset://textures\\GunWaitCursor.png&quot;
&#9;&#9;while not Tool.Enabled and stillEquipped do
&#9;&#9;&#9;wait(0.01)
&#9;&#9;end
&#9;end
end

local function onActivatedLocal()
&#9;if frame and frame:FindFirstChild(&quot;TextLabel&quot;) then
&#9;&#9;frame.Size = UDim2.new(0, 300, 0, 30)
&#9;&#9;frame.Position = UDim2.new(0.5, -150, 1, -130)
&#9;&#9;frame.TextLabel.Text = &quot;Click players to see Crash do something crazy!&quot;
&#9;end
end

local function onUnequippedLocal()
&#9;if sg then sg:Remove() end
&#9;stillEquipped = false
end

Tool.Equipped:connect(onEquippedLocal)
Tool.Activated:connect(onActivatedLocal)
Tool.Unequipped:connect(onUnequippedLocal)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX4">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">PetToolScript</string>
				<ProtectedString name="Source">-----------------
--| Constants |--
-----------------

local COOLDOWN = 0.5 --TODO: 4 -- Seconds until Tool can be used again
local TIME_TO_LIVE = 300 -- Seconds until the pet is destroyed
local RESPAWN_TIME = 4 -- Seconds until pet can be re-summoned (only after death)

--------------------
--| WaitForChild |--
--------------------

-- Waits for parent.child to exist, then returns it
local function WaitForChild(parent, childName)
&#9;assert(parent, &quot;ERROR: WaitForChild: parent is nil&quot;)
&#9;while not parent:FindFirstChild(childName) do parent.ChildAdded:wait() end
&#9;return parent[childName]
end

-----------------
--| Variables |--
-----------------

local InsertService = Game:GetService(&apos;InsertService&apos;)
local DebrisService = Game:GetService(&apos;Debris&apos;)
local PlayersService = Game:GetService(&apos;Players&apos;)

local Tool = script.Parent
local ToolHandle = Tool.Handle

local AiScript = WaitForChild(script, &apos;CrashAi&apos;)
local OwnerTag = WaitForChild(AiScript, &apos;Owner&apos;)

local SummonSound --TODO: = WaitForChild(ToolHandle, &apos;Laugh1&apos;)

local AnimationScript = WaitForChild(Tool, &apos;PetAnimation&apos;)
local PetObject = WaitForChild(AnimationScript, &apos;Pet&apos;)

local MyModel = nil
local MyTorso = nil
local MyHumanoid = nil

local Pet = nil
local AnimationScriptClone = nil

-----------------
--| Functions |--
-----------------

local function OnEquipped()
&#9;MyModel = Tool.Parent
&#9;MyTorso = MyModel:FindFirstChild(&apos;Torso&apos;)
&#9;MyHumanoid = MyModel:FindFirstChild(&apos;Humanoid&apos;)
&#9;OwnerTag.Value = MyModel
end

local function Summon()
&#9;if not MyTorso or not MyHumanoid then return end

&#9;local superModel = InsertService:LoadAsset(93746797):GetChildren()[1]
&#9;if not superModel then return end

&#9;Pet = superModel:FindFirstChild(&apos;Crash&apos;)
&#9;local pickleJar = superModel:FindFirstChild(&apos;PickleJar&apos;)
&#9;local dynamite = superModel:FindFirstChild(&apos;Dynamite&apos;)

&#9;if Pet and pickleJar and dynamite then
&#9;&#9;DebrisService:AddItem(Pet, TIME_TO_LIVE) -- Make sure it will get deleted

&#9;&#9;local humanoid = Instance.new(&apos;Humanoid&apos;)
&#9;&#9;humanoid.MaxHealth = 1000
&#9;&#9;humanoid.Health = 1000
&#9;&#9;humanoid.WalkSpeed = 24
&#9;&#9;humanoid.Parent = Pet

&#9;&#9;Pet.Parent = Workspace
&#9;&#9;ToolHandle.Transparency = 1.0

&#9;&#9;local torso = WaitForChild(Pet, &apos;Torso&apos;)
&#9;&#9;torso.Anchored = false

&#9;&#9;-- Play the summoning sound
&#9;&#9;if SummonSound then SummonSound:Play() end

&#9;&#9;-- Send pet object to AnimationScript
&#9;&#9;PetObject.Value = Pet

&#9;&#9;-- Clone AnimationScript to MyModel
&#9;&#9;local animationScriptClone = AnimationScript:Clone()
&#9;&#9;AnimationScriptClone = animationScriptClone
&#9;&#9;DebrisService:AddItem(animationScriptClone, TIME_TO_LIVE)
&#9;&#9;animationScriptClone.Parent = MyModel
&#9;&#9;animationScriptClone.Disabled = false

&#9;&#9;-- Clone AiScript to Pet
&#9;&#9;local aiScriptClone = AiScript:Clone()
&#9;&#9;aiScriptClone.Parent = Pet
&#9;&#9;do -- Send the attachments
&#9;&#9;&#9;local pickleJarObject = Instance.new(&apos;ObjectValue&apos;, aiScriptClone)
&#9;&#9;&#9;pickleJarObject.Name = &apos;PickleJar&apos;
&#9;&#9;&#9;pickleJarObject.Value = pickleJar
&#9;&#9;&#9;local dynamiteObject = Instance.new(&apos;ObjectValue&apos;, aiScriptClone)
&#9;&#9;&#9;dynamiteObject.Name = &apos;Dynamite&apos;
&#9;&#9;&#9;dynamiteObject.Value = dynamite
&#9;&#9;end
&#9;&#9;aiScriptClone.Disabled = false

&#9;&#9;-- On Pet death, clean up and show the handle
&#9;&#9;humanoid.Died:connect(function()
&#9;&#9;&#9;if AnimationScriptClone then AnimationScriptClone:Destroy() end
&#9;&#9;&#9;DebrisService:AddItem(Pet, RESPAWN_TIME)
&#9;&#9;&#9;wait(RESPAWN_TIME)
&#9;&#9;&#9;ToolHandle.Transparency = 0.0
&#9;&#9;end)

&#9;&#9;-- After TIME_TO_LIVE, show the handle
&#9;&#9;coroutine.resume(coroutine.create(function()
&#9;&#9;&#9;wait(TIME_TO_LIVE + 0.1)
&#9;&#9;&#9;if not Pet:FindFirstChild(&apos;Humanoid&apos;) then
&#9;&#9;&#9;&#9;ToolHandle.Transparency = 0.0
&#9;&#9;&#9;end
&#9;&#9;end))

&#9;&#9;-- Health has problems being set directly
&#9;&#9;Delay(5, function() if humanoid then humanoid:TakeDamage(-900) end end)
&#9;&#9;--[[Spawn(function()
&#9;&#9;&#9;while Pet and humanoid do
&#9;&#9;&#9;&#9;humanoid.MaxHealth = 1000
&#9;&#9;&#9;&#9;humanoid.Health = 1000
&#9;&#9;&#9;&#9;wait(1)
&#9;&#9;&#9;end
&#9;&#9;end)]]

&#9;&#9;Pet:MoveTo(MyTorso.Position + Vector3.new(math.random(-3, 3), 0, math.random(-3, 3)))
&#9;end
end

local function OnActivated()
&#9;if not Tool.Enabled or not MyTorso or not MyHumanoid then return end

&#9;Tool.Enabled = false

&#9;if not Pet or not Pet.Parent then
&#9;&#9;Summon()
&#9;end

&#9;-- Raycast to click location for ClickTarget setting
&#9;local target = MyHumanoid.TargetPoint
&#9;local direction = (target - MyTorso.Position).unit
&#9;local hit = Game.Workspace:FindPartOnRay(Ray.new(MyTorso.Position, direction * 150), MyModel)
&#9;if hit and Pet and Pet:FindFirstChild(&apos;ClickTarget&apos;) then
&#9;&#9;local clickedHumanoid = hit.Parent:FindFirstChild(&apos;Humanoid&apos;)
&#9;&#9;if clickedHumanoid and clickedHumanoid.Health &gt; 0 then
&#9;&#9;&#9;if Pet.ClickTarget.Value == clickedHumanoid then
&#9;&#9;&#9;&#9;Pet.ClickTarget.Value = nil -- Ensures a changed event
&#9;&#9;&#9;end
&#9;&#9;&#9;Pet.ClickTarget.Value = clickedHumanoid
&#9;&#9;&#9;wait(COOLDOWN) -- Only wait if they clicked a valid target
&#9;&#9;else
&#9;&#9;&#9;Pet.ClickTarget.Value = nil
&#9;&#9;end
&#9;end

&#9;Tool.Enabled = true
end

local function OnUnequipped()
&#9;if Pet then Pet:Destroy() end
&#9;if SummonSound then SummonSound:Stop() end
&#9;if AnimationScriptClone then AnimationScriptClone:Destroy() end
&#9;ToolHandle.Transparency = 0.0
end

--------------------
--| Script Logic |--
--------------------

Tool.Equipped:connect(OnEquipped)
Tool.Unequipped:connect(OnUnequipped)
Tool.Activated:connect(OnActivated)
</ProtectedString>
			</Properties>
			<Item class="Script" referent="RBX5">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CrashAi</string>
					<ProtectedString name="Source">-----------------
--| Constants |--
-----------------

local RBX_GRAVITY = -9.81 * 20
local ONE_STEP = 1 / 30
local OFFSET = Vector3.new(5, 0, 5) -- Distance from player or target
local MAX_DISTANCE = 240 -- The pet will stay within this distance of player
local JARS_TO_THROW = 3 -- Number of jars to throw
local DYNAMITE_TO_THROW = 1 -- Number of dynamite to throw
local MIN_GAP = 1.5 -- Seconds that must pass before the next mode can begin
local LAUNCH_SPEED = 60

--------------------
--| WaitForChild |--
--------------------

-- Waits for parent.child to exist, then returns it
local function WaitForChild(parent, childName)
&#9;assert(parent, &quot;ERROR: WaitForChild: parent is nil&quot;)
&#9;while not parent:FindFirstChild(childName) do parent.ChildAdded:wait() end
&#9;return parent[childName]
end

-----------------
--| Variables |--
-----------------

local DebrisService = Game:GetService(&apos;Debris&apos;)

local Pet = script.Parent
local PetHumanoid = WaitForChild(Pet, &apos;Humanoid&apos;)

local ClickTargetObject = WaitForChild(Pet, &apos;ClickTarget&apos;)
local NextTargetHumanoid = ClickTargetObject.Value

local MyModel = WaitForChild(script, &apos;Owner&apos;).Value
local MyHumanoid = WaitForChild(MyModel, &apos;Humanoid&apos;)

local RightArm = WaitForChild(Pet, &apos;Right Arm&apos;)
local SwooshSound = WaitForChild(RightArm, &apos;Swoosh&apos;)

local AnimationScript = WaitForChild(MyModel, &apos;PetAnimation&apos;)
local AnimationToPlayObject = WaitForChild(AnimationScript, &apos;AnimationToPlay&apos;)

local PetMode = 0
local StopTime = time()

local PickleJar = nil
local Dynamite = nil
local NinjaStar = nil

do -- Pick up the attachments, create the NinjaStar
&#9;local pickleJarObject = WaitForChild(script, &apos;PickleJar&apos;)
&#9;PickleJar = pickleJarObject.Value
&#9;pickleJarObject:Destroy()

&#9;local dynamiteObject = WaitForChild(script, &apos;Dynamite&apos;)
&#9;Dynamite = dynamiteObject.Value
&#9;dynamiteObject:Destroy()

&#9;NinjaStar = Instance.new(&apos;Part&apos;)
&#9;NinjaStar.Name = &apos;NinjaStar&apos;
&#9;local mesh = Instance.new(&apos;SpecialMesh&apos;, NinjaStar)
&#9;mesh.MeshId = &quot;http://www.roblox.com/asset/?id=92531211&quot;
&#9;mesh.TextureId = &quot;http://www.roblox.com/asset/?id=92531141&quot;
&#9;NinjaStar.Size = Vector3.new(1.5, 1.5, 0.5)

&#9;WaitForChild(PickleJar, &apos;Script&apos;):Clone().Parent = NinjaStar
end

-----------------
--| Functions |--
-----------------

local function Start(modeOverride)
&#9;PetMode = modeOverride or math.random(3)

&#9;--[[
&#9;if NextTargetHumanoid and NextTargetHumanoid.Torso and PetHumanoid and PetHumanoid.Torso then
&#9;&#9;if NextTargetHumanoid.Torso.Position.y &gt; 80 then
&#9;&#9;&#9;PetMode = 3
&#9;&#9;elseif (NextTargetHumanoid.Torso.Position - PetHumanoid.Torso.Position).magnitude &lt; 10 then
&#9;&#9;&#9;PetMode = 1
&#9;&#9;else
&#9;&#9;&#9;PetMode = 2
&#9;&#9;end
&#9;end
&#9;PetMode = modeOverride or PetMode
&#9;--]]

&#9;if NextTargetHumanoid then
&#9;&#9;TargetHumanoid = NextTargetHumanoid
&#9;end
end

local function Stop()
&#9;PetMode = 0
&#9;StopTime = time()
end

-- When the player clicks, update the target
ClickTargetObject.Changed:connect(function(newValue)
&#9;print(&quot;Changed!&quot;, newValue)
&#9;if newValue and newValue:IsA(&quot;Humanoid&quot;) and newValue ~= PetHumanoid then
&#9;&#9;NextTargetHumanoid = newValue
&#9;&#9;if PetMode == 0 and (time() - StopTime &gt; MIN_GAP) then
&#9;&#9;&#9;print(&quot;Manual Start&quot;)
&#9;&#9;&#9;Start()
&#9;&#9;end
&#9;end
end)

-- Returns the closest living Humanoid to position who isn&apos;t in excludeList
local function FindClosestHumanoid(position, excludeList) -- (Vector3, table)
&#9;if not position then print(&quot;Need a Vector3 position&quot;) return nil end

&#9;-- Change list values to keys so we can use indexing
&#9;local excludeSet = {}
&#9;if excludeList and type(excludeList) == &quot;table&quot; then
&#9;&#9;for _, l in ipairs(excludeList) do
&#9;&#9;&#9;excludeSet[l] = true
&#9;&#9;end
&#9;end

&#9;-- Search through Workspace children
&#9;local closestHumanoid = nil
&#9;for _, child in pairs(Game.Workspace:GetChildren()) do
&#9;&#9;if (child and child:FindFirstChild(&quot;Humanoid&quot;) and child.Humanoid.Health &gt; 0 and not excludeSet[child.Humanoid])
&#9;&#9;and (not closestHumanoid or (child.Humanoid.Torso.Position - position).magnitude &lt; (closestHumanoid.Torso.Position - position).magnitude) then
&#9;&#9;&#9;closestHumanoid = child.Humanoid
&#9;&#9;end
&#9;end
&#9;return closestHumanoid --NOTE: Can be nil
end

-- Coroutine to decide when to automatically start
coroutine.resume(coroutine.create(function()
&#9;wait(4)
&#9;while Pet do
&#9;&#9;if PetMode == 0 and math.random() &lt; 0.33 then
&#9;&#9;&#9;NextTargetHumanoid = FindClosestHumanoid(MyHumanoid.Torso.Position, {MyHumanoid, PetHumanoid})
&#9;&#9;&#9;if NextTargetHumanoid and NextTargetHumanoid.Torso then
&#9;&#9;&#9;&#9;local myDistanceToTarget = (NextTargetHumanoid.Torso.Position - MyHumanoid.Torso.Position).magnitude
&#9;&#9;&#9;&#9;if myDistanceToTarget &lt;= MAX_DISTANCE then
&#9;&#9;&#9;&#9;&#9;Start(1)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;wait(6)
&#9;end
end))

-- Rotates the pet horizontally to face the target
local function FaceTarget()
&#9;if PetHumanoid and PetHumanoid.Torso then
&#9;&#9;local position = PetHumanoid.Torso.Position
&#9;&#9;local lookPoint = TargetHumanoid.Torso.Position
&#9;&#9;PetHumanoid.Torso.CFrame = CFrame.new(position, Vector3.new(lookPoint.x, position.y, lookPoint.z)) -- Face target but stay horizontal
&#9;end
end

-- Returns total mass of instance and all children
local function GetMassRecursive(instance)
&#9;local mass = 0
&#9;if instance:IsA(&apos;BasePart&apos;) then
&#9;&#9;mass = mass + instance:GetMass()
&#9;end
&#9;for _, child in pairs(instance:getChildren()) do
&#9;&#9;if child then
&#9;&#9;&#9;mass = mass + GetMassRecursive(child)
&#9;&#9;end
&#9;end
&#9;return mass
end

local function Throw(part)
&#9;--local distanceToTarget = (TargetHumanoid.Torso.Position - PetHumanoid.Torso.Position).magnitude

&#9;--local angle = math.asin((RBX_GRAVITY * distanceToTarget) / (LAUNCH_SPEED * LAUNCH_SPEED)) / 2
&#9;--print(math.deg(angle), &quot;degrees&quot;)

&#9;local relativePositionsTable = {}
&#9;for _, child in pairs(part:GetChildren()) do
&#9;&#9;if child and child:IsA(&apos;Part&apos;) then
&#9;&#9;&#9;relativePositionsTable[child] = child.Position - part.Position
&#9;&#9;end
&#9;end
&#9;
&#9;part.CFrame = CFrame.new(RightArm.Position, TargetHumanoid.Torso.Position)
&#9;--part.Velocity = PetHumanoid.Torso.CFrame.lookVector * LAUNCH_SPEED

&#9;for child, relativePosition in pairs(relativePositionsTable) do
&#9;&#9;child.CFrame = part.CFrame + relativePosition
&#9;end

&#9;local mass =  GetMassRecursive(part)
&#9;local bodyForce = Instance.new(&apos;BodyForce&apos;, part)
&#9;bodyForce.force = Vector3.new(0, mass * 196.2, 0) -- Antigravity

&#9;if part.Name ~= &apos;Dynamite&apos; then -- pleaselookawaypleaselookawaypleaselookawaypleaselookaway
&#9;&#9;local launchForce = (TargetHumanoid.Torso.Position - part.Position).unit * LAUNCH_SPEED
&#9;&#9;bodyForce.force = bodyForce.force + launchForce
&#9;&#9;if part.Name == &apos;PickleJar&apos; then bodyForce.force = bodyForce.force + (launchForce * 3) end
&#9;&#9;if part.Name == &apos;NinjaStar&apos; then bodyForce.force = bodyForce.force + (launchForce * 5) end
&#9;&#9;Delay(0.3, function() bodyForce.force = bodyForce.force - launchForce end)
&#9;else
&#9;&#9;bodyForce.force = (bodyForce.force * 6) + (PetHumanoid.Torso.CFrame.lookVector * 100)
&#9;&#9;Delay(0.1, function() bodyForce:Destroy() end)
&#9;end

&#9;local partScript = part:FindFirstChild(&apos;Script&apos;)
&#9;if partScript then
&#9;&#9;partScript.Disabled = false
&#9;end

&#9;SwooshSound:Play()

&#9;DebrisService:AddItem(part, 10)
&#9;part.Parent = Workspace
end

------------------------
--| Main Pet AI Loop |--
------------------------

while true do
&#9;if not MyHumanoid or not MyHumanoid.Torso or not PetHumanoid or not PetHumanoid.Torso then break end

&#9;-- Jumping over obstacles
&#9;local hit = Game.Workspace:FindPartOnRay(Ray.new(PetHumanoid.Torso.Position, PetHumanoid.Torso.CFrame.lookVector * 3.0), MyModel)
&#9;if hit then
&#9;&#9;PetHumanoid.Jump = true
&#9;end

&#9;if not TargetHumanoid or not TargetHumanoid.Torso then
&#9;&#9;print(&quot;TargetHumanoid is nil&quot;)
&#9;&#9;PetMode = 0
&#9;end

&#9;if PetMode == 0 then -- Default: Follow the player
&#9;&#9;PetHumanoid:MoveTo(MyHumanoid.Torso.Position + OFFSET, MyHumanoid.Torso)
&#9;elseif PetMode == 1 then -- Mode 1: Give the target a noogie
&#9;&#9;local distanceToPlayer = (MyHumanoid.Torso.Position - PetHumanoid.Torso.Position).magnitude
&#9;&#9;local distanceToTarget = (TargetHumanoid.Torso.Position - PetHumanoid.Torso.Position).magnitude
&#9;&#9;if distanceToPlayer &gt; MAX_DISTANCE then -- Give up trying to get to target
&#9;&#9;&#9;Stop()
&#9;&#9;elseif distanceToTarget &gt; OFFSET.magnitude then -- Get up close
&#9;&#9;&#9;PetHumanoid:MoveTo(TargetHumanoid.Torso.Position, TargetHumanoid.Torso)
&#9;&#9;else -- We&apos;ve reached the player, noogie &apos;em
&#9;&#9;&#9;PetHumanoid.Jump = true
&#9;&#9;&#9;wait(0.25) -- Airtime
&#9;&#9;&#9;if TargetHumanoid and TargetHumanoid.Torso then
&#9;&#9;&#9;&#9;TargetHumanoid.Torso.Anchored = true
&#9;&#9;&#9;&#9;PetHumanoid.Torso.Anchored = true
&#9;&#9;&#9;&#9;local height = (TargetHumanoid.Torso.Size.y / 2)
&#9;&#9;&#9;&#9;if TargetHumanoid.Parent and TargetHumanoid.Parent:FindFirstChild(&apos;Head&apos;) then
&#9;&#9;&#9;&#9;&#9;height = height + (TargetHumanoid.Parent.Head.Size.y / 2)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;local position = TargetHumanoid.Torso.CFrame:pointToWorldSpace(Vector3.new(0, height + 0.3, 1))
&#9;&#9;&#9;&#9;local facing = TargetHumanoid.Torso.CFrame.lookVector
&#9;&#9;&#9;&#9;PetHumanoid.Torso.CFrame = CFrame.new(position, position + facing)
&#9;&#9;&#9;&#9;AnimationToPlayObject.Value = &apos;NewNoogieLoop&apos;
&#9;&#9;&#9;&#9;wait(3)
&#9;&#9;&#9;&#9;AnimationToPlayObject.Value = &apos;&apos;
&#9;&#9;&#9;&#9;if TargetHumanoid and TargetHumanoid.Torso then
&#9;&#9;&#9;&#9;&#9;TargetHumanoid.Torso.Anchored = false
&#9;&#9;&#9;&#9;&#9;local targetHeight = 0 do -- get target height
&#9;&#9;&#9;&#9;&#9;&#9;targetHeight = TargetHumanoid.Torso.Size.y / 2
&#9;&#9;&#9;&#9;&#9;&#9;if TargetHumanoid.RightLeg then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;targetHeight = targetHeight + TargetHumanoid.RightLeg.Size.y
&#9;&#9;&#9;&#9;&#9;&#9;elseif TargetHumanoid.LeftLeg then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;targetHeight = targetHeight + TargetHumanoid.LeftLeg.Size.y
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;local crashHeight = 0 do -- get Crash height
&#9;&#9;&#9;&#9;&#9;&#9;crashHeight = PetHumanoid.Torso.Size.y / 2
&#9;&#9;&#9;&#9;&#9;&#9;if PetHumanoid.RightLeg then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;crashHeight = crashHeight + PetHumanoid.RightLeg.Size.y
&#9;&#9;&#9;&#9;&#9;&#9;elseif PetHumanoid.LeftLeg then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;crashHeight = crashHeight + PetHumanoid.LeftLeg.Size.y
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;position = TargetHumanoid.Torso.CFrame:pointToWorldSpace(Vector3.new(0, (-targetHeight + crashHeight), 1.7))
&#9;&#9;&#9;&#9;&#9;PetHumanoid.Torso.CFrame = CFrame.new(position, position + facing)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;PetHumanoid.Torso.Anchored = false
&#9;&#9;&#9;end
&#9;&#9;&#9;Stop()
&#9;&#9;end
&#9;elseif PetMode == 2 then -- Mode 2: Throw pickle jars (or ninja stars!)
&#9;&#9;for i = 1, JARS_TO_THROW do
&#9;&#9;&#9;FaceTarget()
&#9;&#9;&#9;if math.random(2) == 1 then
&#9;&#9;&#9;&#9;Throw(PickleJar:Clone())
&#9;&#9;&#9;else -- Throw a ninja star instead!
&#9;&#9;&#9;&#9;local ninjaStarClone = NinjaStar:Clone()
&#9;&#9;&#9;&#9;Throw(ninjaStarClone)
&#9;&#9;&#9;&#9;--[[ninjaStarClone.Touched:connect(function(otherPart)
&#9;&#9;&#9;&#9;&#9;if otherPart then
&#9;&#9;&#9;&#9;&#9;&#9;if Pet and Pet:IsAncestorOf(otherPart) then return end
&#9;&#9;&#9;&#9;&#9;&#9;Delay(1, function() ninjaStarClone:Destroy() end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)]]
&#9;&#9;&#9;&#9;ninjaStarClone.CFrame = CFrame.Angles(math.pi/2, 0, 0) + ninjaStarClone.Position
&#9;&#9;&#9;end
&#9;&#9;&#9;wait(1)
&#9;&#9;end
&#9;&#9;Stop()
&#9;elseif PetMode == 3 then -- Mode 3: Throw Dynamite
&#9;&#9;for i = 1, DYNAMITE_TO_THROW do
&#9;&#9;&#9;FaceTarget()
&#9;&#9;&#9;Throw(Dynamite:Clone())
&#9;&#9;&#9;wait(1)
&#9;&#9;end
&#9;&#9;Stop()
&#9;end

&#9;wait(ONE_STEP)
end

DebrisService:AddItem(script.Parent, 5)
</ProtectedString>
				</Properties>
				<Item class="ObjectValue" referent="RBX6">
					<Properties>
						<string name="Name">Owner</string>
						<Ref name="Value">null</Ref>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX7">
			<Properties>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">PetAnimation</string>
				<ProtectedString name="Source">-- Waits for parent.child to exist, then returns it
local function WaitForChild(parent, childName)
&#9;assert(parent, &quot;ERROR: WaitForChild: parent is nil&quot;)
&#9;while not parent:FindFirstChild(childName) do parent.ChildAdded:wait() end
&#9;return parent[childName]
end

local PlayersService = Game:GetService(&apos;Players&apos;)
local DebrisService = Game:GetService(&apos;Debris&apos;)

local MyModel = script.Parent

local Pet = WaitForChild(script, &apos;Pet&apos;).Value
local PetHumanoid = WaitForChild(Pet, &apos;Humanoid&apos;)

local AnimationToPlayObject = WaitForChild(script, &apos;AnimationToPlay&apos;)

local ReplicationScript = WaitForChild(script, &apos;ReplicateNpcAnimation&apos;)
local AnimToReplicateObject = WaitForChild(ReplicationScript, &apos;AnimationToReplicate&apos;)
local PlayOrStopObject = WaitForChild(ReplicationScript, &apos;PlayOrStop&apos;)

WaitForChild(ReplicationScript, &apos;PetHumanoid&apos;).Value = PetHumanoid

WaitForChild(script, &apos;NewNoogieLoop&apos;) -- Hardcoded or we&apos;ll never see it

local AnimationTupleTable = {}
local LastAnimationTrack = nil

-- Take any child animations and add them and their tracks to AnimationTupleTable
for _, child in pairs(script:GetChildren()) do
&#9;if child and child:IsA(&apos;Animation&apos;) then
&#9;&#9;AnimationTupleTable[child.Name] = {child, PetHumanoid:LoadAnimation(child)}
&#9;&#9;print(&quot;Animation pre-loaded:&quot;, child.Name) --DEBUG
&#9;end
end

-- When AnimationToPlay is changed, try to play the animation or stop the last
AnimationToPlayObject.Changed:connect(function(newValue)
&#9;if newValue ~= &apos;&apos; then
&#9;&#9;local animationTuple = AnimationTupleTable[newValue]
&#9;&#9;if animationTuple then
&#9;&#9;&#9;animationTuple[2]:Play()
&#9;&#9;&#9;AnimToReplicateObject.Value = animationTuple[1]
&#9;&#9;&#9;PlayOrStopObject.Value = true
&#9;&#9;&#9;LastAnimationTrack = animationTuple[2]

&#9;&#9;&#9;-- Replicate the child script to all other players so they can see the NPC animating
&#9;&#9;&#9;for _, player in pairs(PlayersService:GetPlayers()) do
&#9;&#9;&#9;&#9;if player.Character and player.Character ~= MyModel then
&#9;&#9;&#9;&#9;&#9;local replicationScriptClone = ReplicationScript:Clone()
&#9;&#9;&#9;&#9;&#9;DebrisService:AddItem(replicationScriptClone, 10) -- Just in case
&#9;&#9;&#9;&#9;&#9;replicationScriptClone.Parent = player.Character
&#9;&#9;&#9;&#9;&#9;replicationScriptClone.Disabled = false
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;end
&#9;else
&#9;&#9;if LastAnimationTrack then
&#9;&#9;&#9;LastAnimationTrack:Stop()
&#9;&#9;end
&#9;&#9;PlayOrStopObject.Value = false
&#9;end

end)

--NOTE: This script would be much nicer if AnimationTracks could be sent using ObjectValues. (Or directly sent through some other means)
</ProtectedString>
			</Properties>
			<Item class="Animation" referent="RBX8">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/Asset?ID=93604135</url></Content>
					<string name="Name">NewNoogieLoop</string>
				</Properties>
			</Item>
			<Item class="StringValue" referent="RBX9">
				<Properties>
					<string name="Name">AnimationToPlay</string>
					<string name="Value"></string>
				</Properties>
			</Item>
			<Item class="ObjectValue" referent="RBX10">
				<Properties>
					<string name="Name">Pet</string>
					<Ref name="Value">null</Ref>
				</Properties>
			</Item>
			<Item class="LocalScript" referent="RBX11">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ReplicateNpcAnimation</string>
					<ProtectedString name="Source">-- Waits for parent.child to exist, then returns it
local function WaitForChild(parent, childName)
&#9;assert(parent, &quot;ERROR: WaitForChild: parent is nil&quot;)
&#9;while not parent:FindFirstChild(childName) do parent.ChildAdded:wait() end
&#9;return parent[childName]
end

local DebrisService = Game:GetService(&apos;Debris&apos;)

local MyModel = script.Parent

local PlayOrStop = WaitForChild(script, &apos;PlayOrStop&apos;).Value
local AnimToReplicate = WaitForChild(script, &apos;AnimationToReplicate&apos;).Value
local PetHumanoid = WaitForChild(script, &apos;PetHumanoid&apos;).Value

local TrackToReplicate = PetHumanoid:LoadAnimation(AnimToReplicate)

--[[
if PlayOrStop then
&#9;print(&quot;Play:&quot;, TrackToReplicate)
&#9;TrackToReplicate:Play()
else
&#9;print(&quot;Stop:&quot;, TrackToReplicate)
&#9;TrackToReplicate:Stop()
end

DebrisService:AddItem(script, 0)
--]]

TrackToReplicate:Play()
wait(3)
TrackToReplicate:Stop()
DebrisService:AddItem(script, 0)</ProtectedString>
				</Properties>
				<Item class="BoolValue" referent="RBX12">
					<Properties>
						<string name="Name">PlayOrStop</string>
						<bool name="Value">false</bool>
					</Properties>
				</Item>
				<Item class="ObjectValue" referent="RBX13">
					<Properties>
						<string name="Name">AnimationToReplicate</string>
						<Ref name="Value">null</Ref>
					</Properties>
				</Item>
				<Item class="ObjectValue" referent="RBX14">
					<Properties>
						<string name="Name">PetHumanoid</string>
						<Ref name="Value">null</Ref>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX15">
			<Properties>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">PopupGui</string>
				<ProtectedString name="Source">-- Waits for parent.child to exist, then returns it
local function WaitForChild(parent, childName)
&#9;assert(parent, &quot;ERROR: WaitForChild: parent is nil&quot;)
&#9;while not parent:FindFirstChild(childName) do parent.ChildAdded:wait() end
&#9;return parent[childName]
end

local PlayersService = Game:GetService(&apos;Players&apos;)
local MyPlayer = PlayersService.LocalPlayer

local Tool = script.Parent

local ScreenGui = WaitForChild(script, &apos;ScreenGui&apos;)
local ClonedFrame = nil

local NeverEquipped = true

local function OnEquipped(mouse)
&#9;if NeverEquipped then
&#9;&#9;NeverEquipped = false

&#9;&#9;local guiClone = ScreenGui:Clone()
&#9;&#9;guiClone.Parent = MyPlayer.PlayerGui

&#9;&#9;ClonedFrame = WaitForChild(guiClone, &apos;Frame&apos;)
&#9;end
end

local function OnActivated()
&#9;ClonedFrame.Visible = false
end

Tool.Equipped:connect(OnEquipped)
Tool.Activated:connect(OnActivated)
</ProtectedString>
			</Properties>
			<Item class="ScreenGui" referent="RBX16">
				<Properties>
					<string name="Name">ScreenGui</string>
				</Properties>
				<Item class="Frame" referent="RBX17">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Frame</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-284</XO>
							<YS>0.5</YS>
							<YO>-257</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>568</XO>
							<YS>0</YS>
							<YO>515</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">10</int>
					</Properties>
					<Item class="ImageLabel" referent="RBX18">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="Image"><url>http://www.roblox.com/Asset?ID=93747474</url></Content>
							<string name="Name">ImageLabel</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">10</int>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>